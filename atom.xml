<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>pureblog</title>
    <link href="https://frasertweedale.github.io/blog-fp/atom.xml" rel="self" />
    <link href="https://frasertweedale.github.io/blog-fp" />
    <id>https://frasertweedale.github.io/blog-fp/atom.xml</id>
    <author>
        <name>Fraser Tweedale</name>
        <email>frase@frase.id.au</email>
    </author>
    <updated>2021-03-30T00:00:00Z</updated>
    <entry>
    <title>Purebred plugin system: implementation</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-03-30-purebred-plugins-implementation.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-03-30-purebred-plugins-implementation.html</id>
    <published>2021-03-30T00:00:00Z</published>
    <updated>2021-03-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="purebred-plugin-system-implementation">Purebred plugin system: implementation</h1>
<p>I previously wrote about a <a href="2021-02-02-plugin-system-prototype.html">prototype plugin system</a> for <a href="https://github.com/purebred-mua/purebred">Purebred</a>. In this post I discuss some improvements to the design, and report on the implementation progress.</p>
<h2 id="recap">Recap <a href="#recap">§</a></h2>
<p>The requirements for the plugin system were:</p>
<ul>
<li><p>Plugin types must express the <strong>capabilities</strong> they use, to help users understand what the plugin can and cannot do.</p></li>
<li><p>Diverse plugins must <strong>compose</strong> together, even when they use different capabilities.</p></li>
<li><p>Plugin function types must use <strong>abstract</strong> constraints, not concrete types, so the application can evolve without breaking plugins.</p></li>
<li><p>Types should be <strong>human friendly</strong>.</p></li>
<li><p>It must be possible to <strong>configure</strong> plugins, if required.</p></li>
</ul>
<p>The prototype design satisfied these requirements, with some caveats. The biggest deficiencies were that the plugin’s type does not reveal which hook(s) the plugin uses, and the plugin’s type expresses the <em>union</em> of capabilities needed by all its hook functions. There was no way for a plugin to say, for example, that it uses <code>CanIO</code> for one hook, and <code>CanRWState</code> for some other hook.</p>
<h2 id="plugin-record-type-improvements">Plugin record type improvements <a href="#plugin-record-type-improvements">§</a></h2>
<p>Recall the <code>Plugin</code> record type from the previous article:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="dt">Plugin</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  {<span class="ot"> pluginName ::</span> <span class="dt">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  ,<span class="ot"> pluginHook ::</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p><code>ctx</code> is the capability, for example <code>CanIO</code>. The many hooks in a real application would appear as additional fields in this record type. One consequence of this design is that the capability of the plugin as a whole must be the union of capabilities actually required by the plugin’s hook functions.</p>
<p>It also means that there is no way for the application to offer limited capabliities to some hooks. Put another way, all capabilities are available to all hooks. This does not reflect the needs of real applications; they may need to restrict which capabilities are available in different hooks.</p>
<p>The plugin system implemented in Purebred improves on the prototype design. We define the plugin record type, now called <code>PluginDict</code>, as follows:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PluginDict</span> <span class="ot">=</span> <span class="dt">PluginDict</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>  {<span class="ot"> _pluginName ::</span> <span class="dt">String</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  ,<span class="ot"> _pluginVersion ::</span> <span class="dt">Version</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  ,<span class="ot"> _pluginBuiltIn ::</span> <span class="dt">Bool</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  ,<span class="ot"> _configHook ::</span> <span class="dt">ConfigHook</span> <span class="dt">CanIO</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  ,<span class="ot"> _preSendHook ::</span> <span class="dt">PreSendHook</span> <span class="dt">Unconstrained</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  }</span></code></pre></div>
<p>The <code>ctx</code> type parameter is gone. Instead, each hook function field specifies the capabilities available to that hook.</p>
<p>Each hook function is no longer a bare function but is wrapped in a <code>newtype</code>. This (I feel) improves readability. It allows lenses to be defined, without resorting the GHC’s currently-flaky support for impredicative types. Use of optics is also why the field accessors, which are not exported, are prefixed with <code>_</code>.</p>
<p>As an example of a hook type, here is the definition of <code>PreSendHook</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">PreSendHook</span> cap <span class="ot">=</span> <span class="dt">PreSendHook</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  { getPreSendHook</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="ot">      ::</span> <span class="kw">forall</span> m<span class="op">.</span> (cap m) <span class="ot">=&gt;</span> <span class="dt">MIMEMessage</span> <span class="ot">-&gt;</span> m <span class="dt">MIMEMessage</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p>Finally, I added a field to store the plugin version, and a boolean to distinguish between built-in and external plugins. We (the Purebred authors) intend to use the plugin system to provide some baseline functionality. But we do not want to treat these behaviours as plugins from the user’s point of view. The <code>_pluginBuiltIn</code> field lets us discriminate.</p>
<h2 id="public-plugin-type-improvements">Public plugin type improvements <a href="#public-plugin-type-improvements">§</a></h2>
<p>Plugin modules no longer export a plugin record value (what we now call <code>PluginDict</code>). The <code>Plugin</code> type lives on, in a different form:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Plugin</span> hooks <span class="ot">=</span> <span class="dt">Plugin</span> <span class="dt">String</span> <span class="dt">Version</span> hooks</span></code></pre></div>
<p>A <code>Plugin</code> value has a name, version, and <code>hooks</code>. What is <code>hooks</code>? It is best understood in the context of the <code>usePlugin</code> function. Like the <code>relax</code> function from the prototype, <code>usePlugin</code> monomorphises plugins and prepares them for use in the main program.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">usePlugin ::</span> (<span class="dt">Hook</span> hooks) <span class="ot">=&gt;</span> <span class="dt">Plugin</span> hooks <span class="ot">-&gt;</span> <span class="dt">PluginDict</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>usePlugin (<span class="dt">Plugin</span> name ver hook) <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  setHook hook <span class="op">$</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    <span class="dt">PluginDict</span> name ver <span class="dt">False</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>      (<span class="dt">ConfigHook</span> <span class="fu">pure</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>      (<span class="dt">PreSendHook</span> <span class="fu">pure</span>)</span></code></pre></div>
<p><code>usePlugin</code> constructs a <code>PluginDict</code> full of <em>no-op</em> hooks, then sets the plugin’s hooks via the <code>setHook</code> function. <code>hooks</code> must have an instance of the <code>Hook</code> type class:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Hook</span> t <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">  setHook ::</span> t <span class="ot">-&gt;</span> <span class="dt">PluginDict</span> <span class="ot">-&gt;</span> <span class="dt">PluginDict</span></span></code></pre></div>
<p>Each hook function type has an instance of <code>Hook</code>. These instances set the hook function in the <code>PluginDict</code>. A quantified constraint ensures the capabilities demanded by the hook function do not exceed the capabilities offered. Here, as an example, is the instance for <code>PreSendHook</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">instance</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>   (<span class="kw">forall</span> m<span class="op">.</span> <span class="dt">Unconstrained</span> m <span class="ot">=&gt;</span> cap m)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="ot">=&gt;</span> <span class="dt">Hook</span> (<span class="dt">PreSendHook</span> cap) <span class="kw">where</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>  setHook (<span class="dt">PreSendHook</span> f) <span class="ot">=</span> set preSendHook (<span class="dt">PreSendHook</span> f)</span></code></pre></div>
<p>This is another reasons why it was necessary to <code>newtype</code> all the hook functions.</p>
<p>To support plugins that use multiple hooks, we declare an instance of <code>Hook</code> for pairs (2-tuples). This allows plugins to define as many hooks as they need, using nested tuples:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">Hook</span> h1, <span class="dt">Hook</span> h2) <span class="ot">=&gt;</span> <span class="dt">Hook</span> (h1, h2) <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>  setHook (h1, h2) <span class="ot">=</span> setHook h1 <span class="op">.</span> setHook h2</span></code></pre></div>
<h2 id="implementing-plugins">Implementing plugins <a href="#implementing-plugins">§</a></h2>
<p>Plugins construct and export a <code>Plugin hook</code> value, where <code>hook</code> is a hook function type or a nested tuple of the same.</p>
<div class="note">
<p>If a plugin defines the same hook multiple times, <code>usePlugin</code> discards all but the “leftmost” occurrence.</p>
</div>
<p>Here is the implementation of our <code>User-Agent</code> plugin:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Purebred.Plugin.UserAgent</span> (plugin) <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Lens</span> (set, view)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.MIME</span> (headerText)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Plugin</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Version</span> (version, userAgent)</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Types</span> (confCharset)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> (<span class="dt">PreSendHook</span> <span class="dt">CanReadConfig</span>)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;UserAgent&quot;</span> version (<span class="dt">PreSendHook</span> hook) <span class="kw">where</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>  hook msg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    charsets <span class="ot">&lt;-</span> view confCharsets</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>    <span class="kw">let</span> l <span class="ot">=</span> headerText charsets <span class="st">&quot;User-Agent&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>    <span class="fu">pure</span> <span class="op">$</span> set l (<span class="dt">Just</span> userAgent) msg</span></code></pre></div>
<p>The concrete type of a plugin shows the hook(s) used by the plugin, and the capabilities required by each hook. If a plugin needs to use multiple hooks, use nested pairs. In the example above, <code>plugin</code> uses the <code>PreSendHook</code> with the <code>CanReadConfig</code> capability. The type proves that the the <code>User-Agent</code> plugin only uses the <code>PreSendHook</code>, cannot perform I/O, and so on.</p>
<div class="note">
<p>We could define <code>Hook</code> instances for 3-tuples, 4-tuples, and so on. But I decided not to, because where does it end? Besides, I don’t think there will be many plugins that use more than two hooks.</p>
</div>
<p>The name of the plugin value (<code>plugin</code> in the preceding example) is not important. Plugin authors can use whatever name makes sense. Plugins that require configuration should export a function instead of a plain <code>Plugin</code> value, as in the following examples:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Purebred.Plugin.TweakConfig</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Plugin</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Version</span> (version)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Types</span> (<span class="dt">UserConfiguration</span>)</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>tweakConfig</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> <span class="dt">UserConfiguration</span>)</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Plugin</span> (<span class="dt">ConfigHook</span> <span class="dt">Pure</span>)</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>tweakConfig hook <span class="ot">=</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>  <span class="dt">Plugin</span> <span class="st">&quot;Purebred.Plugin.TweakConfig&quot;</span> version</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a>    (<span class="dt">ConfigHook</span> (<span class="fu">pure</span> <span class="op">.</span> hook))</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a>tweakConfigWithIO</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a><span class="ot">  ::</span> ( <span class="kw">forall</span> m<span class="op">.</span> (<span class="dt">CanIO</span> m) <span class="ot">=&gt;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a>       <span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> m <span class="dt">UserConfiguration</span> )</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Plugin</span> (<span class="dt">ConfigHook</span> <span class="dt">CanIO</span>)</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a>tweakConfigWithIO hook <span class="ot">=</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a>  <span class="dt">Plugin</span> <span class="st">&quot;Purebred.Plugin.TweakConfig (IO)&quot;</span> version</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>    (<span class="dt">ConfigHook</span> hook)</span></code></pre></div>
<p>The <code>TweakConfig</code> module provides two variants of a plugin to adjust Purebred’s configuration at startup. <code>tweakConfig</code> takes a pure transformation and yields a <code>Plugin (ConfigHook Pure)</code>, whereas <code>tweakConfigWithIO</code> allows the use of <code>IO</code>.</p>
<h2 id="using-plugins">Using plugins <a href="#using-plugins">§</a></h2>
<p>Users apply <code>usePlugin</code> to each plugin and produce a <code>[PluginDict]</code>. That list is then given as argument to the main Purebred entry point:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="ot">purebred ::</span> [<span class="dt">PluginDict</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p>The user configuration file, in a basic sense, is a program that constructs a list of plugins and applies <code>purebred</code> to it. Here is a cut-down version of my <code>~/.config/purebred/purebred.hs</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Purebred.Plugin.TweakConfig</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Purebred.Plugin.ICU</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>listKeybindings <span class="ot">=</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a>  [ <span class="co">{- my preferred keybindings -}</span> ]</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a>tweak <span class="ot">=</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a>    over (confIndexView <span class="op">.</span> ivBrowseThreadsKeybindings)</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true"></a>         (listKeybindings <span class="op">&lt;&gt;</span>)</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true"></a>  <span class="op">.</span> set (confNotmuch <span class="op">.</span> nmNewTag) <span class="st">&quot;inbox&quot;</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true"></a>main <span class="ot">=</span> purebred</span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true"></a>  [ usePlugin <span class="op">$</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true"></a>      Purebred.Plugin.TweakConfig.tweakConfig tweak</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true"></a>  , usePlugin</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true"></a>      Purebred.Plugin.ICU.plugin</span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>Some plugins have no configuration and just do their thing. But other plugins may require the user to construct a substantial configuration. A PGP/MIME plugin that uses GnuPG, though not written yet, seems likely to have a lot of knobs. Plugins that require configuration should offer ergonomic ways to construct sensible, safe configurations.</p>
<h3 id="built-in-plugins">Built-in plugins <a href="#built-in-plugins">§</a></h3>
<p><code>defaultConfig</code> is the default <code>UserConfiguration</code> value. It is not exported, but it can be modified by <code>ConfigHook</code>s. Built-in plugins are already set in the <code>confPlugins</code> field of <code>defaultConfig</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">defaultConfig ::</span> <span class="dt">UserConfiguration</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>defaultConfig <span class="ot">=</span> <span class="dt">Configuration</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  { _confPlugins <span class="ot">=</span> set pluginBuiltIn <span class="dt">True</span> <span class="op">&lt;$&gt;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>      [ usePlugin Purebred.Plugin.UserAgent.plugin</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>      …</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>      ]</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>  …</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>  }</span></code></pre></div>
<p><code>usePlugin</code> sets the <code>pluginBuiltIn</code> field to <code>False</code>. But we reset it to <code>True</code> for all built-in plugins. The <code>pluginBuiltIn</code> optic is not exported. Therefore users cannot change the treatment of a plugin from built-in to external, or vice versa.</p>
<p>The <code>purebred</code> entry point merges user-supplied plugins with the built-in plugins:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">purebred ::</span> [<span class="dt">PluginDict</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>purebred plugins <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  …</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    cfg <span class="ot">=</span> over confPlugins (plugins <span class="op">&lt;&gt;</span>) defaultConfig</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>    dyreParams <span class="ot">=</span> …</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>  Dyre.wrapMain dyreParams cfg</span></code></pre></div>
<h2 id="executing-plugins">Executing plugins <a href="#executing-plugins">§</a></h2>
<p>Purebred executes <code>ConfigHook</code>s immediately after Dyre (the configuration system) invokes the “real main” action (called <code>launch</code>):</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">launch ::</span> <span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>launch inCfg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>    plugins <span class="ot">=</span> view confPlugins inCfg</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    hooks <span class="ot">=</span> getConfigHook <span class="op">.</span> view configHook <span class="op">&lt;$&gt;</span> plugins</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>  cfg <span class="ot">&lt;-</span> <span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> hooks inCfg</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>  …</span></code></pre></div>
<p><code>PreSendHook</code>s are executed in the action that sends mail:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>  <span class="kw">let</span> msg <span class="ot">=</span> …</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>  hooks <span class="ot">&lt;-</span> uses (asConfig <span class="op">.</span> confPlugins)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>           (<span class="fu">fmap</span> (getPreSendHook <span class="op">.</span> view preSendHook))</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>  cfg <span class="ot">&lt;-</span> use asConfig</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>  msg&#39; <span class="ot">&lt;-</span> runReaderT (<span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> hooks msg) cfg</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>  k (buildMessage msg&#39;)</span></code></pre></div>
<p>These two examples reveal a pattern for hook execution:</p>
<ol type="1">
<li><p>Extract the relevant hook functions from the <code>[PluginDict]</code></p></li>
<li><p>Use Kleisli composition <code>(&gt;=&gt;)</code> to fold the list into a single action.</p></li>
<li><p>Execute the composed action, using transformers if necessary.</p></li>
</ol>
<p>This pattern applies when the hook function type has the shape <code>a -&gt; m a</code>. So far, all the hook functions have that shape.</p>
<h2 id="hooks-in-purebred">Hooks in Purebred <a href="#hooks-in-purebred">§</a></h2>
<p>The hooks we have already implemented are:</p>
<ul>
<li><p><strong><code>ConfigHook</code></strong>: modify configuration at program startup.</p></li>
<li><p><strong><code>PreSendHook</code></strong>: modify or process a message immediately prior to sending. We currently use this hook, in a built-in plugin, to add a <code>User-Agent</code> header to outgoing messages. Can perform I/O. This is the hook that will be used to sign and/or encrypt outgoing mail. We will probably also add a capability to enable a plugin to abort sending.</p></li>
</ul>
<p>Hooks we haven’t implemented, but must, include (names subject to change):</p>
<ul>
<li><p><strong><code>DisplayHook</code></strong>: modify or process a message before displaying it. One use case is to perform decryption or verify signatures.</p></li>
<li><p><strong><code>PreEditHook</code></strong>: process a part before editing it. Together with <code>PostEditHook</code> this could be used to enable editing of headers along with text bodies.</p></li>
<li><p><strong><code>PostEditHook</code></strong>: process a message part after editing it.</p></li>
</ul>
<p>We have thought of some other hooks that seem useful, but haven’t yet committed to implementing:</p>
<ul>
<li><p><strong><code>CreateHook</code></strong>: modify a message immediately after creation (i.e. before editing). A proposed use is appending “signature” content.</p></li>
<li><p><strong><code>ReadHook</code></strong>: process raw message data when reading from disk. A plugin could use this to detect compressed files and inflate them. Another use case could be to attempt to “repair” corrupt or nonconformant messages.</p></li>
</ul>
<p>Purebred also needs an “address book” interface. We want plugins to be able to provide address book behaviour. But we haven’t designed it yet. It remains to be seen whether we will do it by way of hooks (as described in this post), or by updating the main configuration (via <code>ConfigHook</code>), or by some other means.</p>
<h2 id="discussion">Discussion <a href="#discussion">§</a></h2>
<p>Although I felt that the prototype design did satisfy the <em>capabilities</em> requirement, there were some deficiencies. I identified and discussed these in <a href="2021-02-02-plugin-system-prototype.html">the original article</a>. In particular, the <code>Plugin</code> type did not express which hooks the plugin uses, nor could a plugin acquire different capabilities for different hooks. The updated design eliminates these deficiencies.</p>
<p>Plugins now have a version field, and the internal representation also distinguishes between built-in and external plugins. We use this to hide built-ins when listing plugins in the <code>--version</code> output.</p>
<p>The problems of UI interaction, and how plugins can store and use plugin-specific state, remain unsolved.</p>
<p>There is also the question of hook execution order or priority. Hook functions process and potentially modify a datum of interest, such as a <code>Message</code> or a <code>ByteString</code>. Consider <code>ReadHook</code>, for processing messages as they’re read from disk, and its hypothetical counterpart <code>WriteHook</code>. A plugin for on-disk mail compression would use these hooks. When reading mail, decompression must precede other operations. When writing, compression should be the final step. The current implementation runs plugins hooks in the order they’re stored—external plugins first, then built-ins. So plugins that involve dual operations (compression, encryption) present inherent challenges. And there is no way to tame unwanted interactions between external and built-in plugins.</p>
<p>For now, the ordering problem is theoretical. I haven’t encountered it in practice, because few plugins have been implemented. So I’m not going to try to solve the problem prematurely. I have an idea that does not add much complexity and should be simple for users to understand. But I will save that discussion for a future post.</p>]]></summary>
</entry>
<entry>
    <title>How Dyre works with Cabal Nix-style builds</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-03-18-dyre-cabal-store.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-03-18-dyre-cabal-store.html</id>
    <published>2021-03-18T00:00:00Z</published>
    <updated>2021-03-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="how-dyre-works-with-cabal-nix-style-builds">How Dyre works with Cabal Nix-style builds</h1>
<p><a href="https://hackage.haskell.org/package/dyre">Dyre</a> is a tool for Haskell program configuration by (re)compilation. In <a href="2021-02-21-dyre-0.9-rc.html">my previous post</a> I discussed the changes planned for the Dyre 0.9 release. That release happened a couple of days ago… but I soon discovered a critical bug in Dyre’s support for <em>cabal-install</em> Nix-style local builds.</p>
<p>I have now <a href="https://github.com/willdonnelly/dyre/commit/414d961222b5b864933f35f0a0d74b1a2f501a23">fixed the bug</a> and <a href="https://hackage.haskell.org/package/dyre-0.9.1">released v0.9.1</a>. As a result of the experience I decided to write this post about how Nix-style local builds work, and how Dyre works with programs built and installed that way.</p>
<h2 id="ghc-and-package-databases">GHC and package databases <a href="#ghc-and-package-databases">§</a></h2>
<p>Haskell packages are installed in <em>package databases</em>. The package database contains libraries’ object code and Haskell interface (<code>*.hi</code>) files, as well as package descriptions and references to the library’s dependencies. When compiling and linking a program or library, GHC looks for dependencies in the configured package database(s).</p>
<p>By default, GHC knows about two package databases. The <em>global package database</em> is where <em>base</em> and the other libraries bundled with GHC are installed. The database location is tied to the GHC release; for example: <code>/usr/lib64/ghc-8.8.4/package.conf.d</code>. On most operating systems, the system package manager will install Haskell libraries in the global package database.</p>
<p>GHC also knows about <em>user package databases</em>. On Unix systems these are located at <code>~/.ghc/ARCH-OS-GHCVER/package.conf.d</code>. As the name and location suggests, unprivileged users can install packages to their user package database. GHC will also search for dependencies in there, unless told otherwise.</p>
<p><em>cabal-install</em> (the <code>cabal</code> program) and the system package manager take care of these package databases. Users don’t normally need to look into or modify them. For the curious (or cursed), you can use the <code>ghc-pkg</code> program to inspect and modify package databases. For example, here’s how to list the contents of the global package database:</p>
<pre class="shell"><code>% ghc-pkg --global list
/usr/lib64/ghc-8.8.4/package.conf.d
    Cabal-3.0.1.0
    Glob-0.10.0
    HTTP-4000.3.14
    HsYAML-0.2.1.0
    HsYAML-aeson-0.2.0.0
    … (many more)</code></pre>
<p>Let’s have a look at one of the records in the global package database:</p>
<pre><code>% cat /usr/lib64/ghc-8.8.4/package.conf.d/mtl-2.2.2.conf
name:                 mtl
version:              2.2.2
visibility:           public
id:                   mtl-2.2.2
key:                  mtl-2.2.2
license:              BSD-3-Clause
maintainer:           Edward Kmett &lt;ekmett@gmail.com&gt;
author:               Andy Gill
homepage:             http://github.com/haskell/mtl
synopsis:             Monad classes, using functional dependencies
description:
    … (elided)
category:             Control
abi:                  7208c11cc6615ddff9d903a90a9878f8
exposed:              True
exposed-modules:
    … (elided)
import-dirs:          /usr/lib64/ghc-8.8.4/mtl-2.2.2
library-dirs:         /usr/lib64/ghc-8.8.4/mtl-2.2.2
dynamic-library-dirs: /usr/lib64
data-dir:             /usr/share/x86_64-linux-ghc-8.8.4/mtl-2.2.2
hs-libraries:         HSmtl-2.2.2
depends:              base-4.13.0.0 transformers-0.5.6.2
haddock-interfaces:   /usr/share/doc/ghc/html/libraries/mtl-2.2.2/mtl.haddock
haddock-html:         /usr/share/doc/ghc/html/libraries/mtl-2.2.2</code></pre>
<p>Most fields are self explanatory, but some need a little explanation:</p>
<ul>
<li><p><strong><code>id</code></strong> is the <em>unit ID</em> that uniquely identifies the package. In the example above it includes the package <code>name</code> and <code>version</code>; a unit ID can also include other identifying data.</p></li>
<li><p><strong><code>depends</code></strong> lists the direct dependencies of this package, as unit IDs.</p></li>
<li><p><strong><code>exposed</code></strong> controls whether the modules in the package are available to import during compilation. This is just the default. GHC command line options and <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/packages.html#package-environments"><em>package environment files</em></a> can alter package visibility.</p></li>
</ul>
<p>For more details see the <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/packages.html"><em>Packages</em> chapter</a> of the GHC User’s Guide.</p>
<h2 id="cabal-install-and-package-databases"><em>cabal-install</em> and package databases <a href="#cabal-install-and-package-databases">§</a></h2>
<p>In earlier times, the <em>cabal-install</em> build tool would install all dependencies of a package into the global or user package database. But when you have multiple packages with conflicting dependencies, this approach does not work. It also makes updating packages very risky. Updating one package (because some dependent program or library requires a newer version) would often break other installed dependent packages.</p>
<p><em>cabal-install</em>’s first solution to this problem was <a href="https://cabal.readthedocs.io/en/3.2/installing-packages.html#developing-with-sandboxes">per-project sandboxes</a>. When using a sandbox, <em>cabal-install</em> installs dependencies (those that are not in the global or user package database) under <code>.cabal-sandbox/</code> in the project directory. Sandboxes are isolated from each other. This solved the main problem but introduced another. Many projects meant many sandboxes, wasting a lot of time and space as common dependencies got built over and over again, in different sandboxes.</p>
<p>Furthermore, users had to deliberately create sandboxes. The problematic behaviour (install to the user package database) was the default behaviour. You had to <em>know</em> about, and use, sandboxes to avoid trouble.</p>
<div class="note">
<p>Sandbox support was removed in <em>cabal-install</em> 3.4.</p>
</div>
<h2 id="nix-style-local-builds">Nix-style local builds <a href="#nix-style-local-builds">§</a></h2>
<p><em>cabal-install</em> since version 1.24 supports <a href="https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html"><em>Nix-style local builds</em></a>. It is the default behaviour (i.e. what <code>cabal build</code> does) since version 2.0. The feature is also called <em><code>v2-build</code></em> or <em><code>new-build</code></em></p>
<p>This build system caches dependencies in a package database at <code>~/.cabal/store/GHCVER/package.db</code>. I call this package database the <strong><em>Cabal store</em></strong>. The unit IDs of packages in the Cabal store include the name, version, and a digest (hash) of the entire package contents, which prevents collisions. For example, <code>ghc-pkg</code> can print the unit IDs of all the variants of <em>purebred-email</em> in my Cabal store. Note that there are multiple variants even of particular versions (some were development builds):</p>
<pre class="shell"><code>% ghc-pkg \
    --package-db ~/.cabal/store/ghc-8.8.4/package.db \
    field purebred-email id \
    | sort
id: purebred-email-0.4.2-904f4dca7fc38b0732875f3118229289f0a854a1b29ceb6f61952455fc536475
id: purebred-email-0.4.2-937f77fe675ce899d5b8bf4e451f09d83f458db59751e28d393dafa5d0e46e80
id: purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7
id: purebred-email-0.4.3-132e0f4a654056feced84d90a98b5cc3f8635b2a56e2821e5193cace1a73946d
id: purebred-email-0.5.0-04c8aceff5a68a6eb0537475f958dcb2aa763675c36a57893119534e690ebfe7
id: purebred-email-0.5.0-0a5c9f98d485c79e5bbbb3eefbc8239c4e5a74dc26d03fc0a12ce8a45a304c8d
id: purebred-email-0.5.0-4c9fa1b81ac8638346df176519fee11541953f243502699a8693f69fafc2293f
id: purebred-email-0.5.0-cc781fa90dc462076d5be322d38e59b76a1604cb866e8b6a15a150653e9f6595
id: purebred-email-0.5.0-e8d411ef4593a88bbd40293b523c03079a01138f9bb1278781a4eb5a15cf461f</code></pre>
<p>If we inspect the <code>depends</code> fields of one of these packages, we see a mix of unit IDs with and without hashes. The ones without hashes will be located in the global package database, and the ones with hashes are other packges in the Cabal store:</p>
<pre class="shell"><code>% ghc-pkg \
    --package-db ~/.cabal/store/ghc-8.8.4/package.db \
    --unit-id \
    field purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7 \
    depends
depends: attoparsec-0.13.2.4-6pdJvsCYDtQ1ZikLcQPH6i base-4.13.0.0
         base64-bytestring-1.0.0.3-6nNbupf0oNc9ekFOSwyfJw
         bytestring-0.10.10.1 case-insensitive-1.2.1.0-GK3nA3zBZszGkFybfKiPH
         concise-0.1.0.1-9e9a3f5d1a0cb55cc27d6ed4559347484ed0182db25d17f54fecc4cb16c664f3
         deepseq-1.4.4.0 lens-4.18.1-1Ci7u4sFw8083dvBI6HqCw
         semigroupoids-5.3.4-3QeAlkxMhKa1rjJSsIVWj7
         semigroups-0.19.1-LKdktuRRdRZ1yx9gBXzSbK
         stringsearch-0.3.6.6-ea9567d6b6c3d6f0b0229eaa65b28da6602e2135e50018657a4d1545dc4a0d0c
         text-1.2.4.0 time-1.9.3</code></pre>
<p>Object code filenames of libraries installed in the Cabal store incorporate the full unit ID:</p>
<pre class="shell"><code>% cd ~/.cabal/store/ghc-8.8.4/purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7/lib
% ls
Data
libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7.a
libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7-ghc8.8.4.so</code></pre>
<p>To assist the dynamic linker, the <code>RUNPATH</code> attribute in dynamically linked executables and shared objects includes the subdirectories of the Cabal store where the needed shared objects are located:</p>
<pre class="shell"><code>% objdump -x libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7-ghc8.8.4.so \
    | grep RUNPATH \
    | awk &#39;{ print $2 }&#39; \
    | tr : &#39;\n&#39; \
    | sort
/home/ftweedal/.cabal/store/ghc-8.8.4/concise-0.1.0.1-9e9a3f5d1a0cb55cc27d6ed4559347484ed0182db25d17f54fecc4cb16c664f3/lib
/home/ftweedal/.cabal/store/ghc-8.8.4/stringsearch-0.3.6.6-ea9567d6b6c3d6f0b0229eaa65b28da6602e2135e50018657a4d1545dc4a0d0c/lib
/usr/lib64
/usr/lib64/ghc-8.8.4/rts</code></pre>
<p>Executables are installed in the Cabal store and referenced by a symbolic link installed in <code>~/.cabal/bin/</code> or a similar location.</p>
<pre class="shell"><code>% which purebred
~/.cabal/bin/purebred
% readlink ~/.cabal/bin/purebred
../store/ghc-8.8.4/purebred-0.1.0.0-ffa8d363a9788cf11f71e6dbad787526a4fa1f9f750969f4d55036610f5cb027/bin/purebred</code></pre>
<h2 id="dyre-and-the-cabal-store">Dyre and the Cabal store <a href="#dyre-and-the-cabal-store">§</a></h2>
<p>When using <em>cabal-install</em>, the details about the Cabal store are hidden from the user. But a Dyre-enabled program does not have the luxury of using <em>cabal-install</em> when (re)compiling a custom executable. We cannot assume that the <code>cabal</code> program is available. Even if we did make that assumption, using <em>cabal-install</em> would introduce <strong>a lot</strong> of additional complexity. And maintenance overhead, because <em>cabal-install</em>’s behaviour is continually evolving, whereas GHC’s command line interface is stable.</p>
<p>So Dyre invokes GHC directly. When a Dyre application’s main library is in the global or user package database, GHC finds it and all is well. But when the library is in the Cabal store, GHC cannot find it:</p>
<pre class="shell"><code>% purebred
Configuration &#39;/home/fraser/.config/purebred/purebred.hs&#39; changed. Recompiling.
Error occurred while loading configuration file.
purebred: 
/home/fraser/.config/purebred/purebred.hs:5:1: error:
    Could not find module ‘Purebred’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
5 | import Purebred
  | ^^^^^^^^^^^^^^^

CallStack (from HasCallStack):
  error, called at src/Purebred.hs:347:69 in purebred-0.1.0.0-95b0b0050ea0df258f6dce7f45c7c58630549c4395e1e143f3e0915c057e8cbc:Purebred</code></pre>
<p>To overcome this, Dyre needs to detect when the application library is installed in the Cabal store, and pass some additional command line options to GHC:</p>
<ul>
<li><p>The <code>-package-db &lt;FILE&gt;</code> option adds the package database at <code>FILE</code> to the list of databases GHC searches. Dyre uses this option to add the Cabal store.</p></li>
<li><p>The <code>-package-id &lt;UNIT-ID&gt;</code> option <em>exposes</em> the package identified by <code>UNIT-ID</code>, making its public modules available for import. Dyre uses this option to expose the main application library.</p></li>
</ul>
<p>In Dyre’s implementation, the <code>getCabalStoreGhcArgs</code> function computes these options. It is applied to a Dyre project name and a library path. If the library path is in the Cabal store <em>and</em> matches the project name, Dyre derives the appropriate <code>-package-db</code> and <code>-package-id</code> options.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">System.FilePath</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>  (joinPath, splitPath, dropTrailingPathSeparator)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="ot">getCabalStoreGhcArgs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>getCabalStoreGhcArgs proj <span class="ot">=</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>    mkArgs <span class="op">.</span> go <span class="op">.</span> <span class="fu">fmap</span> dropTrailingPathSeparator <span class="op">.</span> splitPath</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>  go (<span class="st">&quot;.cabal&quot;</span> <span class="op">:</span> <span class="st">&quot;store&quot;</span> <span class="op">:</span> hc <span class="op">:</span> pid <span class="op">:</span> _) <span class="ot">=</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>    <span class="kw">case</span> splitOn <span class="ch">&#39;-&#39;</span> pid <span class="kw">of</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>      [name, _version, _hash] <span class="op">|</span> name <span class="op">==</span> proj</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">Just</span> (pid, [<span class="st">&quot;.cabal&quot;</span>, <span class="st">&quot;store&quot;</span>, hc, <span class="st">&quot;package.db&quot;</span>])</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>      _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>  go (h <span class="op">:</span> t<span class="op">@</span>(_ <span class="op">:</span> _ <span class="op">:</span> _ <span class="op">:</span> _ <span class="op">:</span> _)) <span class="ot">=</span> <span class="fu">fmap</span> (h<span class="op">:</span>) <span class="op">&lt;$&gt;</span> go t</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>  go _ <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true"></a>  mkArgs <span class="dt">Nothing</span> <span class="ot">=</span> []</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true"></a>  mkArgs (<span class="dt">Just</span> (unitId, pkgDb)) <span class="ot">=</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true"></a>    [<span class="st">&quot;-package-db&quot;</span>, joinPath pkgDb, <span class="st">&quot;-package-id&quot;</span>, unitId]</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true"></a></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true"></a>  splitOn a l <span class="ot">=</span> <span class="kw">case</span> <span class="fu">span</span> (<span class="op">/=</span> a) l <span class="kw">of</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true"></a>    (h, []) <span class="ot">-&gt;</span> [h]</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true"></a>    (h, _ <span class="op">:</span> t) <span class="ot">-&gt;</span> h <span class="op">:</span> splitOn a t</span></code></pre></div>
<div class="note">
<p><em>cabal-install</em> lets you <a href="https://cabal.readthedocs.io/en/3.4/cabal-project.html?highlight=store-dir#cmdoption-store-dir">override the Cabal store directory</a>. Dyre assumes the default <code>~/.cabal/store/</code>. If the Cabal store is not in the expected place, the detection logic fails.</p>
</div>
<p>The final piece of the puzzle is how Dyre learns the application’s library directory that will be the <code>FilePath</code> argument to <code>getCabalStoreGhcArgs</code>. Dyre itself is just a library. We rely on the main program to tell Dyre where its library is located. The only alternative I know of is brittle, operating system-specific hacks.</p>
<p>Cabal packages can make use of an auto-generated <a href="https://cabal.readthedocs.io/en/3.4/cabal-package.html#accessing-data-files-from-package-code"><code>Paths_&lt;pkgname&gt;</code> module</a>. It provides <code>IO</code> actions that return the installation paths of the package (object files, binaries, data and so on), including:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">getLibDir ::</span> <span class="dt">IO</span> <span class="dt">FilePath</span></span></code></pre></div>
<p>Dyre applications can read this value and pass it to Dyre via the <a href="https://hackage.haskell.org/package/dyre-0.9.1/docs/Config-Dyre.html#v:includeDirs"><code>includeDirs</code></a> field in the <code>Params</code> object. Here is a simplified example:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">MyApp</span> <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Config.Dyre</span> <span class="kw">as</span> <span class="dt">Dyre</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Paths_myapp</span> (getLibDir)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Configuration</span> <span class="ot">=</span> …</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="ot">defaultConfig ::</span> <span class="dt">Configuration</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>defaultConfig <span class="ot">=</span> …</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a><span class="ot">realMain ::</span> <span class="dt">Configuration</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a>realMain <span class="ot">=</span> …</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true"></a>  libdir <span class="ot">&lt;-</span> getLibDir</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true"></a>  <span class="kw">let</span> params <span class="ot">=</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true"></a>        ( Dyre.newParams <span class="st">&quot;myapp&quot;</span> realMain (<span class="fu">const</span> <span class="fu">error</span>) )</span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true"></a>        { Dyre.includeDirs <span class="ot">=</span> [libdir] }</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true"></a>  Dyre.wrapMain params defaultConfig</span></code></pre></div>
<div class="note">
<p>For Cabal store detection to work, the Dyre project name (<code>myapp</code> in the example above), <strong>must</strong> be the same as the library package name. Otherwise <code>getCabalStoreGhcArgs</code> will fail to detect the package ID to expose.</p>
</div>
<p>With this small additional behaviour in place, Dyre detects that the library is in a Cabal store and passes the extra CLI options to GHC. GHC finds the library and compiles the program successfully:</p>
<pre class="shell"><code>% purebred
Configuration &#39;/home/fraser/.config/purebred/purebred.hs&#39; changed.
Recompiling.
Program reconfiguration successful.
Launching custom binary /home/fraser/.cache/purebred/purebred-linux-x86_64
… (realMain executes)</code></pre>
<h2 id="discussion">Discussion <a href="#discussion">§</a></h2>
<p>It is unfortunate that the author of a Dyre application must do extra work to enable it to work with the Cabal store. Even though it is a small effort, it is something most programs will want to do. I have so far been unable to conceive a robust solution that avoids this work.</p>
<p>Dyre pre-0.9 did not have this feature. To enable <a href="https://github.com/purebred-mua/purebred">Purebred</a> to work with the Cabal store, we performed the detection and constructed the extra GHC options ourselves. Then we passed the extra options to Dyre via the <a href="https://hackage.haskell.org/package/dyre-0.9.1/docs/Config-Dyre.html#v:ghcOpts"><code>ghcOpts</code></a> fields of the <code>Params</code> type. This behaviour was ported to Dyre more or less <em>as-is</em> for the 0.9 release. Except for the bit that I forgot to port, which was restored in v0.9.1.</p>
<p>My Purebred co-author reported a regression with Nix support in Dyre 0.9.x. Under Nix, GHC fails to find the application library during custom binary compilation. I suspect the cause is an incidental behavioural change as a result of porting the detection logic from Purebred to Dyre. But I have not yet started a proper investigation.</p>]]></summary>
</entry>
<entry>
    <title>Announcing Dyre 0.9 release candidate</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-02-21-dyre-0.9-rc.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-02-21-dyre-0.9-rc.html</id>
    <published>2021-02-21T00:00:00Z</published>
    <updated>2021-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="announcing-dyre-0.9-release-candidate">Announcing Dyre 0.9 release candidate</h1>
<p><a href="https://hackage.haskell.org/package/dyre">Dyre</a> is a tool for Haskell program configuration by (re)compilation. The last release was 0.8.12, way back in 2014. Since then, the project has been dormant… until now. I am pleased to announce a <a href="https://hackage.haskell.org/package/dyre-0.9.0/candidate">Dyre 0.9 release candidate</a>. In this post I outline what’s changed and put out a call for testing ahead of the official release.</p>
<h2 id="dyre-overview">Dyre overview <a href="#dyre-overview">§</a></h2>
<p>Dyre implements program configuration in the style of <a href="https://xmonad.org/"><em>xmonad</em></a>. Configurations are Haskell programs using native types and functions. When a Dyre-enabled program starts up, it detects whether the configuration has changed. If so, it (re)compiles and caches a custom executable. Then it executes the custom executable and enters the “main program”.</p>
<p>Being able to configure a program using data types that are “native” to the program is both pleasant and powerful. Subtle user configuration errors that may go unnoticed, or lie dormant until they crash your program, instead become type errors. The program author has much less verification to perform compared to a configuration written in text formats such as YAML or JSON.</p>
<p>This post is not intended to be a Dyre tutorial. Refer to the <a href="https://hackage.haskell.org/package/dyre/docs/Config-Dyre.html"><code>Config.Dyre</code></a> module documentation to see what Dyre looks like in practice.</p>
<h2 id="becoming-dyres-maintainer">Becoming Dyre’s maintainer <a href="#becoming-dyres-maintainer">§</a></h2>
<p><a href="http://www.willdonnelly.net/">Will Donnelly</a> is Dyre’s original author and maintainer. Credit and thanks to him for writing a very useful tool and actively maintaining it over several years.</p>
<p>The most recent release of <a href="https://hackage.haskell.org/package/dyre">Dyre on Hackage</a> was 0.8.12 in 2014. There was activity on <a href="https://github.com/willdonnelly/dyre">GitHub</a> after that release, until early 2017. After that, Dyre was dormant.</p>
<p>Meanwhile my major project <a href="https://github.com/purebred-mua/purebred">Purebred</a> uses Dyre for configuration. We encountered some dependency issues and behaviour in Dyre that caused problems with newer versions of GHC. We also noticed some things that could be improved.</p>
<p>I decided to offer to take maintainership of Dyre. I emailed Will Donnelly but did not receive a response. Following the <a href="https://wiki.haskell.org/Taking_over_a_package"><em>Taking over a package</em></a> guide, I emailed the <em>Haskell-cafe</em> mailing list to <a href="https://mail.haskell.org/pipermail/haskell-cafe/2019-April/130923.html">announce my intent</a> to take over the package. This email <em>did</em> get noticed. Will graciously agreed that I should assume maintainership. He added me as a maintainer on Hackage and a collaborator on GitHub.</p>
<p>I put my shiny new commit bit to use and soon pushed several changes to GitHub, before… <em>not</em> cutting a release, then doing nothing for another two years. But now—at last—I am putting the finishing touches on a new release for Dyre. So…</p>
<h2 id="whats-changed-in-version-0.9">What’s changed in version 0.9? <a href="#whats-changed-in-version-0.9">§</a></h2>
<p>Major changes since 0.8.12 include:</p>
<ul>
<li><p><code>realMain</code> can now <strong>return arbitrary types</strong>. To support this change, <code>Params</code> got a new type variable.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- before</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Params</span> cfgType</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ot">wrapMain ::</span> <span class="dt">Params</span> cfgType <span class="ot">-&gt;</span> cfgType <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="co">-- after</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Params</span> cfgType a</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="ot">wrapMain ::</span> <span class="dt">Params</span> cfgType a <span class="ot">-&gt;</span> cfgType <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span></code></pre></div></li>
<li><p><code>defaultParams</code>, which contains <code>undefined</code> fields, has been <strong>deprecated</strong> in favour of the new function <code>newParams</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">-- here be bottoms</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="ot">defaultParams ::</span> <span class="dt">Params</span> cfg a</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">-- celestial music playing</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>newParams</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="ot">  ::</span> <span class="dt">String</span>                 <span class="co">-- ^ &#39;projectName&#39;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> (cfg <span class="ot">-&gt;</span> <span class="dt">IO</span> a)          <span class="co">-- ^ &#39;realMain&#39; function</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> (cfg <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> cfg) <span class="co">-- ^ &#39;showError&#39; function</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Params</span> cfg a</span></code></pre></div>
<p><code>newParams</code> takes values for the three required fields, so program authors can clearly see what they have to do and are less likely to make a mistake.</p></li>
<li><p><strong>Cabal store support</strong>: Users can add extra include dirs via the <code>includeDirs</code> field of <code>Params</code>. The program author just has to put the package’s library directory in the new <code>includeDirs</code> field:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Config.Dyre</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Paths_myapp</span> (getLibDir)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>realMain  <span class="ot">=</span> …</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>showError <span class="ot">=</span> …</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>myapp cfg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>  libdir <span class="ot">&lt;-</span> getLibDir</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>  <span class="kw">let</span> params <span class="ot">=</span> (newParams <span class="st">&quot;myapp&quot;</span> realMain showError)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>        { includeDirs <span class="ot">=</span> [libdir] }</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>  wrapMain params cfg</span></code></pre></div>
<p>If an include dir appears to be in a Cabal store and matches the <code>projectName</code>, Dyre adds the corresponding <code>-package-id</code> option. As a result, recompilation works for programs installed via <code>cabal install</code>.</p></li>
<li><p><strong>Stack support</strong>: if Dyre detects a <code>stack.yaml</code> alongside the custom configuration, it will use Stack to compile the program. Credit to <em>Jaro Reinders</em> for this feature.</p></li>
<li><p>Dyre compiles the custom executable with <strong><code>-threaded</code></strong> when the main executable uses the threaded RTS. This means one less thing for program authors to remember (or forget) to do.</p></li>
<li><p>Dyre now <strong>requires GHC &gt;= 7.10</strong>.</p></li>
<li><p>Improved <strong>documentation</strong>.</p></li>
<li><p>The <strong>test suite</strong> was expanded, and can now be executed via <code>cabal test</code>.</p></li>
<li><p>Dyre <strong>cleans up</strong> better after compilation (successful or unsuccesful), and behaves better when the custom configuration is removed.</p></li>
<li><p>Some versions of GHC write to standard error, even during a successful compilation. Dyre no longer treats this as a compilation failure, instead relying solely on GHC’s exit status.</p></li>
<li><p>Dyre recognises the <strong><code>HC</code> environment variable</strong>. If set, it will compile the program using the specified compiler.</p></li>
<li><p>Fixes for <strong>Windows</strong>, including working with recent versions of the <em>process</em> package.</p></li>
</ul>
<p>Additionally, I set up <strong>continuous integration</strong> for the Dyre codebase. Initially it used Travis-CI but I recently migrated to GitHub Actions. It includes jobs for testing Dyre on MacOS and Windows.</p>
<h2 id="call-for-testing">Call for testing <a href="#call-for-testing">§</a></h2>
<p>I would like testing and feedback on the <a href="https://hackage.haskell.org/package/dyre-0.9.0/candidate">release candidate</a> before I cut the final release of Dyre 0.9. In particular, I would welcome more testing on <strong>Windows</strong>, as well as the <strong>Stack</strong> support. I also need to test with GHC 7.10, which for technical reasons is not covered by the CI matrix.</p>
<p><strong>You can help</strong> by testing Dyre in <em>any</em> environments, but especially those ones. Even if you only run <code>cabal test</code>, or implement the example from the <a href="https://hackage.haskell.org/package/dyre/docs/Config-Dyre.html"><code>Config.Dyre</code></a> module documentation, it will help. Please report testing outcomes in the <a href="https://github.com/willdonnelly/dyre/issues/39">testing checklist</a> issue. Failures <em>and successes</em> should be reported there.</p>
<p>For testing on Windows, you can install the <code>cabal</code> and <code>ghc</code> packages from <a href="https://chocolatey.org/">Chocolatey</a>. To run the <code>cabal test</code> suite you’ll also need a POSIX shell installed as <code>sh.exe</code>. The one provided by the <code>gitsh</code> package worked for me.</p>
<p>I hope to make the final release in a couple of weeks.</p>
<h2 id="future-work">Future work <a href="#future-work">§</a></h2>
<p>One area I have identified for future development is recording file hashes to detect changes. This is important to support the <strong>Nix</strong> packaging system, which sets all files’ creation and modification times to the epoch. It will also help with <strong>downgrades</strong>, where the main executable’s modification time decreases.</p>
<p>This known gap is the reason I didn’t release a new version in the almost two years since I became the maintainer. I kept thinking, <em>“I should really fix that first”</em>. But I still haven’t implemented file hashing, and don’t have immediate plans to. So I decided not to delay any longer the release of the improvements I <em>have</em> made.</p>
<p>If Nix support or other features are particularly important to you, please consider contributing to Dyre. You can create issues and pull requests <a href="https://github.com/willdonnelly/dyre">on GitHub</a>, or reach out to me directly.</p>]]></summary>
</entry>
<entry>
    <title>Haskell is vulnerable to dependency confusion</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-02-12-haskell-dependency-confusion.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-02-12-haskell-dependency-confusion.html</id>
    <published>2021-02-12T00:00:00Z</published>
    <updated>2021-02-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="haskell-is-vulnerable-to-dependency-confusion">Haskell is vulnerable to dependency confusion</h1>
<p>In this post, I demonstrate that critical parts of the Haskell package management system are vulnerable to the <em>dependency confusion</em> supply chain attack. I also discuss some potential approaches for Haskell tooling to mitigate this type of attack.</p>
<h2 id="introduction">Introduction <a href="#introduction">§</a></h2>
<p>A recent post, <a href="https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610"><em>Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies</em></a> by Alex Birsan, caused quite a stir. It describes an attack where the attacker uploads malicious packages with the same name as target organisations’ <em>internal</em> packages. If the version on the public repository is higher, most tools will prefer it. The malicious package compromises the developer’s machine, or the machines that run the program the developer builds, or the users who interact with that program over the network. Maybe all three.</p>
<p>The author successfully executed the dependency confusion attacks using <code>npm</code> (NodeJS), PyPI/<code>pip</code> (Python) and RubyGems/<code>gem</code> (Ruby). In the conclusion, he raises the spectre of other languages and package repositories being likewise vulnerable:</p>
<blockquote>
<p>Specifically, I believe that finding new and clever ways to leak internal package names will expose even more vulnerable systems, and looking into alternate programming languages and repositories to target will reveal some additional attack surface for dependency confusion bugs.</p>
</blockquote>
<p>So, is the Haskell ecosystem vulnerable to this attack? I assume you read the post title or abstract and therefore know that the answer to that question is <em>yes!</em> In the following sections I demonstrate the attack and discuss possible mitigations.</p>
<h2 id="terminology">Terminology <a href="#terminology">§</a></h2>
<ul>
<li><p><strong><em>hackage-server</em></strong>: the server program for running a Haskell package repository.</p></li>
<li><p><strong><em>Hackage</em></strong>: in isolation, refers to the Haskell community’s central package repository. It runs <em>hackage-server</em> and is located at <a href="https://hackage.haskell.org/"><strong><code>hackage.haskell.org</code></strong></a>.</p></li>
<li><p><strong><em>Cabal</em></strong>: the name of the Haskell package description format, and a library for working with such packages.</p></li>
<li><p><strong><em>cabal-install</em></strong>: the command line program for building and installing <em>Cabal</em> packages. The executable name is <strong><code>cabal</code></strong>. <em>cabal-install</em> uses the <em>Cabal</em> library and interacts with <em>hackage-server</em> servers (most commonly <code>hackage.haskell.org</code>).</p></li>
<li><p><strong><em>Private Hackage</em></strong>: a <em>hackage-server</em> instance operated for the purpose of hosting private or internal packages.</p></li>
</ul>
<h2 id="preparation">Preparation <a href="#preparation">§</a></h2>
<h3 id="private-hackage-repository">Private Hackage repository <a href="#private-hackage-repository">§</a></h3>
<p>For reasons unrelated to this investigation, I already had a local instance of <em>hackage-server</em>, running on <code>localhost:8080</code>. In this exercise, it plays the role of the private Hackage repository.</p>
<h3 id="subject-dependency">Subject dependency <a href="#subject-dependency">§</a></h3>
<p>I created a new “internal package” to be the subject of the attack. I chose a silly name suggested by GitHub: <em>redesigned-carnival</em>. Hopefully it will not conflict with anyone’s legitimate needs. While the <a href="https://github.com/frasertweedale/redesigned-carnival">source code</a> is available on GitHub, there’s no need to look at it. The package is trivial, containing a single module whose content is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">ACME.RedesignedCarnival</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>hello <span class="ot">=</span> <span class="st">&quot;Hello, world!&quot;</span></span></code></pre></div>
<p>I uploaded <code>redesigned-carnival-0.1.0.0</code> to the private Hackage repository.</p>
<h3 id="cabal-install-configuration"><em>cabal-install</em> configuration <a href="#cabal-install-configuration">§</a></h3>
<p>The <em>cabal-install</em> configuration lives at <code>~/.cabal/config</code>. By default it contains a single <code>repository</code> clause, pointing at Hackage:</p>
<pre><code>repository hackage.haskell.org
  url: http://hackage.haskell.org/</code></pre>
<p>I added a second <code>repository</code> clause, pointing at my local Hackage server:</p>
<pre><code>repository localhost
  url: http://localhost:8080/</code></pre>
<p>With the <code>repository</code> configured, I proceeded to update the local package index via <code>cabal update</code>.</p>
<div class="note">
<p>Due to a bug in the <a href="https://hackage.haskell.org/package/HTTP"><em>HTTP</em></a> package, updating the index fails when the repository URL specifies a port. The workaround is to tell <em>cabal-install</em> to use a different HTTP transport. Set the <code>http-transport</code> option in <code>~/.cabal/config</code>:</p>
<pre><code>-- valid values: curl, wget, powershell
http-transport: curl</code></pre>
<p>I submitted a <a href="https://github.com/haskell/HTTP/pull/133">pull request</a> to fix this issue.</p>
</div>
<pre class="shell"><code>% cabal update
Downloading the latest package lists from:
- localhost
- hackage.haskell.org
To revert to previous state run:
    cabal v2-update &#39;hackage.haskell.org,2021-02-08T02:13:51Z&#39;</code></pre>
<p>We can see that the <code>localhost</code> index was retrieved. <em>cabal-install</em> is now aware of packages in my private Hackage server:</p>
<pre class="shell"><code>% cabal list redesigned-carnival
* redesigned-carnival
    Synopsis: Package for dependency confusion
    Default available version: 0.1.0.0
    Installed versions: [ Not installed ]
    License:  PublicDomain</code></pre>
<h3 id="vulnerable-dependent-package">Vulnerable dependent package <a href="#vulnerable-dependent-package">§</a></h3>
<p>I wrote a tiny package called <em>super-fiesta</em> (cheerful suggestion thanks to GitHub, again). It depends on <em>redesigned-carnival</em>, and prints the value of <code>hello</code>. The <a href="https://github.com/frasertweedale/super-fiesta">source code</a> is on GitHub. Here is the whole program (<code>Main.hs</code>):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">ACME.RedesignedCarnival</span> (hello)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> hello</span></code></pre></div>
<p>With <em>cabal-install</em> now aware of <em>redesigned-carnival</em>, I can build and run this program:</p>
<pre class="shell"><code>% cd ~/dev/hs/super-fiesta
% cabal run
Resolving dependencies...
Downloading  redesigned-carnival-0.1.0.0
Downloaded   redesigned-carnival-0.1.0.0
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - redesigned-carnival-0.1.0.0 (lib) (requires build)
 - super-fiesta-0.1.0.0 (exe:super-fiesta) (first run)
Starting     redesigned-carnival-0.1.0.0 (lib)
Building     redesigned-carnival-0.1.0.0 (lib)
Installing   redesigned-carnival-0.1.0.0 (lib)
Completed    redesigned-carnival-0.1.0.0 (lib)
Configuring executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Preprocessing executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Building executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
[1 of 1] Compiling Main             ( Main.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta-tmp/Main.o )
Linking /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta ...
Hello, world!</code></pre>
<h3 id="determining-internal-package-names">Determining internal package names <a href="#determining-internal-package-names">§</a></h3>
<p>The attack requires knowing, or guessing, internal package names. Approaches that apply to Haskell code include:</p>
<ul>
<li><p>Search for mentions of internal libraries in public code, blog posts, presentations, and so on.</p></li>
<li><p>Scan non-stripped binaries delivered by the target organisation.</p></li>
<li><p>If there is an organisation-specific package naming convention, make some educated guesses.</p></li>
<li><p>Use any other kind of exploit (including social engineering) to discover internal package names.</p></li>
</ul>
<p>I will assume that the hypothetical attacker has learned, somehow, that I have an internal package named <em>redesigned-carnival</em>, and will attempt to use dependency confusion to attack me. This is an appropriate assumption.</p>
<h2 id="attack">Attack <a href="#attack">§</a></h2>
<p>I bumped the version of <em>redesigned-carnival</em> to <code>1.0.0.0</code>, and <a href="https://hackage.haskell.org/package/redesigned-carnival">uploaded it to Hackage</a>. A real-world attacker might upload <em>many</em> different versions, in the hope of matching a range of possible constraints.</p>
<p>The version uploaded to Hackage does not contain any malicious behaviour. But I changed the <code>hello</code> string to <code>"Mwahaha"</code>. If we see this sinister-looking string, we’ll know the attack succeeded.</p>
<p>After another <code>cabal update</code>, <em>cabal-install</em> is aware of the new version of <em>redesigned-carnival</em>:</p>
<pre class="shell"><code>% cabal list redesigned-carnival
* redesigned-carnival
    Synopsis: Package for dependency confusion
    Default available version: 1.0.0.0
    Installed versions: [ Not installed ]
    License:  PublicDomain</code></pre>
<p>The <em>Default available version</em> line shows that, by default, <em>cabal-install</em> will prefer the highest version of package. To confirm that it was not merely the <em>most recently uploaded</em> version of a package, I created version <code>0.2.0.0</code>, uploaded it to my <em>private</em> Hackage server, and ran <code>cabal update</code>. <code>cabal list</code> still showed version <code>1.0.0.0</code> as the default version.</p>
<p>This is what <em>cabal-install</em> did the next time I built (and ran) <em>super-fiesta</em>:</p>
<pre class="shell"><code>% cabal run
Resolving dependencies...
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - redesigned-carnival-1.0.0.0 (lib) (requires build)
 - super-fiesta-0.1.0.0 (exe:super-fiesta) (configuration changed)
Starting     redesigned-carnival-1.0.0.0 (lib)
Building     redesigned-carnival-1.0.0.0 (lib)
Installing   redesigned-carnival-1.0.0.0 (lib)
Completed    redesigned-carnival-1.0.0.0 (lib)
Configuring executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Preprocessing executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Building executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
[1 of 1] Compiling Main             ( Main.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta-tmp/Main.o ) [ACME.RedesignedCarnival changed]
Linking /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta ...
Mwahaha</code></pre>
<p>Owned. <em>cabal-install</em> saw that there was a new version of <em>redesigned-carnival</em> compatible with the constraints (because there are no constraints). So it downloaded, built, installed and linked to the “malicious” version from Hackage.</p>
<p>The order the repositories appear in <code>~/.cabal/config</code> does not affect the result. My testing shows that <em>cabal-install</em> prefers the highest version, regardless of which repository it comes from. I have seen comments that repositories listed later are preferred over earlier ones, but maybe that only applies when the same version is hosted on both repositories.</p>
<h2 id="mitigations">Mitigations <a href="#mitigations">§</a></h2>
<p>Alternative workflows and tools can mitigate the risk of dependency confusion attacks. I discuss some current approaches below, and also some ideas for future tooling enhancements.</p>
<h3 id="local-packages-effective">Local packages (effective) <a href="#local-packages-effective">§</a></h3>
<p>Instead of using a private Hackage server, you can specify local packages in <code>cabal.project</code> or <code>cabal.project.local</code>:</p>
<pre class="shell"><code>% echo &quot;packages: ., ../redesigned-carnival&quot; &gt; cabal.project.local
% cabal run exe:super-fiesta
Resolving dependencies...
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - redesigned-carnival-0.1.0.0 (lib) (first run)
 - super-fiesta-0.1.0.0 (exe:super-fiesta) (configuration changed)
Configuring library for redesigned-carnival-0.1.0.0..
Preprocessing library for redesigned-carnival-0.1.0.0..
Building library for redesigned-carnival-0.1.0.0..
[1 of 1] Compiling ACME.RedesignedCarnival ( src/ACME/RedesignedCarnival.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/redesigned-carnival-0.1.0.0/build/ACME/RedesignedCarnival.o )
Configuring executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Preprocessing executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Building executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
[1 of 1] Compiling Main             ( Main.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta-tmp/Main.o ) [ACME.RedesignedCarnival changed]
Linking /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta ...
Hello, world!</code></pre>
<p>Local packages are always preferred over versions in repositories, even when a repository offers a higher version. You can use manual cloning, Git submodules or a monorepo to get the internal package sources in the right place.</p>
<p>A minor downside to this approach is that you have to be more explicit about which package you want to build, run or install. In the transcript above, I executed <code>cabal run exe:super-fiesta</code>. If I omit the final argument, <em>cabal-install</em> complains:</p>
<pre class="shell"><code>% cabal run
Resolving dependencies...
TODO: add support for multiple packages in a directory
CallStack (from HasCallStack):
  error, called at ./Distribution/Client/ProjectOrchestration.hs:542:9 in main:Distribution.Client.ProjectOrchestration
</code></pre>
<h3 id="cabal-freeze-effective-with-caveats"><code>cabal freeze</code> (effective, with caveats) <a href="#cabal-freeze-effective-with-caveats">§</a></h3>
<p>Dependency version pinning via <code>cabal freeze</code> is not an effective mitigation <em>in general</em>. To demonstrate, I uploaded <code>redesigned-carnival-0.3.0.0</code> to my private Hackage, and the same version (with “malicious” modification) to <code>hackage.haskell.org</code>. I executed <code>cabal freeze</code> and modified the <code>cabal.project.freeze</code> file to require <code>redesigned-carnival-0.3.0.0</code>:</p>
<pre class="shell"><code>% cat cabal.project.freeze
constraints: any.base ==4.13.0.0,
             any.ghc-prim ==0.5.3,
             any.integer-gmp ==1.0.2.0,
             any.redesigned-carnival ==0.3.0.0,
             any.rts ==1.0</code></pre>
<p>Then I executed <code>cabal run</code>. With both repositories offering the “same” version, <em>cabal-install</em> retrieves the package from the <em>last defined</em> repository. If that is <code>hackage.haskell.org</code>, then you will download and build the malicious variant.</p>
<p>So in the presence of public and private Hackage repositories, the security of dependency freezing depends on the repository order. Unfortunately the official <em>cabal-install</em> <a href="https://cabal.readthedocs.io/en/3.2/installing-packages.html#repository-specification">documentation</a> fails to mention the significance of repository order:</p>
<blockquote>
<p>If you want, you can configure multiple repositories, and cabal will combine them and be able to download packages from any of them.</p>
</blockquote>
<p>The vagueness of the documentation means insecure configurations are likely. If you work in a Haskell team inside a company, <em>everyone</em> needs to get this configuration right.</p>
<h3 id="use-nix-effective">Use Nix (effective) <a href="#use-nix-effective">§</a></h3>
<p><a href="https://nixos.org/">Nix</a> is a content-address package management system where all packages pin all dependencies by their cryptographic hashes. Many Haskell developers and teams use it, and enjoy certainty about their dependencies and reproducible builds.</p>
<p>Nix has a steep learning curve, and it is not a complete solution for library and program authors who want to publish to Hackage. <em>“Use Nix”</em> is a valid way to mitigate dependency confusion risk for Haskell teams and some individuals.</p>
<h3 id="use-stack-effective">Use Stack (effective?) <a href="#use-stack-effective">§</a></h3>
<p>According to the results of annual Haskell developer surveys (<a href="https://taylor.fausak.me/2020/11/22/haskell-survey-results/#s3q0">2020</a>, <a href="https://taylor.fausak.me/2019/11/16/haskell-survey-results/#s3q0">2019</a>, <a href="https://taylor.fausak.me/2018/11/18/2018-state-of-haskell-survey-results/#question-041">2018</a>, <a href="https://taylor.fausak.me/2017/11/15/2017-state-of-haskell-survey-results/#question-22">2017</a>), around 75% of Haskell developers use the <a href="https://haskellstack.org/">Stack</a> build tool. Stack, by default, uses curated package sets from <a href="https://www.stackage.org/">Stackage</a>. For internal packages it allows pinning to exact Git commit hashes, and local packages.</p>
<p>On the face of it, it would seem that Stack, in a standard configuration, protects against dependency confusion attacks. I don’t use Stack and I haven’t tested it as part of this investigation. I’ll give it the benefit of the doubt and hope that others might put it to the test and publish their findings.</p>
<p>Even if Stack mitigates dependency confusion perfectly, according to the same surveys above, around 50% of Haskell developers use <em>cabal-install</em> (either exclusively or alongside other build tools). As was the case with Nix, Stack may be a solution for particular teams or individuals, but it is not a solution for the whole community.</p>
<h3 id="exclusive-repositories-idea-effective-with-caveats">“Exclusive” repositories (<del>idea</del> effective, with caveats) <a href="#exclusive-repositories-idea-effective-with-caveats">§</a></h3>
<p>If you could mark a repository as “exclusive”, then for any package provided by that repository, <em>cabal-install</em> <strong>must</strong> only use a version provided by that repository. The idea is that private repositories would be marked as exclusive:</p>
<pre><code>repository localhost
  url: http://localhost:8080/
  exclusive: True

repository hackage.haskell.org
  url: http://hackage.haskell.org/</code></pre>
<p>Now, a dependency confusion attack against <em>redesigned-carnival</em> would not work. <em>cabal-install</em> will ignore versions of the package from <code>hackage.haskell.org</code>, because that package name is also provided by an exclusive repository.</p>
<p>This approach is easy for users to configure. But, as with the <code>cabal freeze</code> approach, security for organisations requires every developer to set the configuration properly.</p>
<p>and requires no changes to the <em>hackage-server</em> program or the <em>Cabal</em> package description format. The changes are limited to <em>cabal-install</em>.</p>
<p>One drawback is that if a person or organisation wants to publicly release a previously internal package, they will have to remove it from their private repository. As far as I can tell, <em>hackage-server</em> does not support package deletion. So this approach might entail changes to <em>hackage-server</em> after all.</p>
<h4 id="update-coming-in-cabal-install-3.4"><em>Update</em>: coming in <em>cabal-install</em> 3.4 <a href="#update-coming-in-cabal-install-3.4">§</a></h4>
<p>Oleg Grenrus <a href="https://www.reddit.com/r/haskell/comments/lhmbw3/haskell_is_vulnerable_to_dependency_confusion/gmz6qi0/">pointed out</a> a new feature arriving in <code>cabal-install-3.4</code>. The <code>active-repositories</code> field and <code>override</code> merge strategy can accomplish the goal of restricting packages to a particular repository:</p>
<pre><code>-- Order is significant.  For packages in localhost,
-- only versions in localhost are considered
active-repositories:
  , hackage.haskell.org
  , localhost:override</code></pre>
<p>See also the <a href="https://cabal.readthedocs.io/en/3.4/cabal-project.html?highlight=active-repositories#cfg-field-active-repositories">official documentation</a>. I have tested the feature, and it works. At time of writing the pre-release version is <code>3.4.0.0-rc7</code> so the final release should not be far away.</p>
<h3 id="repository-scoped-dependencies-idea">Repository-scoped dependencies (idea) <a href="#repository-scoped-dependencies-idea">§</a></h3>
<p>Dependencies in <code>.cabal</code> files have no scoping or namespacing. What if you could scope a dependency to a particular repository? For example:</p>
<pre class="cabal"><code>executable super-fiesta
  main-is: Main.hs
  build-depends:
    base &gt;=4 &amp;&amp; &lt;5
    , &lt;repository&gt;:redesigned-carnival
  default-language:    Haskell2010</code></pre>
<p>You could optionally constrain particular dependencies to come from a specified repository. This would be a more invasive change, involving a change to the package description format. <em>Cabal</em> (the library) and <em>cabal-install</em> would be impacted.</p>
<p>To thwart attacks where people get confused or tricked into using the wrong repository, everyone would need to agree on the names of repositories (which are currently configured in <code>~/.cabal/config</code>). In other words, every agent would need to agree on what <code>&lt;repository&gt;</code> means. This could be accomplished by identifying repositories by URI, but there could be other valid approaches.</p>
<h3 id="validated-namespaces-for-packages-idea">Validated namespaces for packages (idea) <a href="#validated-namespaces-for-packages-idea">§</a></h3>
<p>Another possible approach is that taken by the Java <a href="https://en.wikipedia.org/wiki/Apache_Maven"><em>Maven</em></a> system. Packages are addressed by <code>&lt;Group ID&gt;:&lt;Artifact ID&gt;:&lt;Version&gt;</code>, where <code>group-id</code> is based on a DNS name. In order to publish a new artifact to the <a href="https://search.maven.org/"><em>Maven Central</em></a> public repository, the prospective publisher has to prove “control” of the Group ID. Most often this is done by publishing a particular DNS TXT record in the domain from which the Group ID is derived. But some Group IDs follow other validation rules (e.g. commit access for <code>org.github.*</code>. Brian Fox’s blog post <a href="https://blog.sonatype.com/why-namespacing-matters-in-public-open-source-repositories"><em>Why Namespacing Matters in Public Open Source Repositories</em></a> explains it well, and in more detail.</p>
<p>Summary: if packages in public repositories are namespaced by <em>something</em>, and if that <em>something</em> can be validated by the repository before publishing, then the system is resistant to dependency confusion attacks (up to spoofing the validation mechanism). DNS-based namespaces strike a fair balance between verifiability and usability (for both publishers and users).</p>
<p>So, what would this look like in the Haskell world? Retrofitting our package ecosystem with namespaces would be a <em>very</em> disruptive change. All tooling would be affected. In particular, <em>hackage-server</em> would need to learn how to validate package namespaces.</p>
<p>No doubt many people will be annoyed that they must now write <code>haskell.org:base</code> (instead of just <code>base</code>), <code>frase.id.au:redesigned-carnival</code>, and so on. (By the way, those namespace values are just a suggestion of a possible scheme).</p>
<p>Migrating existing packages poses several challenges. Sure, put core libraries in the <code>haskell.org</code> (or whatever) namespace. But where should <em>lens</em> live? Who decides? What if there is disagreement? And what happens to packages that don’t have responsive maintainers?</p>
<p>I think that with careful planning a smooth transition is possible. To give people time to adjust, packages could for some period remain accessible via namespaced and non-namespaced names. Duplicate names in different namespaces would be forbidden during the transition period. We can build tools to update <code>.cabal</code> files with the namespaces, removing most of the pain for maintainers.</p>
<p>After the transition period ends, all the Haskell tooling will use namespaced packages. Importantly, users and developers do not need to configure anything to be safe from dependency confusion attacks. Only publishers will face some additional validation steps.</p>
<p>Apart from security I see another possible benefit to this approach. Organisation-namespaced packages could give more visibility into which organisations are using Haskell. This could promote the perception of Haskell as a language of industry. <em>“Look, we are like Java”</em> is a legitimate selling point for many people.</p>
<h2 id="other-attacks">Other attacks <a href="#other-attacks">§</a></h2>
<p>Dependency confusion is just one kind of software supply chain attack. The approaches I discussed mitigate this specific attack. But they do not protect against other attacks, such as an attacker acquiring Ed Kmett’s Hackage credentials and uploading a malicous new release of <em>lens</em>. Or the maintainer themselves turning evil. Different protections are needed for other kinds of attacks.</p>
<p>Also, dependency confusion on its own is just a vector for malware. Does the malware target the developer’s machine, or the machines that run the program the developer is building, or network clients? All of the above? The range of possible attacks depends on the language, development environment and deployment environment. The different ways in which a Haskell dependency confusion victim could actually be exploited is a topic for a whole other blog post.</p>
<p>These are all important topics to consider in the design of languages, build tooling and package management systems. In additional to known supply chain attacks, human factors (social engineering) should not be ignored either.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>In this post I demonstrated that the standard Haskell development tooling—Hackage and Cabal/<em>cabal-install</em>—is vulnerable to dependency confusion attacks. I discussed some mitigations that are feasible today, and some ideas for tool improvements that vary in complexity and usability. Finally I emphasised that dependency confusion is one of several types of supply chain attack, and just one small panel in the tapestry of software security.</p>
<p>I think that Haskell has long, <em>long</em> way to go in terms of security. Sure, the language itself is mostly pretty good. But the compiler, build tools, and package repositories all fall far short when it comes to security. I will have more to say about this in future blog posts.</p>
<p>In the meantime, I hope this post kick-starts a discussion about how we should address the particular threat of dependency confusion.</p>]]></summary>
</entry>
<entry>
    <title>Prototyping a plugin system for Purebred</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-02-02-plugin-system-prototype.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-02-02-plugin-system-prototype.html</id>
    <published>2021-02-02T00:00:00Z</published>
    <updated>2021-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="prototyping-a-plugin-system-for-purebred">Prototyping a plugin system for Purebred</h1>
<p>In this post I present an experimental design for a plugin system, where plugins’ capabilities are expressed in their types. The types are user-visible and human-friendly. This is achieved without sacrificing composability—plugins with different capabilities can be composed together.</p>
<h2 id="introduction">Introduction <a href="#introduction">§</a></h2>
<p>I’m working on a plugin system for <a href="https://github.com/purebred-mua/purebred">Purebred</a>, a mail user agent program. The goal of every plugin system is to enable smooth integration (composition) of components from various packages into the main program, providing additional or alternative behaviour.</p>
<p>My secondary goal for <em>this</em> plugin system is to express as much information as possible about plugin behaviour <em>through types</em>. A plugin that purports to perform a pure computation (e.g. adding a <code>User-Agent</code> header to outgoing mail) should not be allowed to launch the missiles! Its type should express this constraint. Doing so communicates important information to the compiler (which enforces the constraints), and to humans (who will ask questions like, <em>“How safe is this plugin?”</em>)</p>
<p>Haskell provides for substantial and satisfying progress toward this objective, without compromising the primary goal of composition. After experimenting with several different approaches I arrived at the design that I am presenting here in this post. I will begin with a description of the <a href="#test-bed-program">test-bed program</a>, then outline my <a href="#plugin-system-requirements">requirements</a> for a plugin system. Then I describe the <a href="#solution">solution</a>, and conclude with a <a href="#discussion">discussion</a> of design tradeoffs and considerations for implementing this design in Purebred.</p>
<h2 id="test-bed-program">Test-bed program <a href="#test-bed-program">§</a></h2>
<p>I wrote a small, simple program to serve as the test-bed for plugin system experimentation. This program reads a <code>Bool</code> and an <code>Int</code> from user input, negates the number if the <code>Bool</code> is <code>True</code>, and prints the result.</p>
<p><code>Main.hs</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">System.IO</span> (hFlush, stdout)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="co">-- read start values</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  doNegate <span class="ot">&lt;-</span> prompt <span class="st">&quot;negate number? [True|False]&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  i <span class="ot">&lt;-</span> prompt <span class="st">&quot;number (Int)&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  (j, doNegate&#39;) <span class="ot">&lt;-</span> <span class="fu">flip</span> runStateT doNegate <span class="op">$</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>    <span class="fu">pure</span> i  <span class="co">-- TODO run plugins</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  <span class="co">-- print result</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  <span class="kw">let</span> r <span class="ot">=</span> <span class="kw">if</span> doNegate&#39; <span class="kw">then</span> <span class="fu">negate</span> j <span class="kw">else</span> j</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  <span class="fu">putStr</span> <span class="st">&quot;result: &quot;</span> <span class="op">*&gt;</span> <span class="fu">print</span> r</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>  prompt s <span class="ot">=</span> <span class="fu">putStr</span> (s <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span>) <span class="op">*&gt;</span> hFlush stdout <span class="op">*&gt;</span> <span class="fu">readLn</span></span></code></pre></div>
<p>Running the program, telling it to negate the input and giving it the value <code>10</code>, gives the following transcript:</p>
<pre><code>ftweedal% ./Main
negate number? [True|False]: True
number (Int): 10
result: -10</code></pre>
<p>I put a <code>TODO</code> where I want to execute plugin behaviour, in a <code>StateT Bool IO Int</code> computation. Plugins should be able to manipulate the <code>Int</code> <em>result</em> value, and/or read or modify the <code>Bool</code> <em>state</em> value, and/or perform I/O.</p>
<h2 id="plugin-system-requirements">Plugin system requirements <a href="#plugin-system-requirements">§</a></h2>
<p>The requirements for my plugin system are:</p>
<ul>
<li><p><strong>Composition</strong>: Plugins from different modules or packages must be able to be used together in the main program.</p></li>
<li><p><strong>Capabilities</strong>: Plugins modules must express required capabilities in their exported type(s). That is, the capabilities are visible to users, without reading source code.</p></li>
<li><p><strong>Human-friendly</strong>: The plugin system must be comprehensible to end-users, who are not necessarily programmers.</p></li>
<li><p><strong>Configuration</strong>: Some plugins will need user-specified configuration. Static configuration (i.e. no change after program initialisation) is acceptable.</p></li>
<li><p><strong>Abstract</strong>: Plugin behaviour types must not mention the type of the main program’s monad transformer stack. This allows the main program’s implementation to evolve without breaking the plugin API.</p></li>
</ul>
<h3 id="not-in-scope">Not in scope <a href="#not-in-scope">§</a></h3>
<p>There are some other points in the plugin system design space that I am not trying to solve:</p>
<ul>
<li><p><strong>Plugin loading</strong>: How does the program find and load plugins? In my experimental design, the plugins will be statically compiled into the program. This approach will also work for Purebred, because we use <a href="https://hackage.haskell.org/package/dyre"><em>Dyre</em></a> for configuration by recompilation (in the style of <a href="https://xmonad.org/"><em>xmonad</em></a>). Dynamic loading/unloading/reloading of plugins is an interesting topic, but I’m not trying to solve it here. The <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.128.6930&amp;rep=rep1&amp;type=pdf"><em>Plugging Haskell In</em></a> paper (Chakravarty <em>et al</em>) and <a href="https://hackage.haskell.org/package/plugins"><em>plugins</em> library</a> present one solution to the problem.</p></li>
<li><p><strong>Plugin state</strong>: What if a plugin needs to store/retrieve data <em>related to itself</em> in the program state? Plugins have no control over the state data type of the main program. I don’t see a need for this in Purebred (yet), so I’m not going to tackle this problem. But if I were, I would look at <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Dynamic.html"><code>Data.Dynamic</code></a> and <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-IORef.html"><code>Data.IORef</code></a> as possible starting points.</p></li>
<li><p><strong>Plugin “idempotency”</strong>: If you enable the PGP plugin twice, will it sign/encrypt the outgoing message twice? In the Purebred approach to configuration this sort of mistake is unlikely, so I’m going to ignore this problem.</p></li>
</ul>
<h2 id="solution">Solution <a href="#solution">§</a></h2>
<p>In this section I describe the implementation of the prototype plugin system. The code is also available in a <a href="https://github.com/frasertweedale/hs-plugin-system-prototype">Git repository</a>, under the <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a> license. You can clone, review, compile, test and experiment with the code yourself.</p>
<h3 id="language-extensions">Language extensions <a href="#language-extensions">§</a></h3>
<p>I define the plugin types and helpers in <code>Plugin.hs</code>. Some language extensions are required:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE RankNTypes #-}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ConstraintKinds #-}</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="ot">{-# LANGUAGE FlexibleContexts #-}</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="ot">{-# LANGUAGE UndecidableInstances #-}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="ot">{-# LANGUAGE QuantifiedConstraints #-}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin</span> <span class="kw">where</span></span></code></pre></div>
<p>These extensions are uncontroversial. Only <code>UndecidableInstances</code> is a bit iffy, but it’s safe to use here. I shall indicate the declarations that require these extensions as we encounter them.</p>
<p><code>Main.hs</code> and the modules defining the plugins themselves do not require any language extensions.</p>
<h3 id="the-plugin-type">The <code>Plugin</code> type <a href="#the-plugin-type">§</a></h3>
<p>The test-bed program will execute plugins in the <code>StateT Bool IO</code> monad transformer stack. Each plugin takes an <code>Int</code> input and returns a (possibly modified) <code>Int</code>. The concrete type is of such a function is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Plugin</span> <span class="ot">=</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">StateT</span> <span class="dt">Bool</span> <span class="dt">IO</span> <span class="dt">Int</span></span></code></pre></div>
<p>One of the requirements is that the plugin function type must be abstract, so that the main program’s monad transformer stack can evolve if needed. We also know that different plugins will have different constraints, and that we want to express the constraints in the type. So let’s parameterise the function type over the constraint:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span></code></pre></div>
<p>That declaration requires the <code>RankNTypes</code> and <code>ConstraintKinds</code> language extensions. To understand <code>ConstraintKinds</code>, let’s look at the <em>kind</em> of <code>Plugin</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>k <span class="dt">Plugin</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="dt">Plugin</span><span class="ot"> ::</span> ((<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span>) <span class="ot">-&gt;</span> <span class="dt">Type</span></span></code></pre></div>
<p><code>Constraint</code> is the kind of constraints (things that go before <code>=&gt;</code> in a type declaration). The <code>Plugin</code> type constructor has a single argument of kind <code>(Type -&gt; Type) -&gt; Constraint</code>. Here are some things that have that kind:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="dt">Applicative</span><span class="ot">     ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="dt">MonadIO</span><span class="ot">         ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="dt">MonadState</span> <span class="dt">Bool</span><span class="ot"> ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span></code></pre></div>
<p>So we can, for example, apply <code>Plugin</code> to <code>MonadState Bool</code>, to construct the <code>Type</code> of a plugin that can read and write the program state:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="dt">Plugin</span> (<span class="dt">MonadState</span> <span class="dt">Bool</span>)<span class="ot"> ::</span> <span class="dt">Type</span></span></code></pre></div>
<p>Defining plugins this way has satisfied the <strong>capabilities</strong> and <strong>abstract</strong> requirements. The capabilities (✓) are visible in the type as abstract type class (✓) constraints.</p>
<p>In a real world scenario, there might be multiple parts of the main program to hook into. It is also useful to give a plugin a name, so that the program can express which plugins are in use, report errors, and so on. So I turned <code>Plugin</code> into a data type with a name field:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="dt">Plugin</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>  {<span class="ot"> pluginName ::</span> <span class="dt">String</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>  ,<span class="ot"> pluginHook ::</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p>For applications with many hooks, it would be nice to wrap the hook fields in <code>Maybe</code> (so the plugin doesn’t have to implement them all). Alternatively, I could provide a helper function that initialises the hooks to “no-op” functions. Plugins would override the hooks they use. For this experiment there is only one hook, so I’ve skipped this for now.</p>
<h3 id="capabilities">Capabilities <a href="#capabilities">§</a></h3>
<p>The plugin system could be used by non-programmers; the types have to make sense to them. What is a <code>Plugin Applicative</code>? What is a <code>Plugin (MonadState Bool)</code>?! I defined type synonyms for the various constraints, to (hopefully) make the plugin system more comprehensible to humans—programmer and non-programmer alike:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Pure</span> <span class="ot">=</span> <span class="dt">Applicative</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">CanIO</span> <span class="ot">=</span> <span class="dt">MonadIO</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">CanRWState</span> <span class="ot">=</span> <span class="dt">MonadState</span> <span class="dt">Bool</span></span></code></pre></div>
<p>Now we can say <code>Plugin Pure</code>, or <code>Plugin CanRWState</code>. This addresses the <strong>human-friendly</strong> requirement (in part, at least).</p>
<p>What if a plugin needs to use multiple capabilities? I first approached this by defining a type synonym:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Unconstrained</span> m <span class="ot">=</span> (<span class="dt">CanIO</span> m, <span class="dt">CanRWState</span> m)</span></code></pre></div>
<p>Observe that <code>Unconstrained</code> has the required kind:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>k <span class="dt">Unconstrained</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="dt">Unconstrained</span><span class="ot"> ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span></code></pre></div>
<p>Unfortunately, we cannot use <code>Unconstrained</code> as an argument to <code>Plugin</code>, because type synonyms cannot be partially applied:</p>
<pre><code>λ&gt; :k Plugin Unconstrained

&lt;interactive&gt;:1:1: error:
    The type synonym ‘Unconstrained’ should have 1 argument,
    but has been given none</code></pre>
<p>The <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0242-unsaturated-type-families.rst"><em>Unsaturated Type Families</em></a> proposal, when it lands, will hopefully lift this restriction. Until then, the same effect can be achieved with a type class and corresponding instance. The <code>FlexibleContexts</code>, <code>FlexibleInstances</code> and <code>UndecidableInstances</code> extensions are required for these declarations:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">class</span> (<span class="dt">CanRWState</span> m, <span class="dt">CanIO</span> m) <span class="ot">=&gt;</span> <span class="dt">Unconstrained</span> m <span class="kw">where</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>  <span class="co">-- empty</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">CanRWState</span> m, <span class="dt">CanIO</span> m) <span class="ot">=&gt;</span> <span class="dt">Unconstrained</span> m <span class="kw">where</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>  <span class="co">-- empty</span></span></code></pre></div>
<p>These definitions give an instance for <code>Unconstrained</code> to any type that already has instances for all the constituent capabilities. It was not necessary to mention <code>Pure</code>/<code>Applicative</code> because it is a superclass of the other constraints.</p>
<h3 id="implementing-plugins">Implementing plugins <a href="#implementing-plugins">§</a></h3>
<p>Now that I have defined the plugin type and capabilities, let’s implement some plugins.</p>
<h4 id="plugin.double"><code>Plugin.Double</code> <a href="#plugin.double">§</a></h4>
<p><code>Plugin/Double.hs</code> defines a “pure” plugin that doubles the <code>Int</code> value:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.Double</span> <span class="kw">where</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> <span class="dt">Pure</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;Double&quot;</span> <span class="op">$</span> <span class="fu">pure</span> <span class="op">.</span> (<span class="op">*</span><span class="dv">2</span>)</span></code></pre></div>
<h4 id="plugin.offset"><code>Plugin.Offset</code> <a href="#plugin.offset">§</a></h4>
<p><code>Plugin/Offset.hs</code> defines a “pure” plugin that adds a fixed offset to the <code>Int</code> value. The offset is configurable: applying <code>mkPlugin</code> to the configuration yields the plugin value. This satisfies our <strong>configuration</strong> requirement.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.Offset</span> <span class="kw">where</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a><span class="ot">mkPlugin ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Plugin</span> <span class="dt">Pure</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>mkPlugin offset <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;Offset&quot;</span> <span class="op">$</span> <span class="fu">pure</span> <span class="op">.</span> (<span class="op">+</span> offset)</span></code></pre></div>
<h4 id="plugin.flipnegate"><code>Plugin.FlipNegate</code> <a href="#plugin.flipnegate">§</a></h4>
<p><code>Plugin/FlipNegate.hs</code> defines a plugin that inverts the value of <code>doNegate</code> in the program state. Therefore it is a <code>Plugin CanRWState</code>.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.FlipNegate</span> <span class="kw">where</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span> (modify)</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> <span class="dt">CanRWState</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;FlipNegate&quot;</span> <span class="op">$</span> \i <span class="ot">-&gt;</span> i <span class="op">&lt;$</span> modify <span class="fu">not</span></span></code></pre></div>
<h4 id="plugin.shootlasers"><code>Plugin.ShootLasers</code> <a href="#plugin.shootlasers">§</a></h4>
<p><code>Plugin/ShootLasers.hs</code> uses <code>CanIO</code> to shoot the lasers. Watch out!</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.ShootLasers</span> <span class="kw">where</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.IO.Class</span> (liftIO)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> <span class="dt">CanIO</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;ShootLasers&quot;</span> <span class="op">$</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>  \i <span class="ot">-&gt;</span> i <span class="op">&lt;$</span> liftIO (<span class="fu">putStrLn</span> <span class="st">&quot;pew! pew!&quot;</span>)</span></code></pre></div>
<h3 id="composition">Composition <a href="#composition">§</a></h3>
<p>The main program will have a list (or some other container) of zero or more plugins. And it will execute the plugin hooks at the relevant part of the program. OK, let’s build a list of plugins in <code>Main.hs</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>  [ Plugin.Double.plugin</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>  , Plugin.Offset.mkPlugin <span class="dv">100</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>  ]</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>main <span class="ot">=</span> …</span></code></pre></div>
<p>So far so good! Now let’s add <code>ShootLasers</code> to the mix:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>  [ Plugin.Double.plugin</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>  , Plugin.Offset.mkPlugin <span class="dv">100</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>  , Plugin.ShootLasers.plugin</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>  ]</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>main <span class="ot">=</span> …</span></code></pre></div>
<p>Uh oh:</p>
<pre><code>Main.hs:16:5: error:
    • Couldn&#39;t match type ‘MonadIO’ with ‘Applicative’
      Expected type: Plugin Pure
        Actual type: Plugin CanIO
    • In the expression: Plugin.ShootLasers.plugin
      In the expression:
        [Plugin.Noop.plugin, (Plugin.Double.plugin :: Plugin Pure),
         (Plugin.Offset.mkPlugin 100), Plugin.ShootLasers.plugin]
      In an equation for ‘plugins’:
          plugins
            = [Plugin.Noop.plugin, (Plugin.Double.plugin :: Plugin Pure),
               (Plugin.Offset.mkPlugin 100), ....]
   |
16 |   , Plugin.ShootLasers.plugin
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p><code>Applicative</code> is a superclass of <code>MonadIO</code>. Abstract types with these constraints can unify, but the concrete types <code>Plugin MonadIO</code> and <code>Plugin Applicative</code> do not unify. We cannot put them together in a list.</p>
<p>So when composing plugins, we need a way to <em>relax</em> the constraints of individual plugins to the “lowest common denominator”. That is, we have to construct a list of <code>Plugin Unconstrained</code>. Therefore we need a function to turn a <code>Plugin ctx</code> into a <code>Plugin Unconstrained</code>, provided that <code>Unconstrained</code> “encompasses” <code>ctx</code>. The <code>relax</code> function accomplishes this:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a>relax</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="kw">forall</span> m<span class="op">.</span> ctx&#39; m <span class="ot">=&gt;</span> ctx m)</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>  <span class="ot">=&gt;</span> <span class="dt">Plugin</span> ctx <span class="ot">-&gt;</span> <span class="dt">Plugin</span> ctx&#39;</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>relax (<span class="dt">Plugin</span> n fs) <span class="ot">=</span> <span class="dt">Plugin</span> n fs</span></code></pre></div>
<p>Note the constraint: <code>(forall m. ctx' m =&gt; ctx m)</code>. This requires the <code>QuantifiedConstraints</code> language extension. It means that the function is defined only if <code>ctx</code> (the <em>input</em> plugin capability) is implied by <code>ctx'</code> (the <em>output</em> capability).</p>
<p>Now we can use <code>relax</code> to construct a <code>[Plugin Unconstrained]</code>, because <code>Unconstrained</code> implies all of the individual capabilities available to plugins:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="ot">plugins ::</span> [<span class="dt">Plugin</span> <span class="dt">Unconstrained</span>]</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>  [ relax Plugin.Double.plugin</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>  , relax (Plugin.Offset.mkPlugin <span class="dv">100</span>)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>  , relax Plugin.FlipNegate.plugin</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>  , relax Plugin.ShootLasers.plugin</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>  ]</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a>main <span class="ot">=</span> …</span></code></pre></div>
<p>The prototype now satisfies the <strong>composition</strong> requirement.</p>
<h3 id="executing-plugins">Executing plugins <a href="#executing-plugins">§</a></h3>
<p>The final step is to update the main program to execute the plugins. Where previously we had <code>pure i</code> (and a <code>TODO</code> comment), we now have the Kleisli composition (monadic chaining via <code>(&gt;=&gt;)</code>) of the plugin hook functions, applied to <code>i</code>:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>  <span class="co">-- read start values</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a>  doNegate <span class="ot">&lt;-</span> prompt <span class="st">&quot;negate number? [True|False]&quot;</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a>  i <span class="ot">&lt;-</span> prompt <span class="st">&quot;number (Int)&quot;</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>  (j, doNegate&#39;) <span class="ot">&lt;-</span> <span class="fu">flip</span> runStateT doNegate <span class="op">$</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>    <span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> (<span class="fu">fmap</span> pluginHook plugins) i</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a>  <span class="co">-- print result</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>  <span class="kw">let</span> r <span class="ot">=</span> <span class="kw">if</span> doNegate&#39; <span class="kw">then</span> <span class="fu">negate</span> j <span class="kw">else</span> j</span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>  <span class="fu">putStr</span> <span class="st">&quot;result: &quot;</span> <span class="op">*&gt;</span> <span class="fu">print</span> r</span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>  prompt s <span class="ot">=</span> <span class="fu">putStr</span> (s <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span>) <span class="op">*&gt;</span> hFlush stdout <span class="op">*&gt;</span> <span class="fu">readLn</span></span></code></pre></div>
<p>This time running the program, telling it to negate the input and giving it the value <code>10</code>, gives the following transcript:</p>
<pre><code>ftweedal% ./Main
negate number? [True|False]: True
number (Int): 10
pew! pew!
result: 120</code></pre>
<p>We can see that:</p>
<ul>
<li><code>Double</code> doubled the input to <code>20</code></li>
<li><code>Offset</code> added the configured offset of 100, giving <code>120</code></li>
<li><code>FlipNegate</code> turned negation off</li>
<li><code>ShootLasers</code> shot the lasers (hopefully they were not pointed at your foot)</li>
</ul>
<p>As a result, the final output of the program was <code>120</code>. Note that the order of plugins is significant. Plugins appearing earlier in the list are executed earlier.</p>
<h2 id="discussion">Discussion <a href="#discussion">§</a></h2>
<h3 id="paranoia">Paranoia <a href="#paranoia">§</a></h3>
<p>It’s all good and well that plugins express their types. But what’s to stop a <code>Plugin Pure</code> sneakily evolving into a <code>Plugin CanIO</code> upon a new release, and compromising your system?</p>
<p>The paranoid user can mitigate this risk by providing explicit type signatures for each plugin installed in the main program:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="ot">plugins ::</span> [<span class="dt">Plugin</span> <span class="dt">Unconstrained</span>]</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a>  [ relax (Plugin.Double.plugin<span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">Pure</span>)</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a>  , relax (Plugin.Offset.mkPlugin <span class="dv">100</span><span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">Pure</span>)</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>  , relax (Plugin.FlipNegate.plugin<span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">CanRWState</span>)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a>  , relax (Plugin.ShootLasers.plugin<span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">CanIO</span>)</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>If any plugin releases a new version that require additional (or fewer) capabilities its type will change, resulting in a type error. For example, if <code>Double</code> becomes a <code>Plugin CanIO</code>, GHC gives the following type error:</p>
<pre><code>Main.hs:14:12: error:
    • Couldn&#39;t match type ‘MonadIO’ with ‘Applicative’
      Expected type: Plugin Pure
        Actual type: Plugin CanIO
    • In the first argument of ‘relax’, namely
        ‘(Plugin.Double.plugin :: Plugin Pure)’
      In the expression: relax (Plugin.Double.plugin :: Plugin Pure)
      In the expression:
        [relax (Plugin.Noop.plugin :: Plugin Pure),
         relax (Plugin.Double.plugin :: Plugin Pure),
         relax (Plugin.Offset.mkPlugin 100 :: Plugin Pure),
         relax (Plugin.FlipNegate.plugin :: Plugin CanRWState), ....]
   |
14 |   , relax (Plugin.Double.plugin :: Plugin Pure)
   |            ^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>Thanks to the constraint type synonyms, the type error is (in my opinion) understandable. Perhaps even non-programmers could make sense of it. Unfortunately, it doesn’t hint at what a user should do to solve it. A better error message would suggest to use <code>relax</code> or to review the plugin’s type. GHC has some support for <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/GHC-TypeLits.html#g:4">user-defined type errors</a>, but at this time it is not possible to augment ordinary type mismatch errors.</p>
<h3 id="multiple-hook-functions">Multiple hook functions <a href="#multiple-hook-functions">§</a></h3>
<p>In real world applications, there can be multiple kinds of plugin functions relating to different behaviours in the main program. For example, Purebred will have a hook for processing a message prior to displaying it, and another hook for manipulating outgoing emails. Some plugins will only use a single hook, but others will use multiple hooks. For example, an OpenPGP plugin would perform decryption and signature verification when preparing a message for display, and perform signing and/or encryption when sending mail.</p>
<p>It is possible that a plugin might require different capabilities for different hooks. This poses a complex design question, with several possible solutions:</p>
<ul>
<li><p>Should all hooks have their design constraints expressed <em>separately</em> at the type level? For example, a plugin type with two hook functions could be written as <code>Plugin ctx1 ctx2</code>. The main problem with this is that adding new hooks to the plugin type is an API-breaking change. It also isn’t particularly human-friendly because the type doesn’t reveal which operation each constraint applies to.</p></li>
<li><p>Should different hooks have different types? Instead of a unified <code>Plugin</code> type, for Purebred we could have a <code>SendHook</code> and <code>DisplayHook</code>. The downside is that installing a plugin that uses multiple hooks means installing all those hooks separately. If the plugin evolves to use more (or fewer) hooks, the user has to do extra work to migrate.</p></li>
<li><p>Should plugins be a single data type, with a single constraint? The downside to this approach is the type does not express which hooks are used, or what the per-hook required capabilities are. The plugin’s single capability constraint is the union of all capabilities required by all hook functions.</p></li>
</ul>
<p>I chose the last approach, for a few reasons. First, when it comes to I/O in particular, if you are trusting <em>any</em> part of the plugin with <code>CanIO</code>, from a risk perspective it doesn’t matter much that <em>other</em> parts cannot perform I/O. Second, I suspect that plugins that use multiple hooks <em>and</em> use different capabilities for those hooks will be uncommon. For me, prioritising API stability and ease of use made the choice easy. But it is still worthwhile to discuss the tradeoffs and alternatives.</p>
<h3 id="implementation-considerations">Implementation considerations <a href="#implementation-considerations">§</a></h3>
<p>Some implementation considerations that arise when applying this plugin system design in Purebred (real-world programs in general) include:</p>
<ul>
<li><p>Plugins have to be be stored in the internal configuration object. Should the hook functions be decomposed early (storing multiple lists of hook functions in the config) or just-in-time (storing a single list of plugins, and extracting the relevant hook functions when they are needed)? I will initially store a single list of plugins.</p></li>
<li><p>It would be nice to provide information about which plugins are installed alongside version info (<code>--version</code>), “about” UI, etc.</p></li>
<li><p>Some standard functionality could be implemented using the plugin system. So, should it be? And should “wired-in” plugins be advertised or hidden?</p></li>
<li><p>What interface(s) should be given for plugin installation? To what extent should plugins be isolated from each other?</p></li>
<li><p>Some plugins will not use all hooks. Purebred might end up having many hooks, but most plugins will use only one or a few of them. To make it convenient to define plugins, I can define a helper function to construct a new plugin whose hooks are all no-ops. Plugin implementers can override the hooks they need.</p></li>
<li><p>Some plugins might need to modify the UI and/or propagate data around. For example, an OpenPGP plugin should let users choose whether to encrypt, sign, or do nothing with an outbound email. I haven’t solved this problem yet, but I’ll need to, somehow.</p></li>
</ul>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>My goal was to design a plugin system for Purebred offering <strong>composition</strong>; <strong>capabilities</strong> expressed through <strong>human-friendly</strong> types, enforced by the type system; and <strong>abstract</strong> plugin implementations so that the main program can evolve. Additionally, there had to be a way to provide <strong>configuration</strong> to plugins that require it. The prototype plugin system described in this post satisfies these requirements.</p>
<p>I left several regions of the plugin system design space unexplored, including dynamic (re)loading of plugins and plugin-specific data and state. These are interesting and challenging problems, but they are not problems that the Purebred project needs to solve right now.</p>
<p>The next step is to take what I’ve learned from this prototype and implement it in Purebred. There will be some new challenges there, and I expect the experience to provide ample material for a follow-up blog post—or several.</p>]]></summary>
</entry>
<entry>
    <title>Hakyll how-to: Fancy title formatting</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-01-11-hakyll-title-formatting.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-01-11-hakyll-title-formatting.html</id>
    <published>2021-01-11T00:00:00Z</published>
    <updated>2021-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="hakyll-how-to-fancy-title-formatting">Hakyll how-to: <em>Fancy</em> <code>title</code> <span class="smallcaps">formatting</span></h1>
<p>Sometimes you need special formatting in an article title. I often use monospace (e.g. for a function name), but subscript, superscript or italics might be useful too. The standard <a href="https://jaspervdj.be/hakyll/">Hakyll</a> metadata block doesn’t offer a good way of doing this. But Hakyll is very flexible. In this post I’ll walk through my solution.</p>
<h2 id="the-standard-approach">The standard approach <a href="#the-standard-approach">§</a></h2>
<p><a href="https://pandoc.org/">Pandoc</a> reads an optional YAML <em>metadata block</em> at the beginning of an input file. You specify the <code>title</code> there:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Fancy Hakyll title formatting</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>Hakyll propagates these metadata fields in the <a href="https://hackage.haskell.org/package/hakyll-4.13.4.1/docs/Hakyll-Web-Template-Context.html#v:defaultContext"><code>defaultContext</code></a>, so that you can refer to <code>$title$</code> in the article template(s):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">&lt;h1&gt;</span>$title$<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>$body$</span></code></pre></div>
<p>Typically you also include <code>$title$</code> in the HTML <code>&lt;title&gt;</code> element, in the “top-level” template:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">&lt;html</span><span class="ot"> xmlns=</span><span class="st">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="ot"> xml:lang=</span><span class="st">&quot;en&quot;</span><span class="ot"> lang=</span><span class="st">&quot;en&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - $title$<span class="kw">&lt;/title&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;/css/default.css&quot;</span> <span class="kw">/&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>  <span class="kw">&lt;/head&gt;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>  …</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>
<h3 id="limitations">Limitations <a href="#limitations">§</a></h3>
<p>Say you want to use monospace for the “Hakyll” in the title. Trying with backticks…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Fancy `Hakyll` title formatting</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>The site builds, but you end up with:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>…</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - Fancy `Hakyll` title formatting<span class="kw">&lt;/title&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>…</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="kw">&lt;h1&gt;</span>Fancy `Hakyll` title formatting<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>…</span></code></pre></div>
<p>Not what we want. The backticks were propagated verbatim, instead of resulting in a <code>&lt;code&gt;</code> element. Worse, when you have formatting at the <em>beginning</em> of the value…</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> *Fancy* Hakyll title formatting</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>Then the build fails with a YAML parse error:</p>
<pre><code>ftweedal% cabal run site build
Up to date
Initialising...
  Creating store...
  Creating provider...
site: ./posts/2021-01-15-hakyll-title-formatting.md:
      YAML parse exception at line 2, column 13,
while scanning an alias:
did not find expected alphabetic or numeric character
  Running rules...</code></pre>
<p>OK, what about using HTML tags in the metadata?</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> &lt;em&gt;Fancy&lt;/em&gt; &lt;code&gt;Hakyll&lt;/code&gt; title formatting</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>The site builds successfully, and the resulting HTML is:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>…</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - <span class="kw">&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span> <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting<span class="kw">&lt;/title&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>…</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="kw">&lt;h1&gt;&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span> <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>…</span></code></pre></div>
<p>The <code>&lt;h1&gt;</code> header is formatted exactly how we want. But now there are literal HTML tags in the <code>&lt;title&gt;</code> (browsers do not recognise formatting here). So we need a “plain” variant of the title to put in the <code>&lt;title&gt;</code> element. We may also need to use the plain variant in Atom/RSS feeds, or other parts of the site.</p>
<p>Also, writing HTML is not nice. A big reason to use Hakyll and Pandoc is to write in a more fluent and human-friendly markup format. It is undesirable to have to revert to HTML.</p>
<h2 id="two-titles">Two titles? <a href="#two-titles">§</a></h2>
<p>As demonstrated, two variants of the title are needed—one with (optional) formatting, and one without. Therefore we could write:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Fancy Hakyll title formatting</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="an">fancyTitle:</span><span class="co"> &lt;em&gt;Fancy&lt;/em&gt; &lt;code&gt;Hakyll&lt;/code&gt; title formatting</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>And update relevant templates to use <code>$fancyTitle$</code>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">&lt;h1&gt;</span>$fancyTitle$<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>$body$</span></code></pre></div>
<p>This approach works. But it is unsatisfying because not only are we writing HTML; we are also writing the same title twice! This fails the DRY (<em>don’t repeat yourself</em>) principle. Even when <code>fancyTitle</code> has formatting, the content is substantially similar. In fact, you could derive the plain variant from the other.</p>
<p>So that’s what I do.</p>
<h2 id="solution">Solution <a href="#solution">§</a></h2>
<p>First, promote the title out of the metadata block and into the document itself, as a heading:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="fu"># *Fancy* `Hakyll` title formatting</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>You’ll need to update the the compilation rule to extract the first header from the document, compute values for <code>$title$</code> and <code>$fancyTitle$</code> and remember them. Define the extraction function:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">firstHeader ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>firstHeader (<span class="dt">Pandoc</span> _ xs) <span class="ot">=</span> go xs</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  go [] <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>  go (<span class="dt">Header</span> _ _ ys <span class="op">:</span> _) <span class="ot">=</span> <span class="dt">Just</span> ys</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>  go (_ <span class="op">:</span> xs) <span class="ot">=</span> go xs</span></code></pre></div>
<p>And define the “strip formatting” function. <code>removeFormatting</code> uses <a href="https://hackage.haskell.org/package/pandoc-types-1.22/docs/Text-Pandoc-Walk.html#v:query"><code>Text.Pandoc.Walk.query</code></a> to yield, in order, only the “terminal” or “leaf” data from a <code>[Inline]</code>. <code>query</code> monoidally appends the values yielded by the inner function <code>f</code>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">removeFormatting ::</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>removeFormatting <span class="ot">=</span> query f</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>  f inl <span class="ot">=</span> <span class="kw">case</span> inl <span class="kw">of</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    <span class="dt">Str</span> s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>    <span class="dt">Code</span> _ s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>    <span class="dt">Space</span> <span class="ot">-&gt;</span> [<span class="dt">Space</span>]</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a>    <span class="dt">SoftBreak</span> <span class="ot">-&gt;</span> [<span class="dt">SoftBreak</span>]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a>    <span class="dt">LineBreak</span> <span class="ot">-&gt;</span> [<span class="dt">LineBreak</span>]</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true"></a>    <span class="dt">Math</span> _ s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true"></a>    <span class="dt">RawInline</span> _ s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true"></a>    _ <span class="ot">-&gt;</span> []</span></code></pre></div>
<p>Next, update the Hakyll compilation rule to extract the header, process and render its content, and save snapshots of the values.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>  <span class="co">-- BEGIN title processing</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  pandoc <span class="ot">&lt;-</span> readPandoc <span class="op">=&lt;&lt;</span> getResourceBody</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    h1 <span class="ot">=</span> <span class="fu">maybe</span> [<span class="dt">Str</span> <span class="st">&quot;no title&quot;</span>] <span class="fu">id</span> <span class="op">.</span> firstHeader <span class="op">&lt;$&gt;</span> pandoc</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>    render f <span class="ot">=</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>      writePandoc <span class="op">.</span> <span class="fu">fmap</span> (<span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span> <span class="op">.</span> f)</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a>    title <span class="ot">=</span> render removeFormatting h1</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a>    fancyTitle <span class="ot">=</span> render <span class="fu">id</span> h1</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true"></a>  saveSnapshot <span class="st">&quot;title&quot;</span> title</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true"></a>  saveSnapshot <span class="st">&quot;fancyTitle&quot;</span> fancyTitle</span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true"></a>  <span class="co">-- END title processing</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true"></a></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true"></a>  pandocCompiler</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> ctx</span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>The final code change is to update <code>ctx</code> to retrieve values for <code>$title$</code> and <code>$fancyTitle$</code> from the snapshots:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="ot">ctx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>ctx <span class="ot">=</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>  dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;title&quot;</span> <span class="st">&quot;title&quot;</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;fancyTitle&quot;</span> <span class="st">&quot;fancyTitle&quot;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> defaultContext</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a>  loadSnapshotBody (itemIdentifier item) snap</span></code></pre></div>
<p>Finally, update relevant templates. The post template (<code>templates/post.html</code>) does not refer to <code>$title$</code> or <code>$fancyTitle$</code>; the title is now part of the document <code>$body$</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>$body$</span></code></pre></div>
<p>Other templates (e.g. the archive page, <code>templates/archive.html</code>) can use the <code>$fancyTitle$</code>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>Here you can find all my previous posts.</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>  $for(posts)$</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>    <span class="kw">&lt;li&gt;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>      $date$ - <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$fancyTitle$<span class="kw">&lt;/a&gt;</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>    <span class="kw">&lt;/li&gt;</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>  $endfor$</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a><span class="kw">&lt;/ul&gt;</span></span></code></pre></div>
<h3 id="results">Results <a href="#results">§</a></h3>
<p>The resulting HTML has the plain <code>$title$</code> value in the <code>&lt;title&gt;</code> element. The formatted title appears as an <code>&lt;h1&gt;</code> element in the article <code>$body$</code>.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>…</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - Fancy Hakyll title formatting<span class="kw">&lt;/title&gt;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>…</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a><span class="kw">&lt;h1</span><span class="ot"> id=</span><span class="st">&quot;fancy-hakyll-title-formatting&quot;</span><span class="kw">&gt;&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>  <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting.<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>…</span></code></pre></div>
<p>The archive page uses <code>$fancyTitle$</code>, with the rich formatting, as the link (<code>&lt;a&gt;</code>) text for each post:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a>…</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>  <span class="kw">&lt;li&gt;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>    2021-01-15 -</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>    <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;./posts/2021-01-15-hakyll-title-formatting.html&quot;</span><span class="kw">&gt;&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>    <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting<span class="kw">&lt;/a&gt;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a>  <span class="kw">&lt;/li&gt;</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>  …</span></code></pre></div>
<h2 id="performance-what-not-to-do">Performance (what not to do) <a href="#performance-what-not-to-do">§</a></h2>
<p>It is critical for performance to extract and process the header <em>during compilation</em>, saving snapshots of the computed values. I found this out the hard way. In a previous iteration of my solution, during compilation I only saved a snapshot of the input <em>source</em>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a>compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>  getResourceBody <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;source&quot;</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>  pandocCompiler <span class="op">&gt;&gt;=</span> …</span></code></pre></div>
<p>The behaviour to load the source from the snapshot, parse it and extract the title was part of the <code>Context</code>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ot">headerField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> ([<span class="dt">Inline</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]) <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>headerField key f <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>  doc <span class="ot">&lt;-</span> readPandoc <span class="op">=&lt;&lt;</span> loadSnapshot (itemIdentifier item) <span class="st">&quot;source&quot;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>  <span class="fu">pure</span> <span class="op">.</span> itemBody <span class="op">.</span> writePandoc</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>    <span class="op">$</span> <span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span> <span class="op">.</span> f</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>      <span class="op">.</span> <span class="fu">maybe</span> [<span class="dt">Str</span> <span class="st">&quot;no title&quot;</span>] <span class="fu">id</span> <span class="op">.</span> firstHeader</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>    <span class="op">&lt;$&gt;</span> doc</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a><span class="ot">ctx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>ctx <span class="ot">=</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a>  dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> headerField <span class="st">&quot;title&quot;</span> removeFormatting</span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> headerField <span class="st">&quot;fancyTitle&quot;</span> <span class="fu">id</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> defaultContext</span></code></pre></div>
<p>With this implementation the build duration for my work blog (68 posts at the time) was around 34 seconds. Certainly long enough to irritate me. When I investigated, I discovered that Hakyll executes the process in <code>headerField</code>—load snapshot, parse with Pandoc, extract title—every time it encountered <code>$title$</code> or <code>$fancyTitle$</code> in a template. That was 683 times, or over 10 times per post!</p>
<p>That seemed like an huge number to me, so I worked the numbers. Each post page has its <code>&lt;title&gt;</code>, and also a list of 5 recent articles. Each article appears in the main archive list, and also the list for each of its tags (I guess an average of 3 tags per article). And there are 5 recent articles on the home page.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Monoid</span> (<span class="dt">Sum</span>(..))</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> titles <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> recent <span class="ot">=</span> (<span class="op">*</span><span class="dv">5</span>)</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> archive <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> tags <span class="ot">=</span> (<span class="op">*</span><span class="dv">3</span>)</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">index</span> <span class="ot">=</span> <span class="fu">const</span> <span class="dv">5</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">mconcat</span> [titles, recent, archive, tags, <span class="fu">index</span>] <span class="op">$</span> <span class="dt">Sum</span> <span class="dv">68</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a><span class="dt">Sum</span> {getSum <span class="ot">=</span> <span class="dv">685</span>}</span></code></pre></div>
<p>The estimate (685) was very close to the actual value (683). Although this is the worst case scenario, even the best case scenario—when nothing has changed at all—still caused 192 parses and took significant time (about 9 seconds). This seems to be caused by tags pages always being recompiled. I’m not sure why that happens, but when the titles are cached it’s fast enough to not be an issue (&lt;0.5 seconds).</p>
<p>The big takeaway from all this is: do as little processing as possible in <code>Context</code> field definitions. In my case, doing the title processing in <code>compile</code> and caching the results in dedicated snapshots (<a href="https://hackage.haskell.org/package/hakyll-4.13.4.1/docs/Hakyll-Core-Compiler.html#v:saveSnapshot"><code>saveSnapshot</code></a>) reduced site build time from 34 seconds to 9 seconds!</p>
<h2 id="final-words">Final words <a href="#final-words">§</a></h2>
<p>Pandoc and Hakyll continue to be awesome and powerful tools. Any time I’ve wished to do something a little differently, or enhance my site, I’ve always found a way (up to HTML and CSS, anyway).</p>
<p>I did confirm that my solution results in 1 additional parse of each article source (2 parses in total). Using <a href="https://hackage.haskell.org/package/hakyll-4.13.4.1/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM"><code>pandocCompilerWithTransformM</code></a> I might be able to do the title processing in a callback, so that each article source gets parsed exactly once. This would further reduce the build time. I left this as a future improvement (and an exercise for the reader).</p>
<p>Earlier I did omit one important detail for the sake of clarity. The “recent posts” list accompanying each article requires an additional <code>Rules</code> set, creating a <code>"recent"</code> version of each article <code>Item</code> that can be referenced in the “main” article.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> version <span class="st">&quot;recent&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>  …</span></code></pre></div>
<p>It is in <em>this</em> <code>Rules</code> set that I extract and snapshot the titles. Accordingly, in <code>snapshotField</code> I have to explicitly (and unconditionally) request the snapshot from the <code>"recent"</code> version of the current <code>Item</code>.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a>    ident <span class="ot">=</span> itemIdentifier item</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a>    ident&#39; <span class="ot">=</span> setVersion (<span class="dt">Just</span> <span class="st">&quot;recent&quot;</span>) ident</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>  <span class="kw">in</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true"></a>    loadSnapshotBody ident&#39; snap</span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Fixing getExecutablePath on FreeBSD</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-01-01-fixing-getExecutablePath-FreeBSD.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-01-01-fixing-getExecutablePath-FreeBSD.html</id>
    <published>2021-01-01T00:00:00Z</published>
    <updated>2021-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="fixing-getexecutablepath-on-freebsd">Fixing <code>getExecutablePath</code> on FreeBSD</h1>
<p><a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/System-Environment.html#v:getExecutablePath"><code>System.Environment.getExecutablePath</code></a> (part of the <em>base</em> library) returns the absolute pathname of the current executable. Except when it doesn’t. From my work on <a href="https://hackage.haskell.org/package/dyre">Dyre</a> (a <strong>dy</strong>namic <strong>re</strong>configuration system for Haskell programs) I discovered that <code>getExecutablePath</code> did not work properly on FreeBSD. Fixing it involved FreeBSD’s <a href="https://www.freebsd.org/cgi/man.cgi?query=sysctl&amp;sektion=3&amp;manpath=FreeBSD+12.2-RELEASE"><code>sysctl(3)</code></a> interface and the Haskell <a href="https://downloads.haskell.org/ghc/8.10.1/docs/html/users_guide/ffi-chap.html"><em>Foreign Function Interface</em></a> <em>(FFI)</em>.</p>
<h2 id="how-getexecutablepath-is-implemented">How <code>getExecutablePath</code> is implemented <a href="#how-getexecutablepath-is-implemented">§</a></h2>
<p>The <em>base</em> library is part of GHC. <code>getExecutablePath</code> is defined in <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/ghc-8.6.5-release/libraries/base/System/Environment/ExecutablePath.hsc"><code>libraries/base/System/Environment/ExecutablePath.hsc</code></a> (link is to the GHC 8.6.5 version). <code>.hsc</code> files are processed by <a href="https://github.com/haskell/hsc2hs"><code>hsc2hs</code></a>, which provides helper directives for working with the FFI (it is also distributed with GHC).</p>
<p><code>ExecutablePath.hsc</code> uses C Preprocessor (CPP) directives to select different implementations of <code>getExecutablePath</code> for different operating systems. In GHC 8.6 and earlier there were platform-specific implementations for Linux, Mac OS X and Windows (all the <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/platforms#tier-1-platforms">GHC Tier 1 platforms</a>). And there is a fallback implementation when no platform-specific implementation is available (we shall see that it has some problems). All of the implementations use the FFI to some extent.</p>
<h3 id="the-linux-implementation">The Linux implementation <a href="#the-linux-implementation">§</a></h3>
<p>Linux systems almost always mount <a href="https://en.wikipedia.org/wiki/Procfs#Linux"><code>procfs(5)</code></a>, a filesystem of information about running processes. Information about a particular process is published in files under <code>/proc/{pid}/</code>. A process can also find information about itself under <code>/proc/self/</code>.</p>
<p>A process can find out its own executable by reading <code>/proc/self/exe</code>, which is a symbolic link. And this is exactly what the implementation of <code>getExecutablePath</code> for Linux does:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>getExecutablePath <span class="ot">=</span> readSymbolicLink <span class="op">$</span> <span class="st">&quot;/proc/self/exe&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ot">readSymbolicLink ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">FilePath</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>readSymbolicLink file <span class="ot">=</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="co">-- uses readlink(3) via FFI</span></span></code></pre></div>
<h3 id="the-fallback-implementation-has-problems">The fallback implementation (has problems) <a href="#the-fallback-implementation-has-problems">§</a></h3>
<p>When the <em>base</em> library does not have an operating system-specific implementation for <code>getExecutablePath</code> it falls back to <code>argv[0]</code>: the first value in the program’s argument array. However, this is not a reliable way to determine the actual executable that supplied the program text. Many programs and environments manipulate the contents of <code>argv[0]</code>. The <code>execv*(3)</code> family of calls, which replaces the current process with a new process image, allow the caller to specify an arbitrary <code>argv</code>.</p>
<p>As an example of <code>argv[0]</code> manipulation, consider <a href="https://hackage.haskell.org/package/unix-2.7.2.2/docs/System-Posix-Process.html#v:executeFile"><code>System.Posix.Process.executeFile</code></a> from the <a href="https://hackage.haskell.org/package/unix"><em>unix</em></a> package. <code>executeFile</code> calls one of the <code>execv*(3)</code> subroutines (exactly which one depends on its own argument). But, as stated in the documentation:</p>
<blockquote>
<p>The basename (leading directory names suppressed) of the command is passed to execv* as <code>arg[0]</code>.</p>
</blockquote>
<p>So if you use <code>executeFile</code>, <code>argv[0]</code> of the resulting process does not contain a full pathname. And you may not be able to resolve the <em>basename</em> to an executable via the <code>PATH</code> environment variable. Worse still, you may successfully resolve it <em>to the wrong executable!</em></p>
<p>In fact, this was exactly the problem I experienced using <em>Dyre</em> on FreeBSD. <em>Dyre</em> automatically builds and caches an executable when it detects that configuration has changed, and <code>exec(3)</code>s the cached executable. On FreeBSD, the combination of <code>executeFile</code> <code>argv[0]</code> behaviour and use of the fallback <code>getExecutablePath</code> implementation caused <em>Dyre</em> to never recognise that it was running the cached executable. As a result, it entered an infinite loop of <code>execv*(3)</code>.</p>
<h2 id="querying-the-current-executable-on-freebsd">Querying the current executable on FreeBSD <a href="#querying-the-current-executable-on-freebsd">§</a></h2>
<p>It was clear that GHC needed a FreeBSD-specific implementation of <code>getExecutablePath</code>. So, what is the “proper” way to query the current process’ executable on FreeBSD?</p>
<p><a href="https://www.freebsd.org/cgi/man.cgi?query=procfs&amp;manpath=FreeBSD+12.2-RELEASE">FreeBSD does implement a <code>procfs</code></a>. Some of the file names differ from Linux’s <code>procfs</code>. For example, the “current executable” symlink path is <code>/proc/curproc/file</code> instead of <code>/proc/self/exe</code>. It would be a small change to parameterise the Linux implementation so that it can be used for FreeBSD. But unlike typical Linux systems, FreeBSD’s <code>procfs</code> is often unused and not even mounted (especially on servers). Therefore the <code>procfs</code> approach is not suitable for FreeBSD.</p>
<p>A bit of research revealed that the <a href="https://www.freebsd.org/cgi/man.cgi?query=sysctl&amp;sektion=3&amp;manpath=FreeBSD+12.2-RELEASE"><code>sysctl(3)</code></a> interface is the proper and ubiquitous way to query the executable path on FreeBSD. <code>sysctl(3)</code> exposes a <em>management information base (MIB)</em>, a tree structure where nodes are identified by a sequence of integers (<em>object identifier</em> or <em>OID</em>). For example, the kernel “maximum processes” setting has the OID <code>[1, 6]</code>. Some (but not all) OIDs have a string representation so that values can be queried or changed by the userland <code>sysctl(8)</code> utility:</p>
<pre><code>% sysctl kern.maxproc 
kern.maxproc: 3828</code></pre>
<p>To assist programmers reading and writing programs that use <code>sysctl(3)</code>, important OID components are defined in <code>&lt;sys/sysctl.h&gt;</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co"> * Top-level identifiers</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="pp">#define CTL_UNSPEC  0  </span><span class="co">/* unused */</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="pp">#define CTL_KERN    1  </span><span class="co">/* &quot;high kernel&quot;: proc, limits */</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>...</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="co"> * CTL_KERN identifiers</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>...</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a><span class="pp">#define KERN_MAXPROC  6  </span><span class="co">/* int: max processes */</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>...</span></code></pre></div>
<p>The OID containing a process’ executable pathname is <code>[1, 14, 12, $PID]</code> where <code>PID</code> is the process ID, or <code>-1</code> to refer to the current process. The C <code>#define</code>s for the first three components are <code>CTL_KERN</code>, <code>KERN_PROC</code>, and <code>KERN_PROC_PATHNAME</code>.</p>
<p>Now that we know the OID, consider the signature of <code>sysctl(3)</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="dt">int</span> sysctl(</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    <span class="dt">const</span> <span class="dt">int</span> *name,</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    u_int namelen,</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    <span class="dt">void</span> *oldp,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    <span class="dt">size_t</span> *oldlenp,</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="dt">const</span> <span class="dt">void</span> *newp,</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    <span class="dt">size_t</span> newlen);</span></code></pre></div>
<ul>
<li><p><code>name</code> is the OID; an array of <code>int</code>.</p></li>
<li><p><code>namelen</code> is the number of components in <code>name</code></p></li>
<li><p><code>oldp</code> is a pointer to a buffer to hold the current/old value. It can be <code>NULL</code>. It is a <code>void *</code> because sysctl nodes have a variety of types.</p></li>
<li><p><code>oldlenp</code> is an in/out argument that gives the size of <code>outp</code> before the call, and holds the actual size of the datum after the call (including when <code>oldp</code> is <code>NULL</code>).</p></li>
<li><p><code>newp</code> and <code>newlen</code> supply a new value. These are not needed for my use case and I will set them to <code>NULL</code> and <code>0</code> respectively.</p></li>
</ul>
<p>Therefore the procedure to query the current executable is:</p>
<ol type="1">
<li>Invoke <code>sysctl</code> with <code>oldp = NULL</code>.</li>
<li>Read <code>oldlenp</code> to determine size of datum.</li>
<li>Allocate big enough buffer.</li>
<li>Call <code>sysctl</code> again, with newly allocated buffer as <code>oldp</code>.</li>
<li>Process the data in <code>oldp</code>.</li>
<li>Free the buffer.</li>
</ol>
<p>This is what the FreeBSD-specific implementation of <code>getExecutablePath</code> must do.</p>
<h2 id="the-freebsd-implementation">The FreeBSD implementation <a href="#the-freebsd-implementation">§</a></h2>
<p>I will now walk through the different parts of the FreeBSD-specific implementation of <code>getExecutablePath</code>.</p>
<h3 id="c-preprocessor-guards">C Preprocessor guards <a href="#c-preprocessor-guards">§</a></h3>
<p>System-specific implementations are guarded by CPP conditionals:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="pp">#if defined(darwin_HOST_OS)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>... MacOS implementation</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="pp">#elif defined(linux_HOST_OS)</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>... Linux implementation</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a><span class="pp">#elif defined(mingw32_HOST_OS)</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>... Windows implementation</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a><span class="pp">#else</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>... fallback implementation</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a><span class="pp">#endif</span></span></code></pre></div>
<p>I added the appropriate guard to encapsulate the FreeBSD-specific implementation:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="pp">#elif defined(freebsd_HOST_OS)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>... FreeBSD implementation</span></code></pre></div>
<p>Similarly, in the <code>import</code> area CPP conditionals wrap the FreeBSD-specific Haskell imports and C header includes:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="pp">#elif defined(freebsd_HOST_OS)</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Foreign.C</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Foreign.Marshal.Alloc</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Foreign.Marshal.Array</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Foreign.Ptr</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Foreign.Storable</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">System.Posix.Internals</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a><span class="pp">#include &lt;sys/types.h&gt;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a><span class="pp">#include &lt;sys/sysctl.h&gt;</span></span></code></pre></div>
<h3 id="foreign-import">Foreign import <a href="#foreign-import">§</a></h3>
<p>A <code>foreign import</code> declaration makes <code>sysctl(3)</code> available to Haskell code as <code>c_sysctl</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>foreign <span class="kw">import</span> ccall unsafe &quot;sysctl&quot;</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>  c_sysctl</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="ot">    ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span>   <span class="co">-- MIB</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">CUInt</span>      <span class="co">-- MIB size</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CChar</span>  <span class="co">-- old / current value buffer</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CSize</span>  <span class="co">-- old / current value buffer size</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CChar</span>  <span class="co">-- new value</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">CSize</span>      <span class="co">-- new value size</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">CInt</span>    <span class="co">-- result</span></span></code></pre></div>
<p>Observe the correspondence to the C function signature. Because this function is not referentially transparent (different calls with the same arguments could have different results) the result type is <code>IO CInt</code>.</p>
<h3 id="defining-the-mib">Defining the MIB <a href="#defining-the-mib">§</a></h3>
<p>The <code>hsc2hs</code> <code>(#const ...)</code> directive assists in the definition of the “current process executable” MIB:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">mib ::</span> [<span class="dt">CInt</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>mib <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>  [ (<span class="op">#</span>const <span class="dt">CTL_KERN</span>)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>  , (<span class="op">#</span>const <span class="dt">KERN_PROC</span>)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>  , (<span class="op">#</span>const <span class="dt">KERN_PROC_PATHNAME</span>)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>  , <span class="op">-</span><span class="dv">1</span>   <span class="co">-- current process</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>  ]</span></code></pre></div>
<h3 id="defining-getexecutablepath">Defining <code>getExecutablePath</code> <a href="#defining-getexecutablepath">§</a></h3>
<p>The <code>getExecutablePath</code> implementation closely follows the abstract procedure outlined above. So here it is, broken up with commentary (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/1276/diffs">full diff</a>):</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>getExecutablePath <span class="ot">=</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  withArrayLen mib <span class="op">$</span> \n mibPtr <span class="ot">-&gt;</span> <span class="kw">do</span></span></code></pre></div>
<p><a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Marshal-Array.html#v:withArrayLen"><code>withArrayLen</code></a> converts a Haskell list to a heap-allocated C array, passing it (as a pointer) <em>and</em> its length to the given continuation function. It will free the array after the continuation returns.</p>
<pre><code>    let mibLen = fromIntegral n
    alloca $ \bufSizePtr -&gt; do</code></pre>
<p>Convert <code>mibLen</code> from <code>Int</code> to <code>CInt</code>. <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Marshal-Alloc.html#v:alloca"><code>alloca</code></a> allocates memory to hold a <code>CSize</code> (<code>size_t</code>) and passes a pointer to that memory to the given continuation (and frees it when the continuation returns).</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>      status <span class="ot">&lt;-</span> c_sysctl mibPtr mibLen</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>                         nullPtr bufSizePtr nullPtr <span class="dv">0</span></span></code></pre></div>
<p>Call <code>sysctl(3)</code> with <code>oldp = NULL</code>.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>      <span class="kw">case</span> status <span class="kw">of</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>        <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>          reqBufSize <span class="ot">&lt;-</span> <span class="fu">fromIntegral</span> <span class="op">&lt;$&gt;</span> peek bufSizePtr</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>          allocaBytes reqBufSize <span class="op">$</span> \buf <span class="ot">-&gt;</span> <span class="kw">do</span></span></code></pre></div>
<p>If the initial call to <code>sysctl(3)</code> succeeded, <code>bufSizePtr</code> holds the required buffer size. <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Storable.html#v:peek"><code>peek</code></a> reads the value. Then <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Marshal-Alloc.html#v:allocaBytes"><code>allocaBytes</code></a> allocates that much space on the heap and passes the pointer to the continuation (and frees it after).</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a>            newStatus <span class="ot">&lt;-</span> c_sysctl mibPtr mibLen</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>                                  buf bufSizePtr nullPtr <span class="dv">0</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>            <span class="kw">case</span> newStatus <span class="kw">of</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>              <span class="dv">0</span> <span class="ot">-&gt;</span> peekFilePath buf</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>              _ <span class="ot">-&gt;</span> throwErrno <span class="st">&quot;getExecutablePath&quot;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>        _ <span class="ot">-&gt;</span> throwErrno <span class="st">&quot;getExecutablePath&quot;</span></span></code></pre></div>
<p>Call <code>sysctl(3)</code> again, this time using the new buffer (<code>buf</code>) as <code>oldp</code>. If successful, <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/System-Posix-Internals.html#v:peekFilePath"><code>peekFilePath</code></a> converts the C string to a Haskell <code>FilePath</code>. Although it is three continuations deep, this <code>FilePath</code> will be the return value. If either call to <code>sysctl(3)</code> failed, <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-C-Error.html#v:throwErrno"><code>throwErrno</code></a> throws an <code>IOError</code>.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>This was a small enhancement to GHC, but for me a critical one. I submitted a <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/1276">merge request</a>. It was quickly accepted and the fix was released in GHC 8.8.1.</p>
<p>Although I didn’t address it in my pull request, there is an error in the <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/System-Environment.html#v:getExecutablePath"><code>getExecutablePath</code></a> documentation. The <code>argv[0]</code> fallback implementation <em>does not</em> necessarily return an absolute pathname, as claimed. It would be better if platform-specific and fallback behaviours were fully explained.</p>
<p>If you would like to see fixes, enhancements or documentation improvements (<em>hint, hint</em>) in GHC, do not be afraid! GHC is a huge project. But after you work out what bits go where, it’s not necessarily hard to make changes. It helps a lot that it is written in Haskell! You can submit a pull request via the <a href="https://gitlab.haskell.org/ghc/ghc">Haskell GitLab instance</a> (you can sign in with GitHub credentials). Apart from this FreeBSD-related fix I have submitted a couple other changes to GHC. I have found the GHC developers are always friendly and willing to assist new and less experienced contributors.</p>
<p>By the way, I do not mean to trivialise GHC development. Some parts of it are truly daunting. But many parts are not. I believe that no Haskell developer—not even beginners—should be daunted by the <em>idea</em> of contributing to GHC, or believe that they cannot do it.</p>
<p>In terms of the <a href="https://downloads.haskell.org/ghc/8.10.1/docs/html/users_guide/ffi-chap.html">Haskell FFI</a>, this change captured a few interesting concepts, including:</p>
<ul>
<li>allocation memory of arbitrary size (<a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Marshal-Alloc.html#v:alloca"><code>alloca</code></a>)</li>
<li>converting Haskell lists to C arrays (<a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Marshal-Array.html#v:withArrayLen"><code>withArrayLen</code></a>)</li>
<li>reading data from pointers (<a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Foreign-Storable.html#v:peek"><code>peek</code></a>)</li>
<li>referencing constants via the <code>hsc2hs</code> <code>(#const ...)</code> directive</li>
</ul>
<p>The <em>“allocate, call continuation and cleanup”</em> pattern is prevalent in the Haskell <code>Foreign.*</code> modules. Even this small example goes three layers deep. More complex FFI use cases can go much deeper.</p>
<p>Important FFI topics that this case study did not engage include marshalling structs (something <code>hsc2hs</code> helps), <code>ForeignPtr</code>s and finalizers, and callbacks. So although I hope this case study may be instructive in <em>some</em> aspects of Haskell FFI usage, it is far from comprehensive.</p>]]></summary>
</entry>
<entry>
    <title>Refactoring using type classes and optics</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2020-12-21-refactoring-type-classes-optics.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2020-12-21-refactoring-type-classes-optics.html</id>
    <published>2020-12-21T00:00:00Z</published>
    <updated>2020-12-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="refactoring-using-type-classes-and-optics">Refactoring using type classes and optics</h1>
<p>Often when writing programs and functions, one starts off with concrete types that solve the problem at hand. At some later time, due to emerging requirements or observed patterns, or just to improve code readability and reusability, we refactor to make the code more polymorphic. The importance of not breaking your API typically ranges from <em>nice to have</em> (e.g. minimise rework but not otherwise necessary) to <em>paramount</em> (e.g. in a popular, foundational library). This post is a case study of a refactoring in the <a href="https://hackage.haskell.org/package/jose"><em>jose</em></a> library demonstrating how <em>type classes</em> help achieve API stability while admitting new use cases. Served with a side of <em>classy optics</em>.</p>
<h2 id="background-verifying-a-jws">Background: verifying a JWS <a href="#background-verifying-a-jws">§</a></h2>
<p>In the <em>jose</em> library, the <code>verifyJWS</code> function verifies a <em>JSON Web Signature (JWS)</em> object:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>verifyJWS</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">  ::</span>  ( <span class="dt">HasAlgorithms</span> a, <span class="dt">HasValidationPolicy</span> a</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>      , <span class="dt">AsError</span> e, <span class="dt">MonadError</span> e m</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>      , <span class="dt">HasJWSHeader</span> h, <span class="dt">HasParams</span> h</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>      )</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="ot">=&gt;</span> a</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">JWK</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">JWS</span> h</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  <span class="ot">-&gt;</span> m ()</span></code></pre></div>
<p><code>verifyJWS</code> is applied to a configuration value, a <em>JSON Web Key (JWK)</em> to use for validation, and the JWS, and returns <code>()</code> on success otherwise throws an error.</p>
<p>A JWS can have multiple signatures, each by a different key. If an application requires all signatures to be valid, it is difficult to perform the correct validation using the existing <code>verifyJWS</code> function. Unsurprisingly, someone <a href="https://github.com/frasertweedale/hs-jose/issues/35">raised an issue</a> to address this. Specifically, the issue asked for a way to use a <em>JWK Set</em> instead of a single <em>JWK</em>, where the JWK Set contains all the keys that can be used for validation (and possibly others). JWK Set is <a href="https://tools.ietf.org/html/rfc7517#section-5">defined by RFC 7515</a> as an array of JWKs. Its definition in <em>jose</em> is below (it is a <code>newtype</code> because it needs custom instances for JSON encoding/decoding).</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">JWKSet</span> <span class="ot">=</span> <span class="dt">JWKSet</span> [<span class="dt">JWK</span>]</span></code></pre></div>
<p>How can we support verification when the caller has a <code>JWKSet</code>? Do we add an alternative verification function that applies to <code>JWKSet</code> instead of <code>JWK</code>? I did not want multiple functions in the API for essentially the same thing. We could make the caller construct a singleton <code>JWKSet</code>, but changing the signature of <code>verifyJWS</code> would break the API, so we won’t do that either.</p>
<h2 id="looking-beyond-jwk-set">Looking beyond JWK Set <a href="#looking-beyond-jwk-set">§</a></h2>
<p>At first, we could only validate with a single <code>JWK</code> at a time. Now, we want to be able to handle a <code>JWKSet</code> too. So are there other “key-bearing” structures we might need to handle?</p>
<p>Indeed there are. One might want to use a <code>[JWK]</code>, <code>NonEmpty JWK</code> or other container types. Many container types constructors have an instance of <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Foldable.html"><code>Foldable</code></a>, so we could try to use that abstraction. This is rather boring, but it’s an additional valid use case. So, can we refactor <code>verifyJWS</code> to use <code>Foldable</code>?</p>
<p>It is a nice idea, but the answer is <em>no</em>. First, <code>Foldable t =&gt; t</code> has kind <code>(* -&gt; *)</code>, but <code>JWKSet</code> has kind <code>*</code>. Turning <code>JWKSet</code> into a generic container doesn’t make sense either. Second, we still want our function to work with a plain old JWK, which also has kind <code>*</code>.</p>
<p>At this point I realised that that if I want to make <code>verifyJWS</code> polymorphic, <em>and</em> support <code>JWK</code> and <code>JWKSet</code> and arbitrary containers as “key sources”, <em>and</em> avoid breaking the API, there was only one way forward. It was necessary to define a new type class to represent a “provider of keys”:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">JWKStore</span> a <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="ot">  keys ::</span> <span class="op">???</span></span></code></pre></div>
<p>What should the type of <code>keys</code> be? Conceptually, it would be applied to a <code>JWKStore a =&gt; a</code> and yield the <code>JWK</code> values contained within. For the validation use case there is no need to be able to add or update keys, i.e. it is read-only. <code>Fold a JWK</code> is a good fit for the requirement. A <a href="https://hackage.haskell.org/package/lens-4.15/docs/Control-Lens-Fold.html"><code>Fold</code></a> is a read-only <em>optic</em> that that can retrieve multiple (zero or more) values. The beauty of optics is that they can be composed together and <code>Fold</code> is no different. The <code>Fold</code> type is provided by the <a href="https://hackage.haskell.org/package/lens-4.19.2/docs/Control-Lens-Lens.html"><em>lens</em></a> library, along with a bunch of useful helper functions.</p>
<p>The key store interface (type class) and instances were defined as follows:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">JWKStore</span> a <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="ot">  keys ::</span> <span class="dt">Fold</span> a <span class="dt">JWK</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">JWKStore</span> <span class="dt">JWK</span> <span class="kw">where</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>  keys <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> <span class="dt">JWKStore</span> (t <span class="dt">JWK</span>) <span class="kw">where</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>  keys <span class="ot">=</span> folding <span class="fu">id</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">JWKStore</span> <span class="dt">JWKSet</span> <span class="kw">where</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>  keys <span class="ot">=</span> folding (\(<span class="dt">JWKSet</span> xs) <span class="ot">-&gt;</span> xs)</span></code></pre></div>
<p>(Note that the instance for <code>Foldable t =&gt; t JWK</code> requires the <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleInstances"><code>FlexibleInstances</code></a> GHC extension.)</p>
<p>The updated type signature for <code>verifyJWS</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>verifyJWS</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">  ::</span>  ( <span class="dt">HasAlgorithms</span> a, <span class="dt">HasValidationPolicy</span> a</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>      , <span class="dt">AsError</span> e, <span class="dt">MonadError</span> e m</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>      , <span class="dt">HasJWSHeader</span> h, <span class="dt">HasParams</span> h</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>      , <span class="dt">JWKStore</span> k</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>      )</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>  <span class="ot">=&gt;</span> a</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> k</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">JWS</span> h</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>  <span class="ot">-&gt;</span> m ()</span></code></pre></div>
<p>Existing code applying <code>verifyJWS</code> to a <code>JWK</code> works without changes. The only internal change that was needed was to apply <code>anyOf keys</code> to the existing test. (<a href="https://hackage.haskell.org/package/lens-4.19.2/docs/Control-Lens-Fold.html#v:anyOf"><code>anyOf</code></a> is a function provided in <em>lens</em> that returns <code>True</code> if any target of a <code>Fold</code> satisfies a predicate.) The line:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>validate s <span class="ot">=</span> verifySig p s k <span class="op">==</span> <span class="dt">Right</span> <span class="dt">True</span></span></code></pre></div>
<p>became:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>validate s <span class="ot">=</span> anyOf keys ((<span class="op">==</span> <span class="dt">Right</span> <span class="dt">True</span>) <span class="op">.</span> verifySig p s) k</span></code></pre></div>
<p>The technique of using type classes to select optics is called <em>classy optics</em>. The terms <em>classy lenses</em> and <em>classy prisms</em> are also used when referring to those kinds of optics specifically.</p>
<p>My goal was to support validation using a <code>JWKSet</code> without breaking the API or adding more functions. At this point the goal has been achieved. But I mentioned above that <code>JWKSet</code> and <code>Foldable t =&gt; t JWK</code> were the boring use cases. Let’s discuss some <em>interesting</em> ones!</p>
<h2 id="efficient-key-lookup">Efficient key lookup <a href="#efficient-key-lookup">§</a></h2>
<p>JWS signatures each have a <em>header</em> which, at minimum, indicates the algorithm used (the <code>"alg"</code> member). It can optionally contain other data including a Key ID (<code>"kid"</code>), thumbprint of an X.509 certificate containing the key used make the signature (<code>"x5t@S256"</code>), a JWK for the signing key (<code>"jwk"</code>), and so on. It is not a stretch that if your use case involves many signing keys, you would want to use data available from the signature header to speed up key lookup. Such techniques are common in applied cryptography where many keys are involved. For example, X.509 certificates contain an <em>Authority Key Identifier</em> field, and certificate databases usually provide efficient lookup by key identifier.</p>
<p>So in addition to being able to enumerate keys, we want <code>JWKStore</code> instances to potentially be able to look up keys based on data in the JWS header. I added another function to the type class to accomplish this, along with a sensible default implementation:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">JWKStore</span> a <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">  keys ::</span> <span class="dt">Fold</span> a <span class="dt">JWK</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="ot">  keysFor ::</span> (<span class="dt">HasJWSHeader</span> h) <span class="ot">=&gt;</span> h <span class="ot">-&gt;</span> <span class="dt">Fold</span> a <span class="dt">JWK</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>  keysFor _ <span class="ot">=</span> keys</span></code></pre></div>
<p>As an example, we can instantiate <code>JWKStore a =&gt; a</code> at a data type based on <code>HashMap</code>, where keys are indexed by key identifier (an arbitrary string). The <code>keysFor</code> function can efficiently search for a <code>JWK</code> based on the <code>"kid"</code> (Key ID) header parameter from the JWS header. If the <code>"kid"</code> parameter is missing, it yields all the <code>keys</code>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">KidMap</span> <span class="ot">=</span> <span class="dt">KidMap</span> {<span class="ot"> getMap ::</span> <span class="dt">HashMap</span> <span class="dt">String</span> <span class="dt">JWK</span> }</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">JWKStore</span> <span class="dt">KidMap</span> <span class="kw">where</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>  keys <span class="ot">=</span> folding getMap</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>  keyFor h <span class="ot">=</span> <span class="kw">case</span> preview (kid <span class="op">.</span> _Just <span class="op">.</span> param) h <span class="kw">of</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>    <span class="dt">Just</span> k  <span class="ot">-&gt;</span> folding (<span class="fu">lookup</span> k <span class="op">.</span> getMap)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> keys</span></code></pre></div>
<h2 id="a-jwkstore-is-not-just-for-jws">A <code>JWKStore</code> is not just for JWS <a href="#a-jwkstore-is-not-just-for-jws">§</a></h2>
<p>Recall the type of <code>keysFor</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">keysFor ::</span> (<span class="dt">HasJWSHeader</span> h) <span class="ot">=&gt;</span> h <span class="ot">-&gt;</span> <span class="dt">Fold</span> a <span class="dt">JWK</span></span></code></pre></div>
<p><code>h</code> has an explicit <code>HasJWSHeader</code> type class constraint, which allows the implementation to use any information available via that type class to decide what to do. For JWS we’re basically done, but we have forgotten about <em>JSON Web Encryption (JWE)</em>. The concept of looking up keys in a key database applies to JWE as well as JWS, but the <code>HasJWSHeader</code> constraint is not suitable when you have a <em>JWE header</em>.</p>
<p>But JWE headers and JWS headers consist of mostly the same fields, with the same types and semantics. So instead of having a type class constraint mentioning the kind of header, we can define a type class for every shared header parameter and constrain <code>keysFor</code> to <em>all of them</em>. I will use classy optics again (<a href="https://hackage.haskell.org/package/lens-4.19.2/docs/Control-Lens-Lens.html">lenses</a> this time). There are eleven header fields shared by JWS and JWE headers, but for brevity I’ll pretend there are only three.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">HasAlg</span> a <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="ot">  alg ::</span> <span class="dt">Lens&#39;</span> a (<span class="dt">HeaderParam</span> <span class="dt">JWA.JWS.Alg</span>)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">HasKid</span> a <span class="kw">where</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a><span class="ot">  kid ::</span> <span class="dt">Lens&#39;</span> a (<span class="dt">Maybe</span> (<span class="dt">HeaderParam</span> <span class="dt">String</span>))</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">HasX5tS256</span> a <span class="kw">where</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="ot">  x5tS256 ::</span> <span class="dt">Lens&#39;</span> a (<span class="dt">Maybe</span> (<span class="dt">HeaderParam</span> <span class="dt">Types.Base64SHA256</span>))</span></code></pre></div>
<p>The class definitions are mundane, as are the instances for <code>JWSHeader</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">HasAlg</span> <span class="dt">JWSHeader</span> <span class="kw">where</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>  alg f h<span class="op">@</span>(<span class="dt">JWSHeader</span> { _jwsHeaderAlg <span class="ot">=</span> a }) <span class="ot">=</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>    <span class="fu">fmap</span> (\a&#39; <span class="ot">-&gt;</span> h { _jwsHeaderAlg <span class="ot">=</span> a&#39; }) (f a)</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">HasKid</span> <span class="dt">JWSHeader</span> <span class="kw">where</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a>  kid f h<span class="op">@</span>(<span class="dt">JWSHeader</span> { _jwsHeaderKid <span class="ot">=</span> a }) <span class="ot">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>    <span class="fu">fmap</span> (\a&#39; <span class="ot">-&gt;</span> h { _jwsHeaderKid <span class="ot">=</span> a&#39; }) (f a)</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">HasX5tS256</span> <span class="dt">JWSHeader</span> <span class="kw">where</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true"></a>  x5tS256 f h<span class="op">@</span>(<span class="dt">JWSHeader</span> { _jwsHeaderX5tS256 <span class="ot">=</span> a }) <span class="ot">=</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true"></a>    <span class="fu">fmap</span> (\a&#39; <span class="ot">-&gt;</span> h { _jwsHeaderX5tS256 <span class="ot">=</span> a&#39; }) (f a)</span></code></pre></div>
<p>And finally, the updated <code>keysFor</code> type signature:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">JWKStore</span> a <span class="kw">where</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="ot">  keys ::</span> <span class="dt">Fold</span> a <span class="dt">JWK</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  keysFor</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="dt">HasAlg</span> h, <span class="dt">HasKid</span> h, <span class="dt">HasX5tS256</span>)</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>    <span class="ot">=&gt;</span> h</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Fold</span> a <span class="dt">JWK</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>  keysFor _ <span class="ot">=</span> keys</span></code></pre></div>
<h2 id="further-development">Further development <a href="#further-development">§</a></h2>
<p>I mentioned that the refactor I outlined in this post was not the end of the story. In fact, much more was done since I performed this initial refactoring:</p>
<ul>
<li><p>Implementing an <a href="https://github.com/frasertweedale/hs-jose/commit/e15ac3a34cf4a2f193f4b68345d8839c791ec2ed">effectful key store</a>, so that key lookup can perform I/O.</p></li>
<li><p>Allow the key store to <a href="https://github.com/frasertweedale/hs-jose/commit/dedcd82787bb533885211c3e7ff8f8bcd4adc3c9">inspect the JWS payload</a> during lookup. The motivating use case is to allow key lookup to read the JWT <code>"iss"</code> (Issuer) field.</p></li>
<li><p>Parameterised the key store <a href="https://github.com/frasertweedale/hs-jose/commit/2fc1b0b8e7196f90ce68bae93fde591812dd3f22">over the header type</a>. This allows implementations to use data from extended header types during key lookup.</p></li>
</ul>
<p>All of these features involved adding type parameters to the <code>JWKStore</code> class. Again, I achieved <strong>backwards compatible</strong> admittance of new features through increased generality.</p>
<p>However, parameterisation over the header type did make my use of classy lenses (as described in this post) obsolete. It is always beneficial to define classy lenses and use them to document (and restrict) functions that access specific fields of “types that have those fields”. But if the type is even more general than that, there’s nothing more to do.</p>
<p>Finally, implementing payload inspection was incompatible with having a unified key store interface for both decryption and verification keys. (You can’t use the payload to help choose a decryption key becaues it is encrypted!) Therefore I <a href="https://github.com/frasertweedale/hs-jose/commit/c08431fb31fb2a0bae86f6c4a5af20428e681230">renamed <code>JWKStore</code> to <code>VerificationKeyStore</code></a>.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>Let’s recap what this post was all about and draw some conclusions.</p>
<p>First, I discussed a requirement to generalise the <a href="https://hackage.haskell.org/package/jose"><em>jose</em></a> library’s JWS validation code. Previously, validation worked only with a single <code>JWK</code>. It needed to handle other use cases like <code>JWKSet</code> or key databases. I defined the <code>JWKStore</code> <strong>type class</strong>, which provides access to JWKs inside arbitrary data types, and refactored <code>verifyJWS</code> to use it. Instances for <code>JWK</code> and <code>JWKSet</code> are included. The refactor was a <strong>backwards-compatible generalisation</strong> of <code>verifyJWS</code> function, so existing code using <em>jose</em> continued to work without changes.</p>
<p>After this, I added another function to <code>JWKStore</code> to allow instances to support efficient key lookup. Finally, I observed that key databases are needed for JWE as well as JWS, and further generalised <code>JWKStore</code> to account for this.</p>
<p><strong>Classy optics</strong> were an important part of the implementation resulting from this refactoring effort. They were employed in two different ways. First, a <a href="https://hackage.haskell.org/package/lens-4.15/docs/Control-Lens-Fold.html"><code>Fold</code></a> provides a read-only, composable interface to the keys in a <code>JWKStore</code>. Second, I used classy <a href="https://hackage.haskell.org/package/lens-4.19.2/docs/Control-Lens-Lens.html">lenses</a> to parameterise key lookup over the fields that are common to both JWS and JWE headers. Classy lenses provide the generality we desire <em>and</em> improve readability by documenting the data that can be used during key lookup (and enforcing these restrictions).</p>
<p>Finally I briefly discussed subsequent developments of the key store interface in <em>jose</em>. The important thing to note is that substantive <strong>backwards-compatible</strong> enhancements were achieved through <strong>more generality</strong> (polymorphism).</p>
<p>So here are some final take-aways:</p>
<ul>
<li><p>Starting with code that handles a single use case is normal. But you may have to revisit and change that code (especially in libraries).</p></li>
<li><p>When you have to revisit some code to admit more use cases, it is worth having a good think about what other use cases exist. Discovering a more general (polymorphic) interface is preferable to multiple concrete interfaces. There will be <strong>less code</strong> to document and maintain, <strong>less potential confusion</strong> for users, and more potential for <strong>reuse</strong> (more use cases admitted).</p></li>
<li><p>Introducing a <strong>type class</strong> may let you admit new use cases while preserving backwards compatibility for library users. Further parameterising an existing type class can also achieve this. I have done this many times (in <em>jose</em> and other projects) and have <em>never</em> regretted introducing another type parameter.</p></li>
<li><p><strong>Classy optics</strong> enable reuse; more types can be used with the function, including types you didn’t even know about. And they document and enforce the data a function can access, which is helpful when dealing with record types.</p></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Adding section links to Hakyll articles with Text.Pandoc.Walk</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2020-12-10-hakyll-section-links.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2020-12-10-hakyll-section-links.html</id>
    <published>2020-12-10T00:00:00Z</published>
    <updated>2020-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="adding-section-links-to-hakyll-articles-with-text.pandoc.walk">Adding section links to Hakyll articles with <code>Text.Pandoc.Walk</code></h1>
<p>It is handy to be able to link to section headings in long articles. <a href="https://pandoc.org/">Pandoc</a> and <a href="https://jaspervdj.be/hakyll/">Hakyll</a> don’t do that out of the box. But they give you all the power you need to implement it yourself. In this post I’ll show you how.</p>
<h2 id="objective">Objective <a href="#objective">§</a></h2>
<p>The main objective is to provide links (HTML <code>&lt;a&gt;</code> element) to section headings. They should be located near or within the heading element. Having them in the document will make it easy for readers to grab a link to a specific section of the article. (I myself often want to do this!)</p>
<p>You could make the whole heading a link, but I like the approach that reveals a link when the pointer hovers over the heading. Some sites use a pilcrow (¶), pound (#) or a link symbol (🔗) as the link text. I will use a section sign (§).</p>
<h2 id="building-blocks">Building blocks <a href="#building-blocks">§</a></h2>
<p>Pandoc does set the <code>id</code> attribute of HTML heading elements to a value derived from the heading text. For example, one of my previous posts had a section headed <a href="2020-03-31-quickcheck-hedgehog.html#probabilities">Probabilities</a>. The resulting HTML for the heading is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">&lt;h2</span><span class="ot"> id=</span><span class="st">&quot;probabilities&quot;</span><span class="kw">&gt;</span>Probabilities<span class="kw">&lt;/h2&gt;</span></span></code></pre></div>
<p>The value of the <code>id</code> attribute will be the <code>href</code> target of the <code>&lt;a&gt;</code> element we create (with <code>#</code> prepended to make it a URI fragment).</p>
<p>Hakyll provides the <code>pandocCompilerWithTransform</code> function for compiling documents using Pandoc and applying an arbitrary transformation to them. It has the type:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>pandocCompilerWithTransform</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>Note the <code>(Pandoc -&gt; Pandoc)</code> argument. This is the tranformation function. It works with the <a href="https://hackage.haskell.org/package/pandoc-types-1.21/docs/Text-Pandoc-Definition.html#t:Pandoc"><code>Pandoc</code></a> native AST data type, rather than HTML or the input type (e.g. Markdown).</p>
<p>For constructing such a transformation, Pandoc provides the <a href="https://hackage.haskell.org/package/pandoc-types-1.21/docs/Text-Pandoc-Walk.html#v:walk"><code>Text.Pandoc.Walk</code></a> module and the <code>walk</code> function:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">walk ::</span> (<span class="dt">Walkable</span> a b) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b</span></code></pre></div>
<p><code>walk f x</code> walks the structure <code>x :: b</code> (bottom up) and replaces every occurrence of a value of type <code>a</code> with the result of applying <code>f :: (a -&gt; a)</code> to it.</p>
<p>There are many instances of <code>Walkable</code>. We are interested in the one that visits all the <code>Block</code> elements (that’s what headings are) in the <code>Pandoc</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Walkable</span> <span class="dt">Block</span> <span class="dt">Pandoc</span></span></code></pre></div>
<h2 id="putting-it-together">Putting it together <a href="#putting-it-together">§</a></h2>
<p>I needed a handful of Pandoc constructors to implement the transformation. The <code>Header</code> constructor (of the <code>Block</code> data type) represents a document (sub)heading with <code>Int</code> depth, attributes, and the list of <code>Inline</code> elements that constitute the header content.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Block</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>  <span class="op">...</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Header</span> <span class="dt">Int</span> <span class="dt">Attr</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>  <span class="op">...</span></span></code></pre></div>
<p>I also had to construct a <code>Link</code> (one of the cases of the <code>Inline</code> data type). A <code>Link</code> has attributes, content (<code>[Inline]</code>) and a target. I also used the <code>Str</code> and <code>Space</code> constructors.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Inline</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="ot">=</span> <span class="dt">Str</span> <span class="dt">Text</span>              <span class="co">-- ^ Literal text</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    <span class="op">...</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Space</span>                 <span class="co">-- ^ Inter-word space</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>    <span class="op">...</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Link</span> <span class="dt">Attr</span> [<span class="dt">Inline</span>] <span class="dt">Target</span></span></code></pre></div>
<p>By the way, <code>Attr</code> and <code>Target</code> are defined as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">-- id, classes and key-value pairs</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Attr</span> <span class="ot">=</span> (<span class="dt">Text</span>, [<span class="dt">Text</span>], [(<span class="dt">Text</span>, <span class="dt">Text</span>)])</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="co">-- URI, title</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Target</span> <span class="ot">=</span> (<span class="dt">Text</span>, <span class="dt">Text</span>)</span></code></pre></div>
<p>With these constructors in hand, here is the whole transformation function:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">addSectionLinks ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>addSectionLinks <span class="ot">=</span> walk f <span class="kw">where</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  f (<span class="dt">Header</span> n attr<span class="op">@</span>(idAttr, _, _) inlines) <span class="op">|</span> n <span class="op">&gt;</span> <span class="dv">1</span> <span class="ot">=</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="kw">let</span> link <span class="ot">=</span> <span class="dt">Link</span> nullAttr [<span class="dt">Str</span> <span class="st">&quot;§&quot;</span>] (<span class="st">&quot;#&quot;</span> <span class="op">&lt;&gt;</span> idAttr, <span class="st">&quot;&quot;</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="kw">in</span> <span class="dt">Header</span> n attr (inlines <span class="op">&lt;&gt;</span> [<span class="dt">Space</span>, link])</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>  f x <span class="ot">=</span> x</span></code></pre></div>
<p>Note that we only apply this change to headings of depth greater than one. I do not need to provide a link for the article title, which is at the top of the page. For all other headers, we add a <code>Link</code> to its inline content, where the target is the fragment pointing at the <code>idAddr</code> of the header itself.</p>
<p>To apply the transformation, I had to replace a single occurrence of:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">pandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>with:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>pandocCompilerWithTransform</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>        defaultHakyllReaderOptions</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>        defaultHakyllWriterOptions</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>        addSectionLinks</span></code></pre></div>
<h2 id="style">Style <a href="#style">§</a></h2>
<p>I want to hide the heading link unless the cursor is hovering over the heading. I would like to accomplish it with this small dose of CSS:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="in">:is(h2, h3, h4, h5, h6)</span> a {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>    <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    <span class="kw">color</span>: <span class="cn">grey</span><span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>    <span class="kw">visibility</span>: <span class="dv">hidden</span><span class="op">;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>}</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="in">:is(h2, h3, h4, h5, h6):hover</span> a {</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a>    <span class="kw">visibility</span>: <span class="dv">visible</span><span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>}</span></code></pre></div>
<p>The <code>is()</code> pseudo-class function matches anything that matches the selector arguments, avoiding tedious repetition. It is part of CSS <a href="https://www.w3.org/TR/selectors-4/#matches">Selectors Level 4</a>, which is still a draft. Firefox and Safari fully support it but unfortunately other browsers are <a href="https://caniuse.com/css-matches-pseudo">lagging behind</a>. So I am stuck with the tedious repetition for now:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>h2 a<span class="op">,</span> h3 a<span class="op">,</span> h4 a<span class="op">,</span> h5 a<span class="op">,</span> h6 a {</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>    <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>    <span class="kw">color</span>: <span class="cn">grey</span><span class="op">;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>    <span class="kw">visibility</span>: <span class="dv">hidden</span><span class="op">;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>}</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>h2<span class="in">:hover</span> a<span class="op">,</span> h3<span class="in">:hover</span> a<span class="op">,</span> h4<span class="in">:hover</span> a<span class="op">,</span> h5<span class="in">:hover</span> a<span class="op">,</span> h6<span class="in">:hover</span> a {</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a>    <span class="kw">visibility</span>: <span class="dv">visible</span><span class="op">;</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a>}</span></code></pre></div>
<p>I also used <code>text-decoration</code> and <code>color</code> to make the link appearance clean and understated.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>As a result of this change, the HTML emitted for section headers (of depth &gt; 1) looks like:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">&lt;h2</span><span class="ot"> id=</span><span class="st">&quot;probabilities&quot;</span><span class="kw">&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>  Probabilities <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;#probabilities&quot;</span><span class="kw">&gt;</span>§<span class="kw">&lt;/a&gt;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a><span class="kw">&lt;/h2&gt;</span></span></code></pre></div>
<p>You can experience the results for yourself, right here on this page (and in my other posts). You can also <a href="https://github.com/frasertweedale/blog-fp/commit/fe72af9144fea3ece5295ac5446f647560119088">view the commit</a> that implements this feature.</p>
<p>There’s not much else to say, really. Pandoc is still awesome. Hakyll is still awesome. And I am very happy with the results of this little enhancement. Go forth and pilcrow-ise your Hakyll sites!</p>]]></summary>
</entry>
<entry>
    <title>Migrating from QuickCheck to Hedgehog: mixed results</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2020-03-31-quickcheck-hedgehog.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2020-03-31-quickcheck-hedgehog.html</id>
    <published>2020-03-31T00:00:00Z</published>
    <updated>2020-03-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="migrating-from-quickcheck-to-hedgehog-mixed-results">Migrating from QuickCheck to Hedgehog: mixed results</h1>
<p>I’ve known about <a href="https://hackage.haskell.org/package/hedgehog">Hedgehog</a> from its early days. Having used QuickCheck before Hedgehog arrived, I am familiar with QuickCheck’s pain points, in particular the lack of automatic shrinking and the frustrations of its type class-driven approach. Hedgehog was designed to—and does—solve these problems.</p>
<p>Yet, being already a user of QuickCheck in most of my Haskell projects, I did not feel a need to make the switch. “Some day, but not today”. And finally, the day has come. In this post I will explain the catalyst and the results of the switch including a surprising and (for me) detrimental behavioural difference between QuickCheck and Hedgehog.</p>
<h2 id="background">Background <a href="#background">§</a></h2>
<p><a href="https://hackage.haskell.org/package/purebred-email"><em>purebred-email</em></a> is a comprehensive mail processing library. It has plenty of tests, example and property-based, including serialiser/parser round-trip tests. Email has a 7-bit (ASCII) wire format; there are various mechanisms for including 8-bit data in messages. For including 8-bit data in header values, <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a> defines the <code>encoded-word</code> mechanism. Serialised Unicode data in the <code>To</code> and <code>From</code> headers can look something like this:</p>
<pre><code>MIME-Version: 1.0
From: =?utf-8?B?0JDQu9C40YHQsA==?= &lt;alice@example.com&gt;
To: =?utf-8?Q?Riob=C3=A1rd_Baker?= &lt;bob@example.net&gt;
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Content-Type: text/plain; charset=us-ascii

Hello, Bob!</code></pre>
<p>Recently someone filed an <a href="https://github.com/purebred-mua/purebred-email/issues/50">issue</a> that <em>purebred-email</em> was not encoding the display name part of email addresses properly. It was indeed the case that raw UTF-8 data was appearing in the rendered message. Alongside a candidate fix I took the opportunity to add a round-trip QuickCheck property that would test serialisation and re-parsing of an email address with arbitrary mailboxes in the <code>From</code> header. The display name part of the mailbox could include Unicode characters. The property, and some related generators, were defined as follows:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">prop_messageRoundTrip ::</span> <span class="dt">Property</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>prop_messageRoundTrip <span class="ot">=</span> forAll genMailbox <span class="op">$</span> \mailbox <span class="ot">-&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    l <span class="ot">=</span> headerFrom defaultCharsets</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    msg <span class="ot">=</span> set l [mailbox] (createTextPlainMessage <span class="st">&quot;Hello&quot;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  <span class="kw">in</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    (view l <span class="op">&lt;$&gt;</span> parse (message mime) (renderMessage msg))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    <span class="op">==</span> <span class="dt">Right</span> [mailbox]</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="ot">genDomain ::</span> <span class="dt">Gen</span> <span class="dt">Domain</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>genDomain <span class="ot">=</span> <span class="dt">DomainDotAtom</span> <span class="op">&lt;$&gt;</span> genDotAtom</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="ot">genDotAtom ::</span> <span class="dt">Gen</span> (<span class="dt">NonEmpty</span> <span class="dt">B.ByteString</span>)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>genDotAtom <span class="ot">=</span> fromList <span class="op">&lt;$&gt;</span> listOf1 fragment</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>  fragment <span class="ot">=</span> B.pack <span class="op">&lt;$&gt;</span> listOf1 atext</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>  atext <span class="ot">=</span> arbitrary <span class="ot">`suchThat`</span> isAtext</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a><span class="ot">genLocalPart ::</span> <span class="dt">Gen</span> <span class="dt">B.ByteString</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>genLocalPart <span class="ot">=</span> fold <span class="op">.</span> intersperse <span class="st">&quot;.&quot;</span> <span class="op">&lt;$&gt;</span> genDotAtom</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a><span class="ot">genAddrSpec ::</span> <span class="dt">Gen</span> <span class="dt">AddrSpec</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>genAddrSpec <span class="ot">=</span> <span class="dt">AddrSpec</span> <span class="op">&lt;$&gt;</span> genLocalPart <span class="op">&lt;*&gt;</span> genDomain</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a><span class="ot">genMailbox ::</span> <span class="dt">Gen</span> <span class="dt">Mailbox</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a>genMailbox <span class="ot">=</span> <span class="dt">Mailbox</span> <span class="op">&lt;$&gt;</span> arbitrary <span class="op">&lt;*&gt;</span> genAddrSpec</span></code></pre></div>
<p>Note that I explicitly define and directly use the generators. Defining <code>Arbitrary</code> instances for these types was too restrictive. I also felt it would be difficult to implement accurate and useful shrinking heuristics for these domain objects.</p>
<p>And this is where the fun began.</p>
<h2 id="from-quickcheck-to-hedgehog">From QuickCheck to Hedgehog <a href="#from-quickcheck-to-hedgehog">§</a></h2>
<p>By default, QuickCheck checks properties 100 times with random inputs. I had a hunch that for this property, 100 was not enough, so I overrode the default to check <code>prop_messageRoundTrip</code> 10,000 times. And hey, what do you know, QuickCheck found a bug:</p>
<pre><code>    message round trip with From header:        FAIL (3.89s)
      *** Failed! Falsified (after 1090 tests):
      Mailbox (Just &quot;\r\n\617309\990252F\SO{\36170\EOTE\rjxHg\NUL\375521\40710\878394\812276%\273790\USU2
\NAK\DC1\FS=K#\SO\SYNAIA\37830\617194jP\201749\1025883cV3\98741\RS\\=\r5H&#39;^o\109453\925605\247522&lt;\775764
\1029678I%\\.{e\1108491R9MT\942184KJ\EOTj\1080860\SOwB\162509\ENQ&quot;) (AddrSpec &quot;Ad+j3dRo21+%_fQ|_^1SnUQhwq
p7z2zimd}{|KaGI#F^4kIk9jO.%C6SUZ=$vNfiprz|O4j.bE1rAcfFP&amp;9/C3L.OT-QDI=De5kF$qD=4dfNa`ReRBSX`J-PB}xaYIbEoCm
IMsE{}.tvrjkuw=6=--dX|33Y/v+~kNbhGguS.xCM7bX2+|kH=lvRY3Z#QyGUb++ZvMI66e^3/yMM`K30Lud_kGnm`4cfdKv.VGLCF#.{
!uVXd*|KI&amp;A2oEa2awZ6oIrAUckzM9%qgz}A|1O9Sd~WdJ*plt?3$OI=WmU7B`.hlpz1&#39;|6JtBuYoCpWwsL7m+d7vX?xDOSjbr/0FOxr|
2N?p$nQ**P*R6pj2HfubS6VW-lap33WI^.MPYiQcw3SUfKVo0eU~zX3W#xCG4fxV~sswK&amp;O2E9.0NXG_4zOJyWvv=-7`2e*jydY=sQeET
h9=_~ypqW9D.xarK{XeP`#9gUJ2O!Jg7pb$t037mO3rjAwDKxs/VZZy}1{3NIzzuyl!cF~sCQAzS---6HtLvmEgYhWjijVH.Svl`sV#-y
/}B8gUFK&#39;l?Bnoj^pU-MI.Vrw{WFXLbZ09GW!cdtPObmhz}?v8xzz+LR`U?cBP!zuI=iRTK}_m#9PGJNH6WZcn3u4td-8y{rj_r^DKY{q
K*w+kK.%x.cLIek|fzQ9dJLpaVI|fJx{!-~sFO-}Q_?7F#-naFR4s7#7=Y_U-%HXhKsK1qJC.{P3*F7==MCX6sGU^q5sh9M*L0fFF9knT
h^A6ZAXYLS$BX}/31sU|}+Q!cdj#hGFRqcjp~IoHw|JGKK}/6Y?E%+cop.*&amp;`rJM87aH!Nph&amp;6pMU-U+Z3o-7L.HAoHW#-vfadyy+AA?O
9LI2hU5xfkGAwz/T-7$Wr=&#39;x7-&#39;+}AZ6yUGB.!&amp;nq7`ViGdFM#Er0}yJtWFRi#/zNMf!_gtBitQH{=G}PefcLcPF^%S3K6qqsl.?NqTE0
e&amp;$%GHS.7AGCSviyx*-Bq|hA6+&#39;!#{foj!$i.7evxp3cwoST#Bbz4CmJeAyUHMqsgnbW&amp;fG08gOoBqBIuda#$q}G3e1G8f!b5w^_A}C.!
=HPqzE1.4enC.QrCTo*~PE%`}5Q-/PPNXw|3!%^*s$YaFdvjPVegSJ4vuJAa6o{A-5pfW#-IT1}r?dw&#39;y.`SzR&amp;X#G%zFF%d%/wWS1cyZ
f%WXox_j^qew1?4P!uBqb&amp;&amp;XxoLk*d*gOg-Uh/WG~#3Zqq`ZSw#}Cu&#39;2&amp;JK.83YmO!v0g$bNSixtQpV!-##0VHRC#flu~_`.*w^/HWm7s
oMfEy^Sh082g3*R!vlPFCWZ7wk%J}GLxZcNut!%8p?+Y|A9}&#39;Za5-{kkGMMH|G%dRcbL|.IQDP1VzCY&#39;p&#39;h+~{`|_Aba*Fl5ccRJhWyGC
T._4#I%7TXR0FOH0+T%u67Per++r?kePkhWExZ6co{i#oBkZ6U&amp;XHbrxV5Xy{#Dk#0|%0CgWy*{8t*+.&amp;|}?/*i/Zp{LYJgWISJNqNkKx
nZtPo04/MTH&#39;.$R7ck6kvg2&amp;vsCwqPLo`H%E*y$7`sw~9d*#53M4%KKw|qlN1h`*P2#&amp;=6U{exw^&#39;I^|?/`=-WOip/Cn{5`h&#39;1X.l3B^N
G?UP6lbO-%Dh7.|obTf3fH252SHx62hpeM8*Va}2Gv+5z`Pnun?EDL.Wx-EkiTsfsc05E3X`%WAtO3mgoc$TfFrX&#39;JsSa_+k$/Hw8Mou=
hh^7B2206}PSj%~W966_-VB.4w2.khd0&#39;i^3Ie!#u%Lo0U54HctD1eJdHR2q.mZKa6b$|UT26dz$|eMg}$Qo+k`ron_nT~#32L9`P8y7.
ft7tN{Lf}S&amp;85#|32O6IJA3jE4gCz=ZN^1&amp;Z9uDaUl|KJ3jGPHD.R~c~v!-rXY$Dx{MsJ&#39;f~gz&amp;4*UgWe|aO=8BQZF$gk_U1W_oy/TVJ2
C9W%.Y%#hgwGxU?-g&amp;PhoG+RfflLU-ad-m-%/`m+n-c+^/8^9kj&amp;dG={0+bgkw0xrJh{PF1cKkWbN&amp;.k1jtJXaqp442SHMenuYf2&amp;R3VV
~~{Q}.iPFaih}fhC6yP%^&#39;+AugNXl?jh*pLJb+U_0pz3+`QP3w9SS!EnH!0m`NZzbQ4%Moa.N}qMwRJnb#L{BE2d?+*-rmdL!YnV7E^EO
tbQS~dmT5AVEOeHhz8*IchVaLl{Xvdubm0&amp;XYO6GSzH|gO%#wO~Kl{h.AZ2N#$r&amp;wKk-msV8ybJ9$LQ.*2=u+0pws3+8bdFdJJ&amp;E/%Qa=
BmN?rl~QZfxQq~|Vz*#s_ZTs4Kp^%2{0!cJOSI9|Dk.WL%H0pRgY.Ht?h{Xz3L!A^-AIcT{=U+YNssZnaJ%%=}8Ylp6zO.3L5SNnB&amp;6G+
b`6{e#p5565M4WDriUH4!IByU?US{TkQf5c8WP3}XirW1RJDT~-e=u!v4mj63QBaYYr6.rx*NJ8olK+Xu3Z4&amp;YI8C2?x_6`.M%6G.TX!U
n0VOsNM8~Bss8XKA|.i9k}99EeOx%JqIXc+{u.Gu9Ns=d1}HasDj^IzFDSa5$SzeK.4hwf#a1Fcewp_PXOC-VKJuKz.8mG+Kjy4Pgxwm4
`rv5lP%8{jEfjhsj9t$zsp4mb85J_ZyXbyFgWo2t1RT&#39;-ReGCSh.ypHp!C/3UiFGJ_/#A|YSL?{#5b~`U0Y$xVvh9taFi#&#39;NJcIy5H&#39;3D
*I.?KJ9ngID*l2M.Cg`*~yCdu{pXYG**8slMmHXA.zgw.9v-jzj&#39;xti{E|+Pg~nT+b+w6BkJTx53|^Q6U^Ll#.COxJYvKowVc3Oy_l!6^
2&#39;4YtmFZHYL-e1U|e2c+aAMJTFNKbeEUMfCpjEX%$$?oS}^.9F33J$_1ALwi*+MNU&amp;qvsLQ/WI^UnCd4+.Z/%xt.fMCbDzRJcZFN#=Qvi
_C6Z|4LCf&amp;0a4iM-Dg^|&amp;YVr8wIfV0z$.1gQXg3__l2%ir-vXIQ{0pf}k!Ejx+#L|j_X6DBTit`s{2.Cx2d63gz&amp;9IdkD6klHwx_{vKCu
D9{}Pb7GvTqL4c6sAJ&#39;H&#39;XaxJa8-3.-WAewPr0h.|SwcuIFliH5-Ro8zigOb=92^ZR%aM8B5I$wbNrU}XB4#dYYAIlBP1Cx~?Fw7BqIV_
ri^.z_znwUBWdhYK7^JYG0$F#Bk-rc%rfy*XiazKA2OuMs.k&quot; (DomainDotAtom (&quot;Ut||VyF|OIoq`9h`6!`_nL|s+b5OLb}VM!Qe&#39;+
1&quot; :| [&quot;UtT9C?7!stiF&amp;i&quot;,&quot;u&quot;,&quot;52IO&#39;0S9wrvodlpL`}M^N#K|6Hliu!hd`sk7t&amp;wwD0S%H#ZWcvIf+ZCn{C$4Q38NZ/{hn2GdL0/l
ZExv&quot;,&quot;wP{kH9SF2v?hH`81GI{aJyGmje3d1o`DRS4r4&#39;rMzXs&quot;])))
      Use --quickcheck-replay=822386 to reproduce.</code></pre>
<p>Without shrinking, the counterexample was a wall of text. It was good to know that there was a problem, but I didn’t even attempt to make any sense of it. I knew that this was the moment. It was time to unleash the Hedgehog.</p>
<p>Switching to Hedgehog was a simple mechanical translation. The updated definitions follow.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">prop_messageRoundTrip ::</span> <span class="dt">Property</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>prop_messageRoundTrip <span class="ot">=</span> property <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  from <span class="ot">&lt;-</span> forAll genMailbox</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    l <span class="ot">=</span> headerFrom defaultCharsets</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    msg <span class="ot">=</span> set l [from] (createTextPlainMessage <span class="st">&quot;Hello&quot;</span>)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>  (view l <span class="op">&lt;$&gt;</span> parse (message mime) (renderMessage msg))</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    <span class="op">===</span> <span class="dt">Right</span> [from]</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="ot">genDomain ::</span> <span class="dt">Gen</span> <span class="dt">Domain</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>genDomain <span class="ot">=</span> <span class="dt">DomainDotAtom</span> <span class="op">&lt;$&gt;</span> genDotAtom</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a><span class="ot">genDotAtom ::</span> <span class="dt">Gen</span> (<span class="dt">NonEmpty</span> <span class="dt">B.ByteString</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>genDotAtom <span class="ot">=</span> Gen.nonEmpty (Range.linear <span class="dv">1</span> <span class="dv">5</span>) fragment</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>  fragment <span class="ot">=</span> Gen.utf8 (Range.linear <span class="dv">1</span> <span class="dv">20</span>) atext</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>  atext <span class="ot">=</span> Gen.filter isAtext Gen.ascii</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a><span class="ot">genLocalPart ::</span> <span class="dt">Gen</span> <span class="dt">B.ByteString</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>genLocalPart <span class="ot">=</span> fold <span class="op">.</span> intersperse <span class="st">&quot;.&quot;</span> <span class="op">&lt;$&gt;</span> genDotAtom</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a><span class="ot">genAddrSpec ::</span> <span class="dt">Gen</span> <span class="dt">AddrSpec</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>genAddrSpec <span class="ot">=</span> <span class="dt">AddrSpec</span> <span class="op">&lt;$&gt;</span> genLocalPart <span class="op">&lt;*&gt;</span> genDomain</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true"></a><span class="ot">genMailbox ::</span> <span class="dt">Gen</span> <span class="dt">Mailbox</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true"></a>genMailbox <span class="ot">=</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true"></a>  <span class="dt">Mailbox</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true"></a>  <span class="op">&lt;$&gt;</span> Gen.maybe (Gen.text (Range.linear <span class="dv">0</span> <span class="dv">100</span>) Gen.unicode)</span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true"></a>  <span class="op">&lt;*&gt;</span> genAddrSpec</span></code></pre></div>
<p>As you can see there are no structural changes. Indeed, several of the definitions did not change at all (except that the name <code>Gen</code> now refers to a different type).</p>
<p>I ran the tests again, expecting Hedgehog to find the bug and, thanks to integrated shrinking, present me with a digestable counterexample. But the tests passed. Even after 10,000 iterations it could not detect the bug:</p>
<pre><code>message round trip with From header:             OK (4.75s)
  ✓ message round trip with From header passed 10000 tests.</code></pre>
<h2 id="generator-bias">Generator bias <a href="#generator-bias">§</a></h2>
<p>Hedgehog’s inability to find a counterexample surprised me, and several other people in <code>#bfpg</code>. The search for answers soon led me to the source code, where all was laid bare. Hedgehog’s <code>Gen.unicode</code> has a uniform distribution over all Unicode characters:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co">-- | Generates a Unicode character, excluding noncharacters</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">--   and invalid standalone surrogates:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">--   @&#39;\0&#39;..&#39;\1114111&#39; (excluding &#39;\55296&#39;..&#39;\57343&#39;,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">--    &#39;\65534&#39;, &#39;\65535&#39;)@</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="co">--</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="ot">unicode ::</span> (<span class="dt">MonadGen</span> m) <span class="ot">=&gt;</span> m <span class="dt">Char</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>unicode <span class="ot">=</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>    s1 <span class="ot">=</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>      (<span class="dv">55296</span>, enum <span class="ch">&#39;\0&#39;</span> <span class="ch">&#39;\55295&#39;</span>)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>    s2 <span class="ot">=</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>      (<span class="dv">8190</span>, enum <span class="ch">&#39;\57344&#39;</span> <span class="ch">&#39;\65533&#39;</span>)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>    s3 <span class="ot">=</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>      (<span class="dv">1048576</span>, enum <span class="ch">&#39;\65536&#39;</span> <span class="ch">&#39;\1114111&#39;</span>)</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>  <span class="kw">in</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a>    frequency [s1, s2, s3]</span></code></pre></div>
<p>Whereas QuickCheck’s <code>Char</code> generator, although it can generate any Unicode character, has a heavy bias to the ASCII codepoints (0–127):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Char</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>  arbitrary <span class="ot">=</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    frequency</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>      [(<span class="dv">3</span>, arbitraryASCIIChar),</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>       (<span class="dv">1</span>, arbitraryUnicodeChar)]</span></code></pre></div>
<p>After discovering this difference I implemented an equivalent Hedgehog generator to use instead of <code>Gen.unicode</code>, and updated <code>genMailbox</code> to use it:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">unicodeCharAsciiBias ::</span> <span class="dt">Gen</span> <span class="dt">Char</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>unicodeCharAsciiBias <span class="ot">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  Gen.frequency [(<span class="dv">3</span>, Gen.ascii), (<span class="dv">1</span>, Gen.unicode)]</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a><span class="ot">genMailbox ::</span> <span class="dt">Gen</span> <span class="dt">Mailbox</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>genMailbox <span class="ot">=</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>  <span class="dt">Mailbox</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>  <span class="op">&lt;$&gt;</span> Gen.maybe (Gen.text (Range.linear <span class="dv">0</span> <span class="dv">100</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>                 unicodeCharAsciiBias)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>  <span class="op">&lt;*&gt;</span> genAddrSpec</span></code></pre></div>
<h2 id="shrink-to-win">Shrink to win <a href="#shrink-to-win">§</a></h2>
<p>This time Hedgehog found the counterexample. The automatic shrinking produced a minimal counterexample and Hedgehog presented its findings:</p>
<pre><code>message round trip with From header:                  FAIL (47.81s)
 ✗ message round trip with From header failed at tests/Message.hs:106:3
   after 866 tests and 69 shrinks.

       ┏━━ tests/Message.hs ━━━
   100 ┃ prop_messageRoundTrip :: Property
   101 ┃ prop_messageRoundTrip = property $ do
   102 ┃   from &lt;- forAll genMailbox
       ┃   │ Mailbox (Just &quot;\r\n&quot;) (AddrSpec &quot;!&quot; (DomainDotAtom (&quot;!&quot; :| [])))
   103 ┃   let
   104 ┃     l = headerFrom defaultCharsets
   105 ┃     msg = set l [from] (createTextPlainMessage &quot;Hello&quot;)
   106 ┃   (view l &lt;$&gt; parse (message mime) (renderMessage msg)) === Right [from]
       ┃   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       ┃   │ ━━━ Failed (- lhs) (+ rhs) ━━━
       ┃   │   Right [
       ┃   │       Mailbox
       ┃   │ -       Just &quot;=?us-ascii?Q? ?=&quot;
       ┃   │ +       Just &quot;\r\n&quot;
       ┃   │         AddrSpec &quot;!&quot; (DomainDotAtom (&quot;!&quot; :| []))
       ┃   │     ]</code></pre>
<p>Isn’t the presentation—that neatly formatted diff of the data structure—just <em>gorgeous</em>?! It is easy to see the problem: <em>purebred-email</em> did not round-trip an email address correctly when then display name was (perhaps more generally, <em>contained</em>) a carriage return followed by a newline/line feed (CRLF). <code>"\r\n" !@!</code> is a pretty bonkers email address but the types and grammar do permit it so <em>purebred-email</em> must handle it correctly.</p>
<h2 id="probabilities">Probabilities <a href="#probabilities">§</a></h2>
<p>So now we can see why QuickCheck was able to find a counterexample and Hedgehog (when using <code>Gen.unicode</code>) was not. It is a matter of probability distribution. The probability of selecting CR followed by LF from a uniform distribution of all 1112062 unicode characters is 1 in 1236681891844, whereas for the 75% ASCII distribution (noting that the other 25% for all Unicode characters <em>also</em> includes the ASCII codepoints) is 2782747776649 over 81047184463888384 or roughly 0.0000433491.</p>
<p>Note that 0.0000433491 is a bit less than half of 1 in 10000. We expect then that if we were executing 10000 tests, the framework would find this counterexample less than half the time. But this probability is for two-character sequences. The probability of a CRLF subsequence occuring in a longer string of randomly selected characters is, intuitively, much greater. But my probability-fu is not strong enough to work all that out. As it happens, with the ASCII-biased distribution both QuickCheck and Hedgehog usually find the counterexample somewhere around the 1000th test (but sometimes much sooner).</p>
<h2 id="shrinking-performance">Shrinking performance <a href="#shrinking-performance">§</a></h2>
<p>Automatic shrinking is a joy. But Hedgehog’s shrinking is slow compared to QuickCheck. In the example above, it took almost a whole minute, most of which was the shrinking (compare with the earlier <code>Gen.unicode</code> example which tested the property 10,000 times in 4.7 seconds).</p>
<p>I don’t see this has a problem: if it takes a long time to find a minimal counterexample, so be it. The tradeoff is worth it. And it is only the shrinking that is slow. If your tests are passing (and hopefully they do, most of the time) then there is no penalty.</p>
<p>While I was discussing these things, one person shared with me that Hedgehog ate all their memory during shrinking, and crashed. So the slowness might be due to space usage (at least in part). I didn’t experience any crashes (yet) but it was prudent to share this anecdote. Your mileage may vary.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>Hedgehog is great. It solves the major pain points of QuickCheck. Automated shrinking for all generators is a killer feature, but it is computationally (and/or space) expensive, and might eat all your memory and crash (I have not experienced this myself). The pretty output with a nicely formatted diff of the data structure makes it easier to comprehend the counterexamples than QuickCheck’s <code>Show</code>-based output.</p>
<p>Converting from QuickCheck to Hedgehog is a breeze; a simple mechanical translation. But <strong>do not blindly convert</strong>. I would probably never have found this bug if I had already converted <em>purebred-email</em> to Hedgehog, because of a critical difference in the distribution of one of the generators. When you are converting, pay careful attention to the behaviour of the generators, especially if they produce character or string types.</p>
<p>The issue I experienced comes down to a lack of documentation. Arguably QuickCheck is the bad guy in this tale: the non-uniform distribution should have been documented. But it would be good for <em>all</em> generators or <code>Arbitrary</code> instances to say something about their distribution, even if it’s just <em>“uniform distribution”</em>.</p>
<p>I always intended to start using Hedgehog, and expected that it would be a gradual transition. At time of writing, QuickCheck and Hedgehog are happily coexisting in the <em>purebred-email</em> test suite. From now on any new test modules I write will probably use Hedgehog, and older modules will be converted any time I bump against QuickCheck’s shrinking or type class-related rough edges.</p>]]></summary>
</entry>

</feed>
