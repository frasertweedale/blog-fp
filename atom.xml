<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>pureblog</title>
    <link href="https://frasertweedale.github.io/blog-fp/atom.xml" rel="self" />
    <link href="https://frasertweedale.github.io/blog-fp" />
    <id>https://frasertweedale.github.io/blog-fp/atom.xml</id>
    <author>
        <name>Fraser Tweedale</name>
        <email>frase@frase.id.au</email>
    </author>
    <updated>2022-05-10T00:00:00Z</updated>
    <entry>
    <title>Better executable path queries in GHC 9.4</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2022-05-10-improved-executable-path-queries.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2022-05-10-improved-executable-path-queries.html</id>
    <published>2022-05-10T00:00:00Z</published>
    <updated>2022-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="better-executable-path-queries-in-ghc-9.4">Better executable path queries in GHC 9.4</h1>
<p>I <a href="2021-01-01-fixing-getExecutablePath-FreeBSD.html">previously wrote about</a>
<a href="https://downloads.haskell.org/ghc/9.4.1-alpha1/docs/html/libraries/base/System-Environment.html#v:getExecutablePath"><code>System.Environment.getExecutablePath</code></a> and how
I fixed it on FreeBSD. Unfortunately, this function still has some
problems. In this post I explain the problems and introduce
<a href="https://downloads.haskell.org/ghc/9.4.1-alpha1/docs/html/libraries/base/System-Environment.html#v:executablePath"><code>executablePath</code></a>, the solution arriving in
<em>base-4.17.0.0</em> (GHC 9.4.1).</p>
<h2 id="problems-with-getexecutablepath">Problems with <code>getExecutablePath</code> <a href="#problems-with-getexecutablepath" class="section">§</a></h2>
<p><code>getExecutablePath :: IO FilePath</code> is a way for a Haskell program to
query the path to its own executable. It has several significant
problems:</p>
<ul>
<li><p><strong>Not all operating systems provide a reliable mechanism to query
the executable path.</strong> Where an OS-specific implementation does
not exist, <code>getExecutablePath</code> falls back to providing the value
of <code>argv[0]</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12377">#12377</a>). The invoking process chooses the
value; it does not necessarily represent the path to the
executable. It might represent or resolve to a different
executable. <code>argv</code> could even be an empty array, in which case
<code>getExecutablePath</code> throws an exception!</p></li>
<li><p><strong>Divergent behaviour when executable has been deleted.</strong> When we
say “executable” we mean “<em>file which contains <strong>program</strong> text,
which the OS can load and execute (becoming a <strong>process</strong>)</em>”.
That file could be deleted while the process is running. In this
case, the behaviour of <code>getExecutablePath</code> differs by platform.
On FreeBSD it throws an exception. On Linux it returns the
original <code>FilePath</code> suffixed with <code>" (deleted)"</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/10957">#10957</a>).
These differences impede cross-platform development.</p></li>
<li><p><strong>The documentation is wrong.</strong> Until I fixed it, the
documentation for <code>getExecutablePath</code> stated, <em>“Returns the
absolute pathname of the current executable.”</em> It didn’t explain
any of the discrepancies mentioned in the preceding points.
Programmers can easily stumble into the unsafe behaviour (I did).</p></li>
</ul>
<h2 id="type-of-the-solution">Type of the solution <a href="#type-of-the-solution" class="section">§</a></h2>
<p>Types are an essential tool for modelling a problem and guiding the
development of a solution. The problems with <code>getExecutablePath</code>
reveal that:</p>
<ul>
<li><p>Some OSes provide a mechanism to query the executable path, and
some do not. This is a static property of the platform; it does
not change over the lifetime of a process.</p></li>
<li><p>The query mechanism (if it exists) might be unable to return a
result. For example, when the executable file has been deleted.
The result may vary during the lifetime of a process.</p></li>
</ul>
<p>The <code>Maybe a</code> type models the existence or absence of a value:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a</span></code></pre></div>
<p>Accordingly, a suitable type to model this problem is:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">executablePath ::</span> <span class="dt">Maybe</span> (<span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">FilePath</span>))</span></code></pre></div>
<p>The outer <code>Maybe</code> models the presence or absence of a query
mechanism. The query itself has the type <code>IO (Maybe FilePath)</code>.
The inner <code>Maybe</code> models that the query might be unable to return
a valid <code>FilePath</code>.</p>
<p>The type is also a kind of (machine-checked) documentation. It
reveals things that the written documentation for
<code>getExecutablePath</code> <strong><em>should have said, but didn’t</em></strong>.</p>
<div class="note">
<p><code>FilePath</code> is defined as a type synonym for <code>String</code>, which is
itself a type synonym for <code>[Char]</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FilePath</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">String</span>   <span class="ot">=</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>It can be argued on multiple grounds that this is not an appropriate
type for representing file paths:</p>
<ul>
<li><p>Performance: <code>[Char]</code> is a linked list of individual characters.
Packed strings have better performance.</p></li>
<li><p>Correctness: <code>FilePath</code> admits any string value, not just valid
paths. See above for a real world example: paths suffixed with
<code>"(deleted)"</code> on Linux.</p></li>
</ul>
<p>I did not go further down this rabbit hole for the change discussed
in this post. <code>FilePath</code> pervades <em>base</em> and other “standard”
libraries. Furthermore, GHC targets a variety of operating systems;
accurately modeling valid file paths on diverse platforms drives up
complexity. If you have specific needs not met by <code>FilePath</code>, check
out the <a href="https://hackage.haskell.org/packages/search?terms=filepath">many path libraries</a> which offer different approaches to
representing and working with paths.</p>
</div>
<h2 id="implementation-of-executablepath">Implementation of <code>executablePath</code> <a href="#implementation-of-executablepath" class="section">§</a></h2>
<p>In this section I’ll briefly review the implementation. GHC
<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4779">merge request !4779</a> has the gory details, for those
interested.</p>
<p>I was able to implement <code>executablePath</code> without modifying any code
that uses the <em>foreign function interface (FFI)</em>.
<code>getExecutablePath</code> was unchanged. <code>executablePath</code> implementations
wrap the former. See <a href="2021-01-01-fixing-getExecutablePath-FreeBSD.html">my earlier post</a> for an example
of how <code>getExecutablePath</code> uses the FFI.</p>
<h3 id="mac-os-x-freebsd-and-netbsd">Mac OS X, FreeBSD and NetBSD <a href="#mac-os-x-freebsd-and-netbsd" class="section">§</a></h3>
<p>The FreeBSD and NetBSD implementations of <code>getExecutablePath</code> are
nearly identical, but the implementation for Mac OS X is very
different. Nevertheless, the observable behaviour is identical: the
system calls error with <code>ENOENT</code> when the executable has been
deleted, and succeed otherwise. No other expected failure scenarios
are known (yet).</p>
<p>Therefore, the <code>executablePath</code> implementation for these platforms
boils down to catching the Haskell exception value corresponding to
<code>ENOENT</code> and turning it into <code>Nothing</code>. Unexpected exceptions are
re-thrown.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Just</span> (<span class="fu">fmap</span> <span class="dt">Just</span> getExecutablePath <span class="ot">`catch`</span> f)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    f e <span class="op">|</span> isDoesNotExistError e <span class="ot">=</span> <span class="fu">pure</span> <span class="dt">Nothing</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">|</span> <span class="fu">otherwise</span>             <span class="ot">=</span> throw e</span></code></pre></div>
<h3 id="linux">Linux <a href="#linux" class="section">§</a></h3>
<p>The Linux implementation of <code>getExecutablePath</code> reads the value of
<code>/proc/self/exe</code> (part of the <a href="https://manpages.debian.org/buster/manpages/procfs.5.en.html"><code>procfs(5)</code></a>). The
man page states:</p>
<blockquote>
<p>If the pathname has been unlinked, the symbolic link will contain
the string ‘(deleted)’ appended to the original pathname.</p>
</blockquote>
<p><code>executablePath</code> checks for this condition and, if detected, returns
<code>Nothing</code>. Note that we could have stripped the suffix and returned
<code>Just</code> the “original” path. Returning <code>Nothing</code> makes it consistent
with the other platforms.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">fmap</span> check getExecutablePath)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  check s <span class="op">|</span> <span class="st">&quot;(deleted)&quot;</span> <span class="ot">`isSuffixOf`</span> s <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span>                  <span class="ot">=</span> <span class="dt">Just</span> s</span></code></pre></div>
<div class="note">
<p>What if the file is named <code>foo (deleted)</code>? The behaviour is
ambiguous. Checking the existence of the file is not safe either.
If the file was <code>foo</code>, a <em>different</em> file <code>foo (deleted)</code> could
exist beside it. Better a false negative in an unlikely scenario,
than an <strong>unsafe false positive</strong>.</p>
</div>
<h3 id="windows">Windows <a href="#windows" class="section">§</a></h3>
<p>Windows prevents the deletion of an executable file during the
lifetime of any process created from it. So <code>executablePath</code> simply
wraps the result of <code>getExecutablePath</code> with a <code>Just</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">fmap</span> <span class="dt">Just</span> getExecutablePath)</span></code></pre></div>
<h3 id="fallback-implementation">Fallback implementation <a href="#fallback-implementation" class="section">§</a></h3>
<p>The “fallback implementation” is for platforms that don’t have a
reliable mechanism for querying the executable path (or no one
implemented it in GHC yet). In this case, <code>executablePath</code> does not
even supply the query <code>IO</code> action.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Programs that want to query the executable path have to deal with
the <code>Nothing</code> case. That is: the possibility that there <em>is no
reliable way</em> to get it. That’s a good thing.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>This article explained the problems of <code>getExecutablePath</code> and
reviewed the solution coming in GHC 9.4, called <code>executablePath</code>. I
encourage programs that use <code>getExecutablePath</code> to migrate when
feasible, especially if multi-platform support is important.</p>
<p>One topic I did not discuss is how I implemented tests for this
feature in the GHC test suite. I will cover this in an upcoming
post.</p>]]></summary>
</entry>
<entry>
    <title>Haddock: disambiguating types and values</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-11-12-haddock-disambiguation.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-11-12-haddock-disambiguation.html</id>
    <published>2021-11-12T00:00:00Z</published>
    <updated>2021-11-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="haddock-disambiguating-types-and-values">Haddock: disambiguating types and values</h1>
<p>Haskell has separate namespaces for types and values. When types
and data constructors share a name, <a href="https://haskell-haddock.readthedocs.io/en/latest/index.html">Haddock</a>, Haskell’s
documentation generator, can get confused. <span class="abstract">In this post I show how
to disambiguate types and values in Haddock
documentation.</span></p>
<h2 id="demonstrating-the-problem">Demonstrating the problem <a href="#demonstrating-the-problem" class="section">§</a></h2>
<p>For demonstration purposes I created a simple module, <code>ACME.Disamb</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">ACME.Disamb</span> (<span class="dt">Foo</span>(<span class="op">..</span>), <span class="dt">Bar</span>(<span class="op">..</span>), <span class="dt">Quux</span>, <span class="dt">Xyxxy</span>) <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Foo</span> <span class="ot">=</span> <span class="dt">Foo</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- | A bar contains a &#39;Foo&#39;.  Example:</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- @let bar = &#39;Bar&#39; &#39;Foo&#39;@</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Bar</span> <span class="ot">=</span> <span class="dt">Bar</span> <span class="dt">Foo</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Quux</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Xyxxy</span> a</span></code></pre></div>
<p>Note that <code>Foo</code> is the name of both a type and a data constructor.
Same for <code>Bar</code>. <code>Quux</code> is a type with no constructor and <code>Xyxxy</code> is
a class. The Haddock
for type <code>Bar</code> contains ambiguous references to both <code>Bar</code> and
<code>Foo</code>.</p>
<p>Let’s look at the HTML Haddock generated for each top-level
declaration:</p>
<h3 id="data-foo"><code>data Foo</code> <a href="#data-foo" class="section">§</a></h3>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>data<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Foo&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Foo&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;subs constructors&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;caption&quot;</span><span class="kw">&gt;</span>Constructors<span class="kw">&lt;/p&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;table&gt;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;tbody&gt;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;tr&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;td</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;v:Foo&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/td&gt;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;td</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc empty&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;nbsp;</span><span class="kw">&lt;/td&gt;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/tr&gt;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/tbody&gt;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/table&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>The element representing type <code>Foo</code> has <code>id="t:Foo"</code>, whereas the
constructor has <code>id="v:Foo"</code>. These identifiers can be used as
fragment identifiers in hyperlinks. Types and values are
disambiguated through the <code>t:…</code> and <code>v:…</code> identifier prefixes.</p>
<h3 id="data-bar"><code>data Bar</code> <a href="#data-bar" class="section">§</a></h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>data<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Bar&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Bar<span class="kw">&lt;/a&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Bar&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;p&gt;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      A bar contains a</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;</span>. Example:</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/p&gt;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;pre&gt;</span>let bar = <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Bar&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Bar<span class="kw">&lt;/a&gt;&lt;/code&gt;</span> <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">&lt;!-- constructors elided --&gt;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Here we can see that all references to <code>Foo</code> and <code>Bar</code> in the
documentation I wrote <strong>all link to <code>t:Foo</code> or <code>t:Bar</code></strong>. This is
not what I intended. The usage example should refer to the data
constructors.</p>
<p>In my example this is a minor nuisance, but recall that <code>Foo</code> could
be the constructor of some other type. The <em>type</em> <code>Foo</code> could be
unrelated!</p>
<h3 id="data-quux"><code>data Quux</code> <a href="#data-quux" class="section">§</a></h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>data<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Quux&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Quux<span class="kw">&lt;/a&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Quux&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p><code>Quux</code> has no constructor. As a result, there is no element with <code>id="v:…"</code>.</p>
<h3 id="class-xyxxy-a"><code>class Xyxxy a</code> <a href="#class-xyxxy-a" class="section">§</a></h3>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>class<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Xyzzy&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Xyzzy<span class="kw">&lt;/a&gt;</span> a</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Xyzzy&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Type class names inhabit the type namespace. Therefore the
corresponding element identifiers also use the <code>t:…</code> prefix.</p>
<h2 id="the-solution">The solution <a href="#the-solution" class="section">§</a></h2>
<p>To refer explicitly to a type or value, prefix the reference with
<code>t</code> or <code>v</code>. For example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | A bar contains a &#39;Foo&#39;.  Example:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- @let bar = v&#39;Bar&#39; v&#39;Foo&#39;@</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Bar</span> <span class="ot">=</span> <span class="dt">Bar</span> <span class="dt">Foo</span></span></code></pre></div>
<p>The resulting HTML</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>…</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc&quot;</span><span class="kw">&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;p&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>      A bar contains a</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;</span>. Example:</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/p&gt;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;pre&gt;</span>let bar = <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#v:Bar&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Bar<span class="kw">&lt;/a&gt;&lt;/code&gt;</span> <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#v:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>…</span></code></pre></div>
<div class="note">
<p>This feature is available since <a href="https://hackage.haskell.org/package/haddock-2.23.0/changelog">haddock-2.23.0</a> (<a href="https://github.com/haskell/haddock/commit/dd47029cb29c80b1ab4db520c9c2ce4dca37f833">commit</a>).
The published <a href="https://haskell-haddock.readthedocs.io/en/latest/index.html">user guide</a> is out of date but you can read
<a href="https://github.com/haskell/haddock/blob/haddock-2.25.0-release/doc/markup.rst#hyperlinked-identifiers">up-to-date documentation on GitHub</a>.</p>
</div>
<h2 id="inter-module-references">Inter-module references <a href="#inter-module-references" class="section">§</a></h2>
<p>Consider the following module:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | See also &#39;ACME.Disamb.Quux&#39;.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">ACME.Disamb2</span> <span class="kw">where</span></span></code></pre></div>
<p>Unlike references <em>within</em> a module, inter-module references default
to the <em>value</em> namespace:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;caption&quot;</span><span class="kw">&gt;</span>Description<span class="kw">&lt;/p&gt;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc&quot;</span><span class="kw">&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    See also</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#v:Quux&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Quux<span class="kw">&lt;/a&gt;&lt;/code&gt;</span>.</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Recall that <code>Quux</code> has no constructor. So the link doesn’t even
target the wrong identifier; it targets a <em>non-existent</em> identifier.</p>
<p>The solution is the same: prefix the whole reference with <code>t</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | See also t&#39;ACME.Disamb.Quux&#39;.</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">ACME.Disamb2</span> <span class="kw">where</span></span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>How to protect aeson code from hash flooding</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-10-12-aeson-hash-flooding-protection.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-10-12-aeson-hash-flooding-protection.html</id>
    <published>2021-10-12T00:00:00Z</published>
    <updated>2021-10-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="how-to-protect-aeson-code-from-hash-flooding">How to protect <em>aeson</em> code from hash flooding</h1>
<p>A few weeks ago Tom Sydney Kerckhove (<a href="https://twitter.com/kerckhove_ts/">@kerckhove_ts</a>)
published <a href="https://cs-syd.eu/posts/2021-09-11-json-vulnerability">an excellent writeup</a> of a serious DoS
vulnerability in <a href="https://hackage.haskell.org/package/aeson"><em>aeson</em></a>, a widely used Haskell
JSON library. <span class="abstract">A new <em>aeson</em> release addresses the hash flooding
issue, but you <strong>need more than a version bump</strong> to ensure your
programs are protected.</span> This post outlines how <em>aeson</em>
addressed the vulnerability and what action <em>you</em> need to take.</p>
<h2 id="overview-of-the-issue">Overview of the issue <a href="#overview-of-the-issue" class="section">§</a></h2>
<p><a href="https://cs-syd.eu/posts/2021-09-11-json-vulnerability">Tom’s article</a> is great and if you want the gory details,
go read it. There’s no need for me to repeat it here. It’s enough
to say that the attack, called <em>hash flooding</em> or <em>hash DoS</em>,
exploits the behaviour of the <a href="https://hackage.haskell.org/package/unordered-containers-0.2.14.0/docs/Data-HashMap-Lazy.html"><code>HashMap</code></a>
implementation from <em>unordered-containers</em>, which <em>aeson</em> used. It
results in a denial of service through CPU consumption. This
technique has been used in real-world attacks against a variety of
languages, libraries and frameworks over the years.</p>
<h2 id="am-i-vulnerable">Am I vulnerable? <a href="#am-i-vulnerable" class="section">§</a></h2>
<p>If you are using <code>aeson &lt; 2.0.0.0</code> and processing JSON from
untrusted sources, you are probably vulnerable. You could mitigate
the attack by refusing to decode large inputs, if your use case
allows it. Rate limiting may be a possible mitigation for some
applications.</p>
<h2 id="how-did-aeson-address-the-vulnerability">How did <em>aeson</em> address the vulnerability? <a href="#how-did-aeson-address-the-vulnerability" class="section">§</a></h2>
<p>Whereas prior versions used <code>HashMap</code> directly, starting at version
<code>2.0.0.0</code> <em>aeson</em> abstracts the map implementation behind a new data
type: <a href="https://hackage.haskell.org/package/aeson-2.0.1.0/docs/src/Data.Aeson.KeyMap.html"><code>Data.Aeson.KeyMap</code></a>. The <code>ordered-keymap</code>
Cabal flag selects the underlying implementation. When set, <em>aeson</em>
uses the <code>Ord</code>-based <a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Map-Lazy.html#t:Map"><code>Map</code></a> from <em>containers</em>. If
unset, <em>aeson</em> uses <a href="https://hackage.haskell.org/package/unordered-containers-0.2.14.0/docs/Data-HashMap-Lazy.html"><code>HashMap</code></a>.</p>
<p>Version <code>2.0.0.0</code> defaults the flag to <code>False</code>. As of <code>2.0.1.0</code> it
defaults to <code>True</code>. Importantly, the maintainers offer <a href="https://github.com/haskell/aeson/issues/864#issuecomment-939363297"><strong>no
guarantee that the default won’t change again</strong></a>. So
if you use <em>aeson</em> and want to protect yourself from hash flooding
attacks, take the extra precautions outlined in the following
sections.</p>
<p>This is an API-breaking change, hence the major version bump. Most
users will not have to change much code, but there will be
exceptions (I had to change quite a lot for <a href="https://hackage.haskell.org/package/jose"><em>jose</em></a>).</p>
<p>The <code>Map</code> version also behaves differently from <code>HashMap</code>. In
particular, objects may be serialised with a different key order,
and object keys are iterated in different orders. And who knows
what systems out there depend on the key order in some way, even
though they should not. That is a big reason why the maintainers
felt it was necessary to keep the option of using <code>HashMap</code>.</p>
<p>Also, these data structures have different performance
characteristics, with <code>Map</code> having <em>O(log n)</em> insertion and lookup
time. <code>HashMap</code> insertion and lookup are amortised <em>O(1)</em>,
degrading to <em>O(n)</em> for pathological inputs—which is the cause of
the vulnerability!</p>
<h2 id="compiling-a-safe-version-of-aeson">Compiling a safe version of aeson <a href="#compiling-a-safe-version-of-aeson" class="section">§</a></h2>
<p>If you have a program or library that uses <em>aeson</em>, you need to
ensure that the <em>aeson</em> you link against was compiled with the
<code>ordered-keymap</code> flag. There is no way to express this condition in
a <code>.cabal</code> file, but you can <em>can</em> express these constraints in the
<code>cabal.project</code> file:</p>
<pre><code>packages: .
constraints:
  aeson +ordered-keymap</code></pre>
<p>For Stack users, configure the flag in your <code>stack.yaml</code>:</p>
<pre><code>flags:
  aeson:
    ordered-keymap: true</code></pre>
<p>If you’re building and installing <em>aeson</em> directly, via
<em>cabal-install</em> (the <code>cabal</code> program), you can use the
<code>--flags=ordered-keymap</code> command line option.</p>
<h2 id="runtime-checks">Runtime checks <a href="#runtime-checks" class="section">§</a></h2>
<p>In your program or library you can also detect the <code>KeyMap</code>
implementation at runtime. If you detect <code>HashMap</code> you could abort,
emit a warning, or employ other mitigations like limiting the input
size.</p>
<p><code>Data.Aeson.KeyMap</code> exports the following types:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>coercionToHashMap</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Maybe</span> (<span class="dt">Coercion</span> (<span class="dt">HashMap</span> <span class="dt">Key</span> v) (<span class="dt">KeyMap</span> v))</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>coercionToMap</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Maybe</span> (<span class="dt">Coercion</span>     (<span class="dt">Map</span> <span class="dt">Key</span> v) (<span class="dt">KeyMap</span> v))</span></code></pre></div>
<p>The values are coercions—proofs of representational equality
enabling zero-cost conversions; see
<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Type-Coercion.html#t:Coercion"><code>Data.Type.Coercion</code></a>. Only one of <code>HashMap</code> or
<code>Map</code> is actually used, which is why they’re wrapped in <code>Maybe</code>.
The map implementation that <em>aeson</em> is using has a non-<code>Nothing</code>
coercion.</p>
<p>In <a href="https://hackage.haskell.org/package/jose"><em>jose</em></a> I will export the following value to make
it easy for library users to check that the implementation is safe
from hash flooding:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">vulnerableToHashFlood ::</span> <span class="dt">Bool</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>vulnerableToHashFlood <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> KeyMap.coercionToMap <span class="kw">of</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="dt">False</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span></code></pre></div>
<p>Users can (and hopefully will) check that value and respond in
whatever way is suitable for their use case. I might go even
further and cause all JWS processing to immediately fail when the
vulnerable implementation is detected, unless the caller overrides
this behaviour.</p>
<h2 id="what-about-other-things-that-use-hashmap">What about other things that use <code>HashMap</code>? <a href="#what-about-other-things-that-use-hashmap" class="section">§</a></h2>
<p>The <code>HashMap</code> data structure from <em>unordered-containers</em> remains
vulnerable to hash flooding attacks. Users and maintainers are
discussion potential solutions and mitigations in <a href="https://github.com/haskell-unordered-containers/unordered-containers/issues/319">issue #319</a>.
There are several interesting ideas, including:</p>
<ul>
<li><p>Initialise the library with a random salt, via <code>unsafePerformIO</code>.
Many libraries in other language ecosystems use this approach.
But it breaks referential integrity. Values and orders will not
be stable across different executions.</p></li>
<li><p>Use a more collision-resistant hash algorithm, or multiple hashes,
to make it harder to compute collisions.</p></li>
<li><p>Don’t do anything, because the other ideas come with performance
or usability penalties. If your program needs to be safe against
hash flooding, employ other mitigations (size check, rate
limiting, etc) or use an ordered map.</p></li>
</ul>
<p>This discussion is ongoing. The only change so far is to add a
security advisory to the package description.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p><code>aeson &gt;= 2.0.0.0</code> has mitigated the hash flooding vulnerability.
Users of the library must take specific action not only to upgrade
<em>aeson</em> to the latest version, but also ensure it is compiled with
the correct flags. Programs can also perform runtime checks and
take appropriate action if <em>aeson</em> is using <code>HashMap</code>.</p>]]></summary>
</entry>
<entry>
    <title>Reusing random generators in Hedgehog</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-10-03-hedgehog-reuse-random.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-10-03-hedgehog-reuse-random.html</id>
    <published>2021-10-03T00:00:00Z</published>
    <updated>2021-10-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="reusing-random-generators-in-hedgehog">Reusing random generators in Hedgehog</h1>
<p><a href="https://hedgehog.qa/">Hedgehog</a> has a powerful API for generating arbitrary values of
your types. But sometimes a library will already provide a random
generator. <span class="abstract">In this post I show how to use existing generators with
Hedgehog, and discuss the advantages and disadvantages.</span></p>
<h2 id="random-generator-use-cases">Random generator use cases <a href="#random-generator-use-cases" class="section">§</a></h2>
<p>Libraries may need to provide random generators of (some of) their
types for a variety of reasons. Cryptographic keys, secrets and
unique identifiers come to mind immediately.</p>
<p>One use case we have in <a href="https://hackage.haskell.org/package/purebred-email"><em>purebred-email</em></a>
is generation of MIME multipart boundary values (<a href="https://www.rfc-editor.org/rfc/rfc2046.html#section-5.1">RFC
2046</a>). The boundary is a string with 1–70 characters
from a restricted alphabet. Using a random boundary is useful
because the boundary delimiter line (the boundary value preceded by
two hyphens) must not appear anywhere within the message parts.</p>
<p>The <code>Boundary</code> type is defined as follows:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- constructor NOT exported</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Boundary</span> <span class="ot">=</span> <span class="dt">Boundary</span> <span class="dt">ByteString</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">unBoundary ::</span> <span class="dt">Boundary</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>unBoundary (<span class="dt">Boundary</span> s) <span class="ot">=</span> s</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- smart constructor; checks length and validity</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">makeBoundary ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">ByteString</span> <span class="dt">Boundary</span></span></code></pre></div>
<p>We don’t export the constructor. Users must use the <code>makeBoundary</code>
<em>smart constructor</em> which checks that the input is a valid boundary
value.</p>
<p>We also instance the <a href="https://hackage.haskell.org/package/random-1.2.0/docs/System-Random-Stateful.html#t:Uniform"><code>Uniform</code></a> type class from
the <a href="https://hackage.haskell.org/package/random"><em>random</em></a> package (version 1.2.0 onwards).
This instance provides a convenient way for users to generate
conformant boundary values that have a negligible probability of
matching any line in an arbitrary message.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">B</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Internal</span> <span class="kw">as</span> <span class="dt">B</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">C8</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Uniform</span> <span class="dt">Boundary</span> <span class="kw">where</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ot">  uniformM ::</span> <span class="dt">StatefulGen</span> g m <span class="ot">=&gt;</span> g <span class="ot">-&gt;</span> m a</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  uniformM g <span class="ot">=</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Boundary</span> <span class="op">.</span> B.unsafePackLenBytes <span class="dv">64</span> <span class="op">&lt;$&gt;</span> randString</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    randString  <span class="ot">=</span> replicateM <span class="dv">64</span> randChar</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    randChar    <span class="ot">=</span> B.index bchars <span class="op">&lt;$&gt;</span> randIndex</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    randIndex   <span class="ot">=</span> uniformRM (<span class="dv">0</span>, B.length bchars <span class="op">-</span> <span class="dv">1</span>) g</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    bchars      <span class="ot">=</span> C8.pack <span class="op">$</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                       [<span class="ch">&#39;a&#39;</span><span class="op">..</span><span class="ch">&#39;z&#39;</span>] <span class="op">&lt;&gt;</span> [<span class="ch">&#39;A&#39;</span><span class="op">..</span><span class="ch">&#39;Z&#39;</span>]</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&lt;&gt;</span> [<span class="ch">&#39;0&#39;</span><span class="op">..</span><span class="ch">&#39;9&#39;</span>] <span class="op">&lt;&gt;</span> <span class="st">&quot;&#39;()+_,-./:=?&quot;</span></span></code></pre></div>
<div class="note">
<p>A <code>Uniform</code> instance is supposed to draw from all possible values of
a type. In the <code>Boundary</code> instance we are only generating values of
length 64. This is acceptable for our use case but may surprise
some users.</p>
</div>
<p>The <em>random</em> library provides a very general interface to
instantiate and use random number generators. I cannot cover it in
any detail in this post. Assuming you already have a generator
value, <a href="https://hackage.haskell.org/package/random-1.2.0/docs/System-Random-Stateful.html#t:Uniform"><code>System.Random.uniform</code></a> generates a value
of any type with an instance of <code>Uniform</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">uniform ::</span> (<span class="dt">RandomGen</span> g, <span class="dt">Uniform</span> a) <span class="ot">=&gt;</span> g <span class="ot">-&gt;</span> (a, g)</span></code></pre></div>
<p>You can use <code>uniform</code> with
<a href="https://hackage.haskell.org/package/random-1.2.0/docs/System-Random.html#v:getStdRandom"><code>System.Random.getStdRandom</code></a> to generate
values using a global pseudo-random number generated initialised
from system entropy, as an <code>IO</code> action:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getStdRandom ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> (<span class="dt">StdGen</span> <span class="ot">-&gt;</span> (a, <span class="dt">StdGen</span>)) <span class="ot">-&gt;</span>  m a</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">getStdRandom ::</span>              (<span class="dt">StdGen</span> <span class="ot">-&gt;</span> (a, <span class="dt">StdGen</span>)) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>getStdRandom<span class="ot"> uniform ::</span> (<span class="dt">MonadIO</span> m, <span class="dt">Uniform</span> a) <span class="ot">=&gt;</span>  m a</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>getStdRandom<span class="ot"> uniform ::</span>            (<span class="dt">Uniform</span> a) <span class="ot">=&gt;</span> <span class="dt">IO</span> a</span></code></pre></div>
<h2 id="hedgehog-and-hidden-constructors">Hedgehog and hidden constructors <a href="#hedgehog-and-hidden-constructors" class="section">§</a></h2>
<p>If a module does not expose the constructor of some type, how can
the test suite generate random values of that type? There are
several ways you could tackle this:</p>
<ol type="1">
<li><p>Export the constructor from some “internal” module, which is not
really internal. In this way, library users may be
discouraged—but not prevented—from constructing bad data. The
test module can import the constructor from the library’s
“internal” module and use it to define the generator.</p></li>
<li><p>Export a Hedgehog <code>Gen</code> for the type from the library itself.
This causes the library to depend on Hedgehog, which is usually
not desirable.</p></li>
<li><p>For a <code>newtype</code>, use
<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Unsafe-Coerce.html"><code>Unsafe.Coerce.unsafeCoerce</code></a> in the <code>Gen</code>
definition to coerce the underlying type to the wrapped type.
You cannot use <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Coerce.html"><code>Data.Coerce.coerce</code></a> if the
constructor is not in scope. This is nasty, but not unspeakable
given we’re talking about generators for the test suite.</p></li>
</ol>
<ol start="4" type="1">
<li>Export a “lightweight” random generator from the library, and
reuse it to define the <code>Gen</code> in the test suite. If you were
going to export a <code>Uniform</code> (or <code>UniformRange</code>) instance anyway,
this will be low-effort. This approach is the main topic of this
article.</li>
</ol>
<h2 id="implementing-gen-using-uniform">Implementing <code>Gen</code> using <code>Uniform</code> <a href="#implementing-gen-using-uniform" class="section">§</a></h2>
<p>I was aware that Hedgehog depends on <em>random</em>, and was hopeful of
finding a way to use the existing <code>Uniform</code> instance to implement a
<code>Gen Boundary</code>. Looking through the docs, I stumbled across
<a href="https://hackage.haskell.org/package/hedgehog-1.0.5/docs/Hedgehog-Internal-Gen.html#v:generate"><code>generate</code></a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">generate ::</span> <span class="dt">MonadGen</span> m <span class="ot">=&gt;</span> (<span class="dt">Size</span> <span class="ot">-&gt;</span> <span class="dt">Seed</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>It was not immediately apparent whether I could use <code>generate</code> to
define a <code>Gen Boundary</code>. First, does <code>Gen</code> have an instance of
<code>MonadGen</code>?</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Gen</span> <span class="ot">=</span> <span class="dt">GenT</span> <span class="dt">Identity</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">MonadGen</span> (<span class="dt">GenT</span> m)</span></code></pre></div>
<p>Yes, it does. Next, I had to work out how to turn a <code>Size</code> and a
<code>Seed</code> into a <code>Boundary</code>. To my delight, I saw that <code>Seed</code> has an
instance of <code>RandomGen</code>. Putting it together, all that is required
is to apply <code>uniform</code> to the <code>Seed</code>, and discard the new generator
value. I ignore the <code>Size</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hedgehog</span> (<span class="dt">Gen</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hedgehog.Internal.Gen</span> (generate)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ot">genBoundary ::</span> <span class="dt">Gen</span> <span class="dt">Boundary</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>genBoundary <span class="ot">=</span> generate (\_size seed <span class="ot">-&gt;</span> <span class="fu">fst</span> (uniform seed))</span></code></pre></div>
<h2 id="disadvantages">Disadvantages <a href="#disadvantages" class="section">§</a></h2>
<p>There are a few disadvantages to reusing a library’s random
generator to define your Hedgehog <code>Gen</code>.</p>
<p>First, the generated values are restricted to whatever the library’s
generator gives you. In my case, the <code>Boundary</code> generator only
generates values of length 64. It follows that Hedgehog could miss
all kinds of bugs. For example, if <em>purebred-email</em> fails to decode
boundaries of length 70 due to an off-by-one error, I have no hope
of catching that bug.</p>
<p>Second, <code>generate</code> gives you a <code>Gen</code> with no shrinks. If Hedgehog
finds a counterexample, it can’t do anything to try and simplify it.
Automatic shrinking is one of Hedgehog’ss killer features, but you
give it up by using <code>generate</code>.</p>
<p>You can use the <code>shrink</code> function to supply additional shrinking
behaviour to a <code>Gen</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">shrink ::</span> <span class="dt">MonadGen</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> [a]) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m a </span></code></pre></div>
<p>But when you don’t have access to the constructor for the data type
you’re generating, defining your own shrinks is at best awkward, and
maybe impossible. I <em>could</em> implement <code>Boundary</code> shrinking by
extracting the underlying <code>ByteString</code> (<code>unBoundary</code>), shrinking it,
applying the smart constructor (<code>makeBoundary</code>) and filtering
invalid values. That’s a lot of work. I didn’t bother.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>Defining Hedgehog <code>Gen</code> values can be awkward or very difficult for
types whose constructors are hidden. But if you have a function
that uses a <code>RandomGen</code> to generate values, you can use it with
Hedgehog’s <code>generate</code> function to define a <code>Gen</code>. The downsides are
that you don’t get automatic shrinking, and you are restricted to
whatever values the generator produces.</p>
<p>Alternative approaches include exposing the constructor via an
“internal” (but actually public) module, or using <code>unsafeCoerce</code>.</p>]]></summary>
</entry>
<entry>
    <title>Hakyll how-to: pages without source files</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-07-26-hakyll-without-sources.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-07-26-hakyll-without-sources.html</id>
    <published>2021-07-26T00:00:00Z</published>
    <updated>2021-07-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="hakyll-how-to-pages-without-source-files">Hakyll how-to: pages without source files</h1>
<p><a href="https://jaspervdj.be/hakyll/">Hakyll</a> is a static website builder. The typical use case is to
take some files written in lightweight markup and compile them into
static HTML. Besides the sources for the main content, there are
also HTML templates, CSS, perhaps some JavaScript, images and so on.</p>
<p>But perhaps you need to build a site from sources other than local
files. Possible scenarios include:</p>
<ul>
<li>Crawl and mirror another site</li>
<li>Generate and publish calendars files for a conference</li>
<li>Create a directory of content from some other source</li>
</ul>
<p>As a static site builder, Hakyll can be a good choice for publishing
data that change infrequently. <span class="abstract">In this post I demonstrate how to
generate Hakyll site content without corresponding source
files.</span></p>
<h2 id="use-case-web-key-directory">Use case: Web Key Directory <a href="#use-case-web-key-directory" class="section">§</a></h2>
<p>My use case was to generate a <a href="https://wiki.gnupg.org/WKD"><em>Web Key Directory (WKD)</em></a> for
my personal OpenPGP keys. OpenPGP clients can use WKD for key
discovery. WKD is an alternative to the older keyserver system, which
<a href="https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f">has some problems</a>. It works as follows:</p>
<ol type="1">
<li><p>The client seeks a key for identity <code>Joe.Doe@example.org</code>.</p></li>
<li><p>Lower-case, digest (SHA-1) and <a href="https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt">z-base-32</a> encode the address
local part (<code>Joe.Doe</code> → <code>iy9q119eutrkn8s1mk4r39qejnbu3n5q</code>).</p></li>
<li><p>The client performs HTTP GET request for:</p>
<pre><code>https://openpgpkey.example.org
  /.well-known/openpgpkey/example.org
  /hu/iy9q119eutrkn8s1mk4r39qejnbu3n5q?l=Joe.Doe</code></pre>
<p>This is called the <em>advanced method</em>.</p></li>
<li><p>The server responds with the binary encoding of the key (or a
<code>404</code>).</p></li>
<li><p>As a fallback, the client tries:</p>
<pre><code>https://example.org
  /.well-known/openpgpkey
  /hu/iy9q119eutrkn8s1mk4r39qejnbu3n5q?l=Joe.Doe</code></pre>
<p>This is called the <em>direct method</em>.</p></li>
</ol>
<p>Observe that, up to case-sensitivity of the email local part, the
server does not necessarily need to use the <code>?l=Joe.Doe</code> query
parameter. If the local part is case-<strong><em>in</em></strong>sensitive (it usually is)
then the digest, which is part of the URI path, is enough.
Therefore an HTTP server serving static files can be a functional
WKD server. You just need to build the directory.</p>
<div class="note">
<p>The <em>advanced method</em> has several advantages over the <em>direct
method</em>. Users or organisations with multiple domains can maintain
a single unified WKD, or delegate to an external service. The
advanced method does not interfere with existing sites. On the down
side, the <code>openpgpkey</code> DNS subdomain must be configured for each
domain. The TLS requirement is hardly a disadvantage, because of
<a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a>.</p>
</div>
<h2 id="building-a-web-key-directory-with-hakyll">Building a Web Key Directory with Hakyll <a href="#building-a-web-key-directory-with-hakyll" class="section">§</a></h2>
<h3 id="reading-keys-from-gnupg">Reading keys from GnuPG <a href="#reading-keys-from-gnupg" class="section">§</a></h3>
<p><a href="https://gnupg.org/">GnuPG</a> is my OpenPGP client. My Hakyll program invokes <code>gpg</code> to
list and extract keys. Here are the types of the functions involved
(I will not detail their implementations):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">KeyId</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Uid</span> <span class="ot">=</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="co">-- ^ local-part, domain</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">listKeys ::</span> <span class="dt">IO</span> (<span class="dt">L8.ByteString</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">exportKey ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Uid</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">L8.ByteString</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ot">hashLocalPart ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ot">extractUserIds ::</span> <span class="dt">L8.ByteString</span> <span class="ot">-&gt;</span> [<span class="dt">Uid</span>]</span></code></pre></div>
<div class="note">
<p>I used the <a href="https://hackage.haskell.org/package/typed-process"><em>typed-process</em></a> package to
execute GnuPG. The <code>--with-colons</code> option is helpful for inspecting
keys and their user IDs. You can use an <code>--export-filter</code> to select
the user ID(s) to export. The man pages and <a href="https://github.com/gpg/gnupg/blob/master/doc/DETAILS"><code>DETAILS</code></a>
file contain all the information you need for programmatic
interaction with GnuPG.</p>
</div>
<h3 id="creating-resources">Creating resources <a href="#creating-resources" class="section">§</a></h3>
<p>Hakyll sites use <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:match"><code>match</code></a> to generate compilation rules
for local resources. For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*.md&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  compile pandocCompiler</span></code></pre></div>
<p>But there are no local files to <code>match</code>. Instead, we use
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:create"><code>create</code></a> to declare new resources. These resources can be
routed to like any other, but we must synthesise the content. The
following function, given a key ID and an email address, exports the
key from GnuPG and establishes the route.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">wkdUid ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Uid</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>wkdUid keyId uid<span class="op">@</span>(localPart, domain) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> path <span class="ot">=</span> <span class="st">&quot;.well-known/openpgpkey/&quot;</span> <span class="op">&lt;&gt;</span> domain <span class="op">&lt;&gt;</span> <span class="st">&quot;/hu/&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>             <span class="op">&lt;&gt;</span> hashLocalPart localPart</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  create [fromFilePath path] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    route <span class="op">$</span> idRoute</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> exportKey keyId uid</span></code></pre></div>
<p><code>create</code> is applied to a list of resource identifiers, and a <code>Rules ()</code> for compiling and routing the resource. I am not showing the
implementation of <code>exportKey</code>; it’s enough to know that it uses
<code>IO</code>. Hakyll provides <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Compiler.html#v:unsafeCompiler"><code class="sourceCode haskell"><span class="ot">unsafeCompiler ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> a</code></a> for executing I/O actions in compiler
context.</p>
<p><code>wkdUid</code> creates the key resource for a single user ID. A key can
have multiple user IDs. <code>wkUIDs on a specified KeydKey</code> creates the
Hakyll <code>Rules ()</code> for all user IDs on a given key:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">wkdKey ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>wkdKey keyId <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  out <span class="ot">&lt;-</span> preprocess listKeys</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> uids <span class="ot">=</span> extractUserIds out</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  traverse_ (wkdUid keyId) uids</span></code></pre></div>
<p><code class="sourceCode haskell"><span class="ot">preprocess ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">Rules</span> a</code> embeds an I/O action in
the <code>Rules</code> context. Hakyll executes the action eagerly, unlike
<code>unsafeCompiler</code> which is run on demand. This makes sense—we need
to <code>listKeys</code> first to work out what resources to create.</p>
<p>Having extracted the user IDs, we <code>traverse_</code> them to create the WKD
resources. We also use <code>traverse_</code> at the outmost layer of the
program to invoke <code>wkdKey</code> for each key ID given on standard input:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  keys <span class="ot">&lt;-</span> <span class="fu">words</span> <span class="op">&lt;$&gt;</span> <span class="fu">getContents</span> <span class="co">-- read stdin</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  hakyll <span class="op">$</span> traverse_ wkdKey keys</span></code></pre></div>
<h2 id="how-hakyll-compiling-works">How Hakyll compiling works <a href="#how-hakyll-compiling-works" class="section">§</a></h2>
<p>Let’s dive a bit deeper into how compiling works. The
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:compile"><code>compile</code></a> function adds a content compiler to the <code>Rules</code>
for resources. It’s type is:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>compile</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> (<span class="dt">Binary</span> a, <span class="dt">Typeable</span> a, <span class="dt">Writable</span> a)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> a)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span></code></pre></div>
<p>The compiler argument has to return an <code>Item a</code>, where <code>a</code> has
several type class constraints. <code>Binary</code> and <code>Typeable</code> are used by
Hakyll’s caching mechanism. <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Writable.html#t:Writable"><code>Writable</code></a> is what Hakyll
uses to write the compiled resource to the site output. There are
several instances, including for <code>String</code>, <code>ByteString</code> (lazy and
strict), and <code>Html</code>. Hakyll provides <code>makeItem :: a -&gt; Compiler (Item a)</code> for returning an <code>Item a</code>.</p>
<p>As an example, here is a compiler that executes a subprocess and
returns the standard output:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>processCompiler</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">L.ByteString</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>processCompiler exe args <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  (_status, out, _err) <span class="ot">&lt;-</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    unsafeCompiler <span class="op">.</span> readProcess <span class="op">$</span> proc exe args</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  makeItem out</span></code></pre></div>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>I have demonstrated how to use Hakyll to create content derived not
from local files, but other sources (GnuPG in my case). Is this
actually a good idea? For one-shot applications and data that don’t
change frequently, I think it is fine. Hakyll takes care of all the
filesystem I/O, relieving me of some tedium and avoiding a possible
source of bugs.</p>
<p>For my WKD use case, I can rebuild the site when my keys have been
updated, then <code>rsync</code> it to my web server. The program is well
under 100 lines of code—including imports! Source code is
<a href="https://github.com/frasertweedale/hakyll-wkd">available on GitHub</a>
under AGPLv3. At time of writing I have not published it on
Hackage.</p>
<div class="note">
<p>Because there are no local file dependencies for the resources,
Hakyll does not know to recompile it. You have to <strong><code>rebuild</code></strong>
every time. This may be a practical issue for some use cases,
though not for mine.</p>
</div>
<p>In general, it would be useful to be able to specify arbitrary
freshness checks for resources. Unfortunately Hakyll’s
implementation does not readily admit such a feature. But it was
straightforward to add <em>unconditional</em> rebuilding on a per-resource
basis. I submitted a <a href="https://github.com/jaspervdj/hakyll/pull/857">pull request</a> to add the <code>forceCompile</code>
helper function. Example usage:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- compile this resource every time</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>forceCompile <span class="op">$</span> create [<span class="st">&quot;foo&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> idRoute</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> unsafeCompiler <span class="op">$</span> doStuff</span></code></pre></div>
<p>This feature was accepted and will appear in a future release of
Hakyll.</p>]]></summary>
</entry>
<entry>
    <title>Generating abstracts for Hakyll articles</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-06-11-hakyll-abstracts.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-06-11-hakyll-abstracts.html</id>
    <published>2021-06-11T00:00:00Z</published>
    <updated>2021-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="generating-abstracts-for-hakyll-articles">Generating abstracts for Hakyll articles</h1>
<p>Suppose you have a list of recent posts and want to include an
abstract for each one. Or maybe you want to include brief article
summaries in metadata about your content. <span class="abstract">In this post I
demonstrate several ways to declare or generate abstracts for
content on your <a href="https://jaspervdj.be/hakyll/">Hakyll</a> site.</span></p>
<h2 id="objective">Objective <a href="#objective" class="section">§</a></h2>
<p>The goal is to include an <code>$abstract$</code> field in each article’s
context. The field value should be a brief abstract or description
of the article. What to actually <em>do</em> with the value is outside the
scope of this post. But it is fair to include an example, so here’s
how you could use it in a “recent posts” list:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  $for(posts)$</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;li&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span>: $abstract$<span class="kw">&lt;/li&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  $endfor$</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/ul&gt;</span></span></code></pre></div>
<p>I will discuss a more interesting use case in a future post.</p>
<h2 id="metadata">Metadata <a href="#metadata" class="section">§</a></h2>
<p>Hakyll processes optional metadata at the top of the article source.
The format is YAML. Fields in the YAML map are available via
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Template-Context.html#v:metadataField"><code>metadataField</code></a>, which is also part of the
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Template-Context.html#v:defaultContext"><code>defaultContext</code></a>.</p>
<p>So you can define an abstract in the metadata, like so:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">---</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="fu">tags</span><span class="kw">:</span><span class="at"> hakyll, pandoc</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">abstract</span><span class="kw">: </span><span class="ch">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  In this post I demonstrate several ways to generate</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  abstracts for articles in your Hakyll site.</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="pp">---</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co"># Generating abstracts for Hakyll articles</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">…</span></span></code></pre></div>
<div class="note">
<p>Be careful of including HTML special characters (<code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>"</code>,
<code>'</code>) in the metadata. These will <em>not</em> be escaped automatically,
and could break the page. I avoid this pitfall by escaping all
values that come from <code>metadataField</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>context <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  mapContext escapeHtml metadataField </span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
</div>
<h2 id="markup">Markup <a href="#markup" class="section">§</a></h2>
<p>I don’t like repeating myself. If I were to use <code>metadataField</code>,
the abstract I write would often be a repeat the article’s
introduction or some part thereof. Wouldn’t it be nice if I could
just indicate—<em>inline</em>—a portion of the article to use as the
abstract? For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu"># Generating abstracts for Hakyll articles</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>Suppose you have … [In this post I demonstrate several</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ways to generate abstracts for articles in your Hakyll</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>site.]{.abstract}</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>…</span></code></pre></div>
<p>The example above uses Pandoc’s <code>bracketed_spans</code> extension. You
could achieve the same with explicit <code>&lt;span&gt;</code> tags. Other input
formats may or may not provide a way to do it.</p>
<p>On the Hakyll side, we first need a function to locate a span with
the <code>abstract</code> class in the <code>Pandoc</code> AST:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">abstract ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>abstract (<span class="dt">Pandoc</span> _ blocks) <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  removeFormatting <span class="op">&lt;$&gt;</span> findSpan blocks</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  findSpan <span class="ot">=</span> <span class="fu">fmap</span> getFirst <span class="op">.</span> query <span class="op">$</span> \inl <span class="ot">-&gt;</span> <span class="kw">case</span> inl <span class="kw">of</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Span</span> (_id, cls, _attrs) inls</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">|</span> <span class="st">&quot;abstract&quot;</span> <span class="ot">`elem`</span> cls <span class="ot">-&gt;</span> <span class="dt">First</span> (<span class="dt">Just</span> inls)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    _                           <span class="ot">-&gt;</span> <span class="fu">mempty</span></span></code></pre></div>
<p>In the unlikely event that there are multiple spans with class
<code>abstract</code>, the <code>First [Inline]</code> monoid keeps only the first. I
strip all formatting via <a href="2021-01-11-hakyll-title-formatting.html#removeFormatting"><code>removeFormatting</code></a>,
which I <a href="2021-01-11-hakyll-title-formatting.html#removeFormatting">described</a> in a previous post.</p>
<p>The next step is to update the compiler to save a
snapshot of the abstract.
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM"><code>pandocCompilerWithTransformM</code></a>
gives access to the <code>Pandoc</code> AST, and allows arbitrary
<code>Compiler</code> actions including <code>saveSnapshot</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    pandocCompilerWithTransformM</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>      defaultHakyllReaderOptions</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>      defaultHakyllWriterOptions</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>      (\pandoc <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> render <span class="ot">=</span> <span class="fu">fmap</span> writePandoc <span class="op">.</span> makeItem</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>                     <span class="op">.</span> <span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">maybe</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>            (<span class="fu">pure</span> ())</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>            (void <span class="op">.</span> (saveSnapshot <span class="st">&quot;abstract&quot;</span> <span class="op">&lt;=&lt;</span> render))</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>            (abstract pandoc)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> pandoc</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>      )</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> context</span></code></pre></div>
<p>Finally we define a new kind of context field that can read
snapshots:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  loadSnapshotBody item snap</span></code></pre></div>
<p>and add the field to the context:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>context <span class="ot">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  snapshotField <span class="st">&quot;abstract&quot;</span> <span class="st">&quot;abstract&quot;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
<h2 id="autogeneration">Autogeneration <a href="#autogeneration" class="section">§</a></h2>
<p>Consider the following heuristic for autogenerating an abstract:
Take the first paragraph that immediately precedes a heading; that
is the abstract.</p>
<p>This is a very basic heuristic. But absent other data it’s probably
better than nothing. So let’s implement it:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">abstract ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>abstract (<span class="dt">Pandoc</span> _ blocks) <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  removeFormatting <span class="op">&lt;$&gt;</span> fallback</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  fallback (<span class="dt">Para</span> inlines <span class="op">:</span> <span class="dt">Header</span> _ _ _ <span class="op">:</span> _) <span class="ot">=</span> <span class="dt">Just</span> inlines</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  fallback (_h <span class="op">:</span> t) <span class="ot">=</span> fallback t</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  fallback [] <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This version of <code>abstract</code> scans the list of block elements at the
top level of the <code>Pandoc</code> AST. The first time it sees a <code>Para</code>
preceding a <code>Header</code>, it returns the paragraph content.</p>
<h2 id="putting-it-all-together">Putting it all together <a href="#putting-it-all-together" class="section">§</a></h2>
<p>For my sites, I want to use all three methods described above. An
abstract specified in the <em>metadata</em> is preferred. Explicit
<em>markup</em> is my second preference and the <em>autogeneration</em> heuristic
is a last resort. This will provide a good user experience for me.
With a tiny bit of markup I can avoid repeating myself most of the
time. But if it is warranted, I can use the metadata to write
something different. Sometimes I’ll get a fair result without doing
anything.</p>
<p>Combining the two versions of <code>abstract</code> is left as an exercise for
the reader (hint: <code>Control.Applicative.&lt;|&gt;</code>).</p>
<p>Take care when composing the context. The <code>metadataField</code> has to
come before the <code>snapshotField</code> (if that’s the priority you want):</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>context <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  mapContext escapeHtml metadataField</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;abstract&quot;</span> <span class="st">&quot;abstract&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
<p>Now I have a nice way to generate abstracts for my articles. I will
explore an interesting use case in an upcoming post.</p>]]></summary>
</entry>
<entry>
    <title>A combinator library for taxes</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-05-23-tax-combinators.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-05-23-tax-combinators.html</id>
    <published>2021-05-23T00:00:00Z</published>
    <updated>2021-05-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="a-combinator-library-for-taxes">A combinator library for taxes</h1>
<p>Doing your taxes is no fun. But functional programming can ease the
pain. In this post I describe and demonstrate the Haskell
<a href="https://hackage.haskell.org/package/tax"><em>tax</em></a> library, which provides data types and
combinators for defining taxes.</p>
<h2 id="what-is-a-tax">What is a tax? <a href="#what-is-a-tax" class="section">§</a></h2>
<p>Wikipedia <a href="https://en.wikipedia.org/wiki/Tax">defines</a> a tax as <em>a compulsory financial
charge or some other type of levy imposed on a taxpayer</em>. Most
taxes have monetary “inputs and outputs” but other kinds of taxation
exist, such as the <a href="https://en.wikipedia.org/wiki/Corv%C3%A9e#Modern_instances"><em>corvée</em></a>. Therefore <em>tax</em>
defines a type that is abstracted over its inputs and outputs:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Tax</span> b a <span class="ot">=</span> <span class="dt">Tax</span> {<span class="ot"> getTax ::</span> b <span class="ot">-&gt;</span> a }</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Semigroup</span>, <span class="dt">Monoid</span>, <span class="dt">Functor</span>, <span class="dt">Profunctor</span>)</span></code></pre></div>
<p>The <code>Tax b a</code> type is a wrapper around the function type <code>(b -&gt; a)</code>.
Although <code>(-&gt;)</code> has all the instances we need, I found it more
ergonomic to define a new type that communicates the <em>intent</em> of the
values. The <code>GeneralizedNewtypeDeriving</code> extension enables
automatic derivation of the following type class instances:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> a <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Tax</span> b a)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span>    <span class="dt">Monoid</span> a <span class="ot">=&gt;</span>    <span class="dt">Monoid</span> (<span class="dt">Tax</span> b a)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Tax</span> b)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Profunctor</span> <span class="dt">Tax</span></span></code></pre></div>
<p>The <code>Semigroup</code> operation sums outputs. The <code>Monoid</code> identity
is a 0% tax.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> getTax (flat <span class="fl">0.1</span> <span class="op">&lt;&gt;</span> flat <span class="fl">0.2</span> <span class="op">&lt;&gt;</span> <span class="fu">mempty</span>) (<span class="dt">Money</span> <span class="dv">10</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">$</span><span class="fl">3.0</span></span></code></pre></div>
<p>For convenience, <em>tax</em> exports a type synonym for taxes whose inputs
and outputs are money (of the same type). The input is an amount
subject to taxation (often income), and the output is the tax due:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MoneyTax</span> a <span class="ot">=</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span></code></pre></div>
<p>The <a href="https://hackage.haskell.org/package/dollaridoos-0.1.0.0/docs/Data-Money.html#t:Money"><code>Money</code></a> type comes from the
<a href="https://hackage.haskell.org/package/dollaridoos"><em>dollaridoos</em></a> package.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Money</span> a <span class="ot">=</span> <span class="dt">Money</span> a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p><code>Money</code> restricts the operations that can be performed by omitting a
<code>Num</code> instance. Dedicated functions provide the operations that
make sense for money, like <em>scalar</em> multiplication:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">($*) ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span>       a <span class="ot">-&gt;</span> <span class="dt">Money</span> a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(*$) ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span>       a <span class="ot">-&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> <span class="dt">Money</span> a</span></code></pre></div>
<p><code>Money a</code> also has instances for <code>Semigroup</code> and <code>Monoid</code> when the
wrapped type has an instance of <code>Num</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Money</span> a)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span>    <span class="dt">Monoid</span> (<span class="dt">Money</span> a)</span></code></pre></div>
<p>All types in <em>tax</em> are abstracted over the numeric representation.
Different applications can have different requirements for
precision. Users may want to use a type that carries additional
context, such as a currency. Therefore <em>tax</em> lets the user choose
the numeric representation to use.</p>
<h2 id="constructing-taxes">Constructing taxes <a href="#constructing-taxes" class="section">§</a></h2>
<p>The most basic taxes are <strong>lump</strong> sums, and <strong>flat</strong>-rate taxes:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lump ::</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>lump <span class="ot">=</span> <span class="dt">Tax</span> <span class="op">.</span> <span class="fu">const</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">flat ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>flat <span class="ot">=</span> <span class="dt">Tax</span> <span class="op">.</span> (<span class="op">*$</span>)</span></code></pre></div>
<p>Some other common taxation constructions include taxing the amount
<strong>above</strong> some threshold at a flat rate, or taxing the <em>whole</em>
amount at a flat rate when it exceeds the <strong>threshold</strong>. These
functions have the same type signature (I’ll show the implementation
later):</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>above, threshold</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span></code></pre></div>
<h2 id="combinators">Combinators <a href="#combinators" class="section">§</a></h2>
<p>More complex taxes can be built using a handful of
<a href="https://wiki.haskell.org/Combinator_pattern"><em>combinators</em></a> (functions that assemble smaller
components into more complicated structures). This section
describes the combinators provided by the <em>tax</em> package.</p>
<p>Levy the <strong>lesser</strong> or <strong>greater</strong> of two taxes:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>lesserOf, greaterOf</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>lesserOf  t1 t2 <span class="ot">=</span> <span class="dt">Tax</span> (<span class="fu">min</span> <span class="op">&lt;$&gt;</span> getTax t1 <span class="op">&lt;*&gt;</span> getTax t2)</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>greaterOf t1 t2 <span class="ot">=</span> <span class="dt">Tax</span> (<span class="fu">max</span> <span class="op">&lt;$&gt;</span> getTax t1 <span class="op">&lt;*&gt;</span> getTax t2)</span></code></pre></div>
<p><strong>Limit</strong> the tax payable to a given amount:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">limit ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>limit <span class="ot">=</span> lesserOf <span class="op">.</span> lump</span></code></pre></div>
<p>Whereas <code>above</code> and <code>threshold</code> use flat rates, <code>above'</code> and
<code>threshold'</code> subject the taxable portion of the input to arbitrary
<code>Tax</code> computations:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">above&#39; ::</span> (<span class="dt">Num</span> b, <span class="dt">Ord</span> b)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>       <span class="ot">=&gt;</span> <span class="dt">Money</span> b <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> b) a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> b) a</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>above&#39; l <span class="ot">=</span> lmap (\x <span class="ot">-&gt;</span> <span class="fu">max</span> (x <span class="op">$-$</span> l) <span class="fu">mempty</span>)</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ot">threshold&#39; ::</span> (<span class="dt">Ord</span> b, <span class="dt">Monoid</span> a) <span class="ot">=&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>threshold&#39; l tax <span class="ot">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tax</span> (\x <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="op">&gt;=</span> l <span class="kw">then</span> getTax tax x <span class="kw">else</span> <span class="fu">mempty</span>)</span></code></pre></div>
<p>In <code>above'</code>, note the use of <code>lmap</code> to reduce (via the <code>Money</code>
subtraction function <code>($-$)</code>) the amount the tax is levied upon.
This is the first usage of the <code>Profunctor</code> instance, but it will
not be the last.</p>
<p>With <code>above'</code> and <code>threshold'</code> in hand, we now see that the
implementations of <code>above</code> and <code>threshold</code> (which apply flat-rate
taxes) are trivial:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>above, threshold</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>above     l <span class="ot">=</span> above&#39;     l <span class="op">.</span> flat</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>threshold l <span class="ot">=</span> threshold&#39; l <span class="op">.</span> flat</span></code></pre></div>
<p>In real world use, I have not (so far) used <code>above'</code> or
<code>threshold'</code>; the flat rate variants sufficed. Nevertheless, for
completeness <em>tax</em> exports the general variants.</p>
<h2 id="examples">Examples <a href="#examples" class="section">§</a></h2>
<h3 id="progressive-tax">Progressive tax <a href="#progressive-tax" class="section">§</a></h3>
<p>Many countries use <a href="https://en.wikipedia.org/wiki/Progressive_tax"><em>progressive taxes</em></a>, where
different bands of income are taxed at increasing flat rates. For
example, in Australia for the 2020–21 financial year the first
$18,200 is tax free, with income between $18,200 and $45,000 taxed
at 19%, then 32.5% up to $120,000, 37% up to $180,000, and 45% above
$180,000.</p>
<p>Observe that the <code>Monoid</code> instance for <code>Tax</code> sums the outputs of
constituent taxes applied to the same input. We can define a
function that takes a list of thresholds and rates, and constructs a
progressive tax:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">marginal ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>         <span class="ot">=&gt;</span> [(<span class="dt">Money</span> a, a)] <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>marginal <span class="ot">=</span> <span class="fu">foldMap</span> (<span class="fu">uncurry</span> above)</span></code></pre></div>
<p>Because of the accumulative behaviour, the rate for each band must
be the <strong>difference</strong> to the previous band. The rate for the first
band is implicitly the delta to 0%. The Australian regime can be
expressed as:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ausTax ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>ausTax <span class="ot">=</span> marginal</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  [ ( <span class="dt">Money</span> <span class="dv">18200</span>,  <span class="fl">0.19</span>  <span class="op">-</span> <span class="dv">0</span>     )</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  , ( <span class="dt">Money</span> <span class="dv">45000</span>,  <span class="fl">0.325</span> <span class="op">-</span> <span class="fl">0.19</span>  )</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  , ( <span class="dt">Money</span> <span class="dv">120000</span>, <span class="fl">0.37</span>  <span class="op">-</span> <span class="fl">0.325</span> )</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  , ( <span class="dt">Money</span> <span class="dv">180000</span>, <span class="fl">0.45</span>  <span class="op">-</span> <span class="fl">0.37</span>  ) ]</span></code></pre></div>
<p>The <code>marginal</code> function is useful enough that the <em>tax</em> package
provides it.</p>
<h3 id="shade-in">Shade in <a href="#shade-in" class="section">§</a></h3>
<p>Australia’s public health system is funded by the <em>Medicare Levy</em>.
It is currently 2% of income, but people below a certain threshold
are exempt (the threshold changes each year). The amount above the
threshold is taxed at 10% until it reaches 2% of the input. This
prevents a sudden jump in tax owed and eliminates a perverse
incentive to earn less than the threshold (if your income is around
that number). The Australian Taxation Office calls this
construction a <em>shade in</em>.</p>
<p>Using the functions defined above and taking the lower shade in
threshold as a parameter, this tax is an elegant one-liner:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>medicareLevy</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>medicareLevy l <span class="ot">=</span> lesserOf (above l <span class="fl">0.1</span>) (flat <span class="fl">0.02</span>)</span></code></pre></div>
<h3 id="tax-offsets">Tax offsets <a href="#tax-offsets" class="section">§</a></h3>
<p>A tax doesn’t have to result in an amount owed. Maybe your
government will <em>give</em> you some money based on your income. Indeed
Australia has some <em>tax offsets</em> that reduce the tax paid by people
on lower incomes.</p>
<p>An example is the <em>Low Income Tax Offset</em>, which was previously
defined as: <em>$445, reduced by 1.5c for every dollar earned over
$37,000</em> (the current definition is more complex). We can implement
it like so:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lito ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>lito <span class="ot">=</span> limit <span class="fu">mempty</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  (lump (<span class="dt">Money</span> (<span class="op">-</span><span class="dv">445</span>)) <span class="op">&lt;&gt;</span> above (<span class="dt">Money</span> <span class="dv">37000</span>) <span class="fl">0.015</span>)</span></code></pre></div>
<p><code>limit mempty</code> ensures that the result does not exceed $0.</p>
<h3 id="withholding-tax">Withholding tax <a href="#withholding-tax" class="section">§</a></h3>
<p>Many jurisdictions collect income taxes by requiring employers to
remit a portion of employees’ wages directly to the tax authority.
In Australia, the amount to <em>withhold</em> from a payment can be
determined by extrapolating the amount to an annual income,
computing the tax due, then dividing it back down to the pay period.</p>
<p>We can use the <code>Profunctor</code> instance to compute the amount to
withhold for different pay periods. Think of <code>dimap f g</code> as an
adapter that modifies that data flowing in (via <code>f</code>) and out (via
<code>g</code>) of the target computation.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>allTaxes <span class="ot">=</span> ausTax <span class="op">&lt;&gt;</span> medicareLevy (<span class="dt">Money</span> <span class="dv">23226</span>) <span class="op">&lt;&gt;</span> lito</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>weeklyWithholding      <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">52</span>) (<span class="op">$/</span> <span class="dv">52</span>) allTaxes</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>fortnightlyWithholding <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">26</span>) (<span class="op">$/</span> <span class="dv">26</span>) allTaxes</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>monthlyWithholding     <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">12</span>) (<span class="op">$/</span> <span class="dv">12</span>) allTaxes</span></code></pre></div>
<div class="note">
<p>The examples above are not correct when there are 53 weekly or 27
fortnightly payments in a financial year. Can you see how to define
the correct computation?</p>
<p>In the example I ignored some <strong>rounding</strong> rules. I also omitted
several other tax components. It is an example, not a complete
solution!</p>
</div>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>I hope you have enjoyed this tour of the <em>tax</em> library. Of course,
most real tax systems are much more complex than the handful of
examples in this article. But <em>tax</em> provides building blocks for
defining many kinds of taxes.</p>
<p>My <a href="https://github.com/frasertweedale/hs-tax-ato"><em>tax-ato</em></a> package builds upon <em>tax</em> to provide
types and behaviour for tax in Australia. In addition to the
kinds of taxes described in this article it also handles capital
gains tax, <a href="https://en.wikipedia.org/wiki/Dividend_imputation">franking credits</a>, student loan repayments,
deductions, and other concepts. I use it to predict and record my
own tax obligations. If you need to perform calculations related to
tax in Australia, you might find it useful too. It is definitely
not complete and comes with no guarantee of correctness.</p>
<p>One final note: oh how I wish Haskell would decouple numeric
literals from the <code>Num</code> and <code>Fractional</code> type classes. <code>Money</code>
cannot have instances of these type classes because like other
dimensional types, it is is not <a href="https://en.wikipedia.org/wiki/Closure_(mathematics)">closed</a> under multiplication and
division. As a consequence, we have to lift bare numeric values
into <code>Money</code> in several places. Separate type classes for numeric
literals would avoid this. (<code>IsIntegral</code> and <code>IsRational</code> might be
sensible names, following the pattern of <code>IsString</code> and <code>IsList</code>).
Ultimately this is a minor inconvenience, but does add friction to
using <em>dollaridoos</em>, <em>tax</em>, and programs that use these libraries.</p>]]></summary>
</entry>
<entry>
    <title>Type-guided development and garden paths</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-05-12-types-garden-path.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-05-12-types-garden-path.html</id>
    <published>2021-05-12T00:00:00Z</published>
    <updated>2021-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="type-guided-development-and-garden-paths">Type-guided development and garden paths</h1>
<p><em>“Types help you reason about effects”</em>, we declare. And they do!
Except when they don’t. <em>“Just follow the types!”</em> we insist. But
sometimes the types take you down a garden path.</p>
<p>When the type checker is happy but the behaviour is all wrong, it
can be hard to find where you took the wrong turn. In this post
I’ll share real-world examples of this phenomenon, and offer some
tips on how to avoid it.</p>
<h2 id="random-generation-of-applicatives">Random generation of applicatives <a href="#random-generation-of-applicatives" class="section">§</a></h2>
<p>The <code>Applicative</code> type class provides a function for lifting a
“pure” value into the applicative data type:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Applicative</span> (<span class="ot">k ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  pure ::</span> a <span class="ot">-&gt;</span> k a</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&lt;*&gt;) ::</span> k (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> k a <span class="ot">-&gt;</span> k b</span></code></pre></div>
<p>Assume we have a random generator of values of type <code>a</code>, and wish to
generate random applicatives. The shape of this problem is:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">genAp ::</span> (<span class="dt">Applicative</span> t) <span class="ot">=&gt;</span> <span class="dt">Gen</span> a <span class="ot">-&gt;</span> <span class="dt">Gen</span> (t a)</span></code></pre></div>
<p>We can generalise <code>Gen</code> to any effect <code>f</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">effAp ::</span> (<span class="dt">Applicative</span> t) <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> f (t a)</span></code></pre></div>
<p>How can implement this? <em>Follow the types!</em> <code>t</code> has an
<code>Applicative</code> instance, so if we introduce a <code>Functor</code> constraint on
<code>f</code> we can write:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">effAp ::</span> (<span class="dt">Functor</span> f, <span class="dt">Applicative</span> t) <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> f (t a)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>effAp <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">pure</span></span></code></pre></div>
<p>Now we have a nice, general function that runs an effect and lifts
the result into an applicative. Let’s test it by generating
single-value lists of <code>Word8</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> [<span class="dt">Word8</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">120</span>]</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> [<span class="dt">Word8</span>]</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>[<span class="dv">33</span>]</span></code></pre></div>
<p>OK! Now let’s use it for the following vector type:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">V3</span> a <span class="ot">=</span> <span class="dt">V3</span> a a a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- boring</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">V3</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">V3</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Foldable</span> <span class="dt">V3</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">V3</span></span></code></pre></div>
<div class="note">
<p>This type is similar to <a href="https://hackage.haskell.org/package/linear-1.21.5/docs/Linear-V3.html#t:V3"><code>Linear.V3.V3</code></a> from
<a href="https://hackage.haskell.org/package/linear"><em>linear</em></a>, a popular linear algebra package.</p>
</div>
<p>The random <code>V3</code> values generated are:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> (<span class="dt">V3</span> <span class="dt">Word8</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">V3</span> <span class="dv">186</span> <span class="dv">186</span> <span class="dv">186</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> (<span class="dt">V3</span> <span class="dt">Word8</span>)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dt">V3</span> <span class="dv">215</span> <span class="dv">215</span> <span class="dv">215</span></span></code></pre></div>
<p>Oh dear. We followed the types to implement <code>effAp</code>, but the
implementation is not correct! Instead of running the effect 3
times to generate 3 random vector components, it ran the effect once
and used the result 3 times.</p>
<p><code>effAp</code> should first lift the <em>effect</em> into the applicative type
using <code>pure</code>, giving a value of the type <code>(Applicative t) =&gt; t (f a)</code>. The shape of the hole is now <code>t (f a) -&gt; f (t a)</code>. That is
exactly the shape of <code>sequenceA</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sequenceA</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> t (f a) <span class="ot">-&gt;</span> f (t a)</span></code></pre></div>
<p>Accepting the tighter constraints, the implementation of <code>effAp</code>
becomes:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>effAp</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f, <span class="dt">Applicative</span> t)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> f (t a)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>effAp <span class="ot">=</span> <span class="fu">sequenceA</span> <span class="op">.</span> <span class="fu">pure</span></span></code></pre></div>
<p>Now <code>effAp</code> has the expected behaviour:</p>
<pre><code>λ&gt; effAp randomIO :: IO (V3 Word8)
V3 251 198 213</code></pre>
<div class="note">
<p><code>V3</code> is one of many types for which <code>fmap pure</code> and <code>sequenceA . pure</code> behave differently. Other examples include <a href="https://hackage.haskell.org/package/bifunctors-5.5.11/docs/Data-Bifunctor-Join.html#t:Join"><code>Join (,)</code></a> and <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Proxy.html#t:Proxy"><code>Proxy</code></a>.</p>
</div>
<h2 id="composing-effects-by-ignoring-them">Composing effects (by ignoring them) <a href="#composing-effects-by-ignoring-them" class="section">§</a></h2>
<p>In <a href="https://github.com/purebred-mua/purebred">Purebred</a> we have an input validation system that checks
inputs as the user types. It dispatches the validation work to a
background thread, so the UI stays responsive. Each time the user
edits the input, the program kills the outstanding validation thread
(if any) and spawns a new one. The program code (simplified for
this article) is:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>dispatchValidation <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> spawn <span class="ot">=</span> forkIO doValidation</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  oldId <span class="ot">&lt;-</span> getValidationThread</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  newId <span class="ot">&lt;-</span> <span class="fu">maybe</span> spawn (killThread <span class="op">$&gt;</span> spawn) oldId</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  _ <span class="ot">&lt;-</span> setValidationThread (<span class="dt">Just</span> newId)</span></code></pre></div>
<p>The outstanding validation thread is stored in a <code>Maybe ThreadId</code>.
In the <code>Just</code> case the program kills the old thread, spawns a new
thread and returns the new <code>ThreadId</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>(killThread <span class="op">$&gt;</span> spawn)<span class="ot"> ::</span> <span class="dt">ThreadId</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ThreadId</span></span></code></pre></div>
<p>Except, it does not. At a glance, we see the actions occurring in
the correct order. But there was a bug. Input validation had
unexpected and nondeterministic results. For example, a valid input
might (or might not) result in an error being shown.</p>
<p>We can apprehend the error by equational reasoning:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  killThread <span class="op">$&gt;</span> spawn</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ot">=</span> <span class="fu">const</span> spawn <span class="op">&lt;$&gt;</span> killThread       <span class="co">-- definition of ($&gt;)</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ot">=</span> <span class="fu">const</span> spawn <span class="op">.</span> killThread         <span class="co">-- fmap for ((-&gt;) r)</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> <span class="fu">const</span> spawn (killThread x) <span class="co">-- definition of (.)</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> spawn                      <span class="co">-- definition of const</span></span></code></pre></div>
<p>The expression discards the old <code>ThreadId</code> and never executes
<code>killThread</code>. As a consequence, validation threads run wild,
finishing their work in a nondeterminstic order.</p>
<p>When we finally understood the problem, <a href="https://github.com/purebred-mua/purebred/pull/413/commits/4eefd939d4bb201c37e5fe2956e8777e85a6b930">the fix</a> was
straightforward. We replaced the expression:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>killThread <span class="op">$&gt;</span> spawn  <span class="co">-- broken</span></span></code></pre></div>
<p>with:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>\t <span class="ot">-&gt;</span> killThread t <span class="op">*&gt;</span> spawn  <span class="co">-- fixed</span></span></code></pre></div>
<h2 id="lessons-learned">Lessons learned <a href="#lessons-learned" class="section">§</a></h2>
<p>I discussed two bugs where the type checker was happy and the code
seemed <em>superficially</em> reasonable. Both had implementations guided
by “type tetris” (<em>what fits here?</em>) that turned out to be
fundamentally wrong. What strategies can help avoid such traps?</p>
<p>The first bug involved use of the wrong abstraction; <code>Functor</code>
instead of <code>Applicative</code>. Making an effort to test generic
functions with a greater diversity of instances might have helped
discover this bug sooner. In the case of applicatives, don’t just
test with <code>[]</code>, <code>Maybe</code> and other “common” types where <code>pure</code>
constructs a “singleton” value. Test with <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Proxy.html#t:Proxy"><code>Proxy a</code></a>
(which has zero <code>a</code> values), <a href="https://hackage.haskell.org/package/bifunctors-5.5.11/docs/Data-Bifunctor-Join.html#t:Join"><code>Join (,) a</code></a> (two <code>a</code>
values), and so on.</p>
<p>As for the second bug, my advice is don’t try to be clever when
writing effectful code. <code>do</code> notation and explicit binds are fine.
Using underscore binds to ignore values may result in more readable
code than <code>const</code> and related functions. If you have a hole with a
function type, start by writing the lambda, and work step by step to
complete the definition. Make sure it’s correct first, and only
then tidy it up (if you want to).</p>
<p>In the case of the Purebred bug, we had a hole with the type
<code>ThreadId -&gt; IO ThreadId</code>, and filled it with an expression that
<strong>subtly</strong> ignored the <code>ThreadId</code> argument. Our next step, when
faced with this hole, should have been to write the expression
<code>(\threadId -&gt; _)</code>. Critically, this binds the <code>ThreadId</code> argument,
making it hard to ignore.</p>
<p>The final takeaway is: don’t be smug about the power of the type
system. Type-guided development is indeed wonderful and powerful,
but let’s be honest that in many cases, reasoning from the types
alone won’t get you all the way to a correct solution. On the
contrary, you may find yourself at the end of a garden path!</p>]]></summary>
</entry>
<entry>
    <title>Purebred plugin system: implementation</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-03-30-purebred-plugins-implementation.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-03-30-purebred-plugins-implementation.html</id>
    <published>2021-03-30T00:00:00Z</published>
    <updated>2021-03-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="purebred-plugin-system-implementation">Purebred plugin system: implementation</h1>
<p>I previously wrote about a <a href="2021-02-02-plugin-system-prototype.html">prototype plugin system</a>
for <a href="https://github.com/purebred-mua/purebred">Purebred</a>. In this post I discuss some improvements to the
design, and report on the implementation progress.</p>
<h2 id="recap">Recap <a href="#recap" class="section">§</a></h2>
<p>The requirements for the plugin system were:</p>
<ul>
<li><p>Plugin types must express the <strong>capabilities</strong> they use, to help
users understand what the plugin can and cannot do.</p></li>
<li><p>Diverse plugins must <strong>compose</strong> together, even when they use
different capabilities.</p></li>
<li><p>Plugin function types must use <strong>abstract</strong> constraints, not
concrete types, so the application can evolve without breaking
plugins.</p></li>
<li><p>Types should be <strong>human friendly</strong>.</p></li>
<li><p>It must be possible to <strong>configure</strong> plugins, if required.</p></li>
</ul>
<p>The prototype design satisfied these requirements, with some
caveats. The biggest deficiencies were that the plugin’s type does
not reveal which hook(s) the plugin uses, and the plugin’s type
expresses the <em>union</em> of capabilities needed by all its hook
functions. There was no way for a plugin to say, for example, that
it uses <code>CanIO</code> for one hook, and <code>CanRWState</code> for some other hook.</p>
<h2 id="plugin-record-type-improvements">Plugin record type improvements <a href="#plugin-record-type-improvements" class="section">§</a></h2>
<p>Recall the <code>Plugin</code> record type from the previous article:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="dt">Plugin</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> pluginName ::</span> <span class="dt">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> pluginHook ::</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p><code>ctx</code> is the capability, for example <code>CanIO</code>. The many hooks in a
real application would appear as additional fields in this record
type. One consequence of this design is that the capability of the
plugin as a whole must be the union of capabilities actually
required by the plugin’s hook functions.</p>
<p>It also means that there is no way for the application to offer
limited capabliities to some hooks. Put another way, all
capabilities are available to all hooks. This does not reflect the
needs of real applications; they may need to restrict which
capabilities are available in different hooks.</p>
<p>The plugin system implemented in Purebred improves on the prototype
design. We define the plugin record type, now called <code>PluginDict</code>,
as follows:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PluginDict</span> <span class="ot">=</span> <span class="dt">PluginDict</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> _pluginName ::</span> <span class="dt">String</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _pluginVersion ::</span> <span class="dt">Version</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _pluginBuiltIn ::</span> <span class="dt">Bool</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _configHook ::</span> <span class="dt">ConfigHook</span> <span class="dt">CanIO</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _preSendHook ::</span> <span class="dt">PreSendHook</span> <span class="dt">Unconstrained</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p>The <code>ctx</code> type parameter is gone. Instead, each hook function field
specifies the capabilities available to that hook.</p>
<p>Each hook function is no longer a bare function but is wrapped in a
<code>newtype</code>. This (I feel) improves readability. It allows lenses to
be defined, without resorting the GHC’s currently-flaky support for
impredicative types. Use of optics is also why the field accessors,
which are not exported, are prefixed with <code>_</code>.</p>
<p>As an example of a hook type, here is the definition of
<code>PreSendHook</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">PreSendHook</span> cap <span class="ot">=</span> <span class="dt">PreSendHook</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  ( <span class="kw">forall</span> m<span class="op">.</span> (cap m) <span class="ot">=&gt;</span> <span class="dt">MIMEMessage</span> <span class="ot">-&gt;</span> m <span class="dt">MIMEMessage</span> )</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>getPreSendHook</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (cap m)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">PreSendHook</span> cap <span class="ot">-&gt;</span> <span class="dt">MIMEMessage</span> <span class="ot">-&gt;</span> m <span class="dt">MIMEMessage</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>getPreSendHook (<span class="dt">PreSendHook</span> f) <span class="ot">=</span> f</span></code></pre></div>
<div id="note-field-accessors" class="note">
<p><code>getSendPreHook</code> must be a standalone function, not a field
accessor. This is because <strong>GHC 9.0.1</strong> and later preserve the
written order of quantified type variables in field selectors
(<a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/9.0.1-notes.html#language">release note</a>):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> <span class="kw">data</span> <span class="dt">T</span> c <span class="ot">=</span> <span class="dt">T</span> {<span class="ot"> unT ::</span> <span class="kw">forall</span> m<span class="op">.</span> (c m) <span class="ot">=&gt;</span> () <span class="ot">-&gt;</span> m () }</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t unT</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- GHC 8.10.5</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ot">unT ::</span> c m <span class="ot">=&gt;</span> <span class="dt">T</span> c <span class="ot">-&gt;</span> () <span class="ot">-&gt;</span> m ()</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- GHC 9.0.1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ot">unT ::</span> <span class="dt">T</span> c <span class="ot">-&gt;</span> <span class="kw">forall</span> (<span class="ot">m ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> c m <span class="ot">=&gt;</span> () <span class="ot">-&gt;</span> m ()</span></code></pre></div>
</div>
<p>Finally, I added a field to store the plugin version, and a boolean
to distinguish between built-in and external plugins. We (the
Purebred authors) intend to use the plugin system to provide some
baseline functionality. But we do not want to treat these
behaviours as plugins from the user’s point of view. The
<code>_pluginBuiltIn</code> field lets us discriminate.</p>
<h2 id="public-plugin-type-improvements">Public plugin type improvements <a href="#public-plugin-type-improvements" class="section">§</a></h2>
<p>Plugin modules no longer export a plugin record value (what we now
call <code>PluginDict</code>). The <code>Plugin</code> type lives on, in a different
form:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Plugin</span> hooks <span class="ot">=</span> <span class="dt">Plugin</span> <span class="dt">String</span> <span class="dt">Version</span> hooks</span></code></pre></div>
<p>A <code>Plugin</code> value has a name, version, and <code>hooks</code>. What is <code>hooks</code>?
It is best understood in the context of the <code>usePlugin</code> function.
Like the <code>relax</code> function from the prototype, <code>usePlugin</code>
monomorphises plugins and prepares them for use in the main program.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">usePlugin ::</span> (<span class="dt">Hook</span> hooks) <span class="ot">=&gt;</span> <span class="dt">Plugin</span> hooks <span class="ot">-&gt;</span> <span class="dt">PluginDict</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>usePlugin (<span class="dt">Plugin</span> name ver hook) <span class="ot">=</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  setHook hook <span class="op">$</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">PluginDict</span> name ver <span class="dt">False</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>      (<span class="dt">ConfigHook</span> <span class="fu">pure</span>)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>      (<span class="dt">PreSendHook</span> <span class="fu">pure</span>)</span></code></pre></div>
<p><code>usePlugin</code> constructs a <code>PluginDict</code> full of <em>no-op</em> hooks, then
sets the plugin’s hooks via the <code>setHook</code> function. <code>hooks</code> must
have an instance of the <code>Hook</code> type class:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Hook</span> t <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  setHook ::</span> t <span class="ot">-&gt;</span> <span class="dt">PluginDict</span> <span class="ot">-&gt;</span> <span class="dt">PluginDict</span></span></code></pre></div>
<p>Each hook function type has an instance of <code>Hook</code>. These instances
set the hook function in the <code>PluginDict</code>. A quantified constraint
ensures the capabilities demanded by the hook function do not exceed
the capabilities offered. Here, as an example, is the instance for
<code>PreSendHook</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">forall</span> m<span class="op">.</span> <span class="dt">Unconstrained</span> m <span class="ot">=&gt;</span> cap m)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">Hook</span> (<span class="dt">PreSendHook</span> cap) <span class="kw">where</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  setHook (<span class="dt">PreSendHook</span> f) <span class="ot">=</span> set preSendHook (<span class="dt">PreSendHook</span> f)</span></code></pre></div>
<p>This is another reason why it was necessary to <code>newtype</code> all the
hook functions.</p>
<p>To support plugins that use multiple hooks, we declare an instance
of <code>Hook</code> for pairs (2-tuples). This allows plugins to define as
many hooks as they need, using nested tuples:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Hook</span> h1, <span class="dt">Hook</span> h2) <span class="ot">=&gt;</span> <span class="dt">Hook</span> (h1, h2) <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  setHook (h1, h2) <span class="ot">=</span> setHook h1 <span class="op">.</span> setHook h2</span></code></pre></div>
<h2 id="implementing-plugins">Implementing plugins <a href="#implementing-plugins" class="section">§</a></h2>
<p>Plugins construct and export a <code>Plugin hook</code> value, where <code>hook</code> is
a hook function type or a nested tuple of the same.</p>
<div class="note">
<p>If a plugin defines the same hook multiple times, <code>usePlugin</code>
discards all but the “leftmost” occurrence.</p>
</div>
<p>Here is the implementation of our <code>User-Agent</code> plugin:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Purebred.Plugin.UserAgent</span> (plugin) <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Lens</span> (set, view)</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.MIME</span> (headerText)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred.Plugin</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred.Version</span> (version, userAgent)</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred.Types</span> (confCharset)</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> (<span class="dt">PreSendHook</span> <span class="dt">CanReadConfig</span>)</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;UserAgent&quot;</span> version (<span class="dt">PreSendHook</span> hook) <span class="kw">where</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  hook msg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    charsets <span class="ot">&lt;-</span> view confCharsets</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> l <span class="ot">=</span> headerText charsets <span class="st">&quot;User-Agent&quot;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> set l (<span class="dt">Just</span> userAgent) msg</span></code></pre></div>
<p>The concrete type of a plugin shows the hook(s) used by the plugin,
and the capabilities required by each hook. If a plugin needs to
use multiple hooks, use nested pairs. In the example above,
<code>plugin</code> uses the <code>PreSendHook</code> with the <code>CanReadConfig</code> capability.
The type proves that the the <code>User-Agent</code> plugin only uses the
<code>PreSendHook</code>, cannot perform I/O, and so on.</p>
<div class="note">
<p>We could define <code>Hook</code> instances for 3-tuples, 4-tuples, and so on.
But I decided not to, because where does it end? Besides, I don’t
think there will be many plugins that use more than two hooks.</p>
</div>
<p>The name of the plugin value (<code>plugin</code> in the preceding example) is
not important. Plugin authors can use whatever name makes sense.
Plugins that require configuration should export a function instead
of a plain <code>Plugin</code> value, as in the following examples:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Purebred.Plugin.TweakConfig</span> <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred.Plugin</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred.Version</span> (version)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred.Types</span> (<span class="dt">UserConfiguration</span>)</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>tweakConfig</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> <span class="dt">UserConfiguration</span>)</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Plugin</span> (<span class="dt">ConfigHook</span> <span class="dt">Pure</span>)</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>tweakConfig hook <span class="ot">=</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Plugin</span> <span class="st">&quot;Purebred.Plugin.TweakConfig&quot;</span> version</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">ConfigHook</span> (<span class="fu">pure</span> <span class="op">.</span> hook))</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>tweakConfigWithIO</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> ( <span class="kw">forall</span> m<span class="op">.</span> (<span class="dt">CanIO</span> m) <span class="ot">=&gt;</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>       <span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> m <span class="dt">UserConfiguration</span> )</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Plugin</span> (<span class="dt">ConfigHook</span> <span class="dt">CanIO</span>)</span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>tweakConfigWithIO hook <span class="ot">=</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Plugin</span> <span class="st">&quot;Purebred.Plugin.TweakConfig (IO)&quot;</span> version</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">ConfigHook</span> hook)</span></code></pre></div>
<p>The <code>TweakConfig</code> module provides two variants of a plugin to adjust
Purebred’s configuration at startup. <code>tweakConfig</code> takes a pure
transformation and yields a <code>Plugin (ConfigHook Pure)</code>, whereas
<code>tweakConfigWithIO</code> allows the use of <code>IO</code>.</p>
<h2 id="using-plugins">Using plugins <a href="#using-plugins" class="section">§</a></h2>
<p>Users apply <code>usePlugin</code> to each plugin and produce a <code>[PluginDict]</code>.
That list is then given as argument to the main Purebred entry
point:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">purebred ::</span> [<span class="dt">PluginDict</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p>The user configuration file, in a basic sense, is a program that
constructs a list of plugins and applies <code>purebred</code> to it. Here is
a cut-down version of my <code>~/.config/purebred/purebred.hs</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Purebred</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Purebred.Plugin.TweakConfig</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Purebred.Plugin.ICU</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>listKeybindings <span class="ot">=</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  [ <span class="co">{- my preferred keybindings -}</span> ]</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>tweak <span class="ot">=</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    over (confIndexView <span class="op">.</span> ivBrowseThreadsKeybindings)</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>         (listKeybindings <span class="op">&lt;&gt;</span>)</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> set (confNotmuch <span class="op">.</span> nmNewTag) <span class="st">&quot;inbox&quot;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> purebred</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>  [ usePlugin <span class="op">$</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>      Purebred.Plugin.TweakConfig.tweakConfig tweak</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>  , usePlugin</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>      Purebred.Plugin.ICU.plugin</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>Some plugins have no configuration and just do their thing. But
other plugins may require the user to construct a substantial
configuration. A PGP/MIME plugin that uses GnuPG, though not
written yet, seems likely to have a lot of knobs. Plugins that
require configuration should offer ergonomic ways to construct
sensible, safe configurations.</p>
<h3 id="built-in-plugins">Built-in plugins <a href="#built-in-plugins" class="section">§</a></h3>
<p><code>defaultConfig</code> is the default <code>UserConfiguration</code> value. It is not
exported, but it can be modified by <code>ConfigHook</code>s. Built-in plugins
are already set in the <code>confPlugins</code> field of <code>defaultConfig</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">defaultConfig ::</span> <span class="dt">UserConfiguration</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>defaultConfig <span class="ot">=</span> <span class="dt">Configuration</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  { _confPlugins <span class="ot">=</span> set pluginBuiltIn <span class="dt">True</span> <span class="op">&lt;$&gt;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>      [ usePlugin Purebred.Plugin.UserAgent.plugin</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>      …</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>      ]</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>  …</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p><code>usePlugin</code> sets the <code>pluginBuiltIn</code> field to <code>False</code>. But we reset
it to <code>True</code> for all built-in plugins. The <code>pluginBuiltIn</code> optic is
not exported. Therefore users cannot change the treatment of a
plugin from built-in to external, or vice versa.</p>
<p>The <code>purebred</code> entry point merges user-supplied plugins with the
built-in plugins:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">purebred ::</span> [<span class="dt">PluginDict</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>purebred plugins <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  …</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    cfg <span class="ot">=</span> over confPlugins (plugins <span class="op">&lt;&gt;</span>) defaultConfig</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    dyreParams <span class="ot">=</span> …</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  Dyre.wrapMain dyreParams cfg</span></code></pre></div>
<h2 id="executing-plugins">Executing plugins <a href="#executing-plugins" class="section">§</a></h2>
<p>Purebred executes <code>ConfigHook</code>s immediately after Dyre (the
configuration system) invokes the “real main” action (called
<code>launch</code>):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">launch ::</span> <span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>launch inCfg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    plugins <span class="ot">=</span> view confPlugins inCfg</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    hooks <span class="ot">=</span> getConfigHook <span class="op">.</span> view configHook <span class="op">&lt;$&gt;</span> plugins</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  cfg <span class="ot">&lt;-</span> <span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> hooks inCfg</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  …</span></code></pre></div>
<p><code>PreSendHook</code>s are executed in the action that sends mail:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> msg <span class="ot">=</span> …</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  hooks <span class="ot">&lt;-</span> uses (asConfig <span class="op">.</span> confPlugins)</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>           (<span class="fu">fmap</span> (getPreSendHook <span class="op">.</span> view preSendHook))</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  cfg <span class="ot">&lt;-</span> use asConfig</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  msg&#39; <span class="ot">&lt;-</span> runReaderT (<span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> hooks msg) cfg</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  k (buildMessage msg&#39;)</span></code></pre></div>
<p>These two examples reveal a pattern for hook execution:</p>
<ol type="1">
<li><p>Extract the relevant hook functions from the <code>[PluginDict]</code></p></li>
<li><p>Use Kleisli composition <code>(&gt;=&gt;)</code> to fold the list into a single
action.</p></li>
<li><p>Execute the composed action, using transformers if necessary.</p></li>
</ol>
<p>This pattern applies when the hook function type has the shape <code>a -&gt; m a</code>. So far, all the hook functions have that shape.</p>
<h2 id="hooks-in-purebred">Hooks in Purebred <a href="#hooks-in-purebred" class="section">§</a></h2>
<p>The hooks we have already implemented are:</p>
<ul>
<li><p><strong><code>ConfigHook</code></strong>: modify configuration at program startup.</p></li>
<li><p><strong><code>PreSendHook</code></strong>: modify or process a message immediately prior
to sending. We currently use this hook, in a built-in plugin, to
add a <code>User-Agent</code> header to outgoing messages. Can perform I/O.
This is the hook that will be used to sign and/or encrypt outgoing
mail. We will probably also add a capability to enable a plugin
to abort sending.</p></li>
</ul>
<p>Hooks we haven’t implemented, but must, include (names subject to
change):</p>
<ul>
<li><p><strong><code>DisplayHook</code></strong>: modify or process a message before displaying
it. One use case is to perform decryption or verify signatures.</p></li>
<li><p><strong><code>PreEditHook</code></strong>: process a part before editing it. Together
with <code>PostEditHook</code> this could be used to enable editing of
headers along with text bodies.</p></li>
<li><p><strong><code>PostEditHook</code></strong>: process a message part after editing it.</p></li>
</ul>
<p>We have thought of some other hooks that seem useful, but haven’t
yet committed to implementing:</p>
<ul>
<li><p><strong><code>CreateHook</code></strong>: modify a message immediately after creation
(i.e. before editing). A proposed use is appending “signature”
content.</p></li>
<li><p><strong><code>ReadHook</code></strong>: process raw message data when reading from disk.
A plugin could use this to detect compressed files and inflate
them. Another use case could be to attempt to “repair” corrupt or
nonconformant messages.</p></li>
</ul>
<p>Purebred also needs an “address book” interface. We want plugins to
be able to provide address book behaviour. But we haven’t designed
it yet. It remains to be seen whether we will do it by way of hooks
(as described in this post), or by updating the main configuration
(via <code>ConfigHook</code>), or by some other means.</p>
<h2 id="discussion">Discussion <a href="#discussion" class="section">§</a></h2>
<p>Although I felt that the prototype design did satisfy the
<em>capabilities</em> requirement, there were some deficiencies. I
identified and discussed these in <a href="2021-02-02-plugin-system-prototype.html">the original
article</a>. In particular, the <code>Plugin</code> type did not
express which hooks the plugin uses, nor could a plugin acquire
different capabilities for different hooks. The updated design
eliminates these deficiencies.</p>
<p>Plugins now have a version field, and the internal representation
also distinguishes between built-in and external plugins. We use
this to hide built-ins when listing plugins in the <code>--version</code>
output.</p>
<p>The problems of UI interaction, and how plugins can store and use
plugin-specific state, remain unsolved.</p>
<p>There is also the question of hook execution order or priority.
Hook functions process and potentially modify a datum of interest,
such as a <code>Message</code> or a <code>ByteString</code>. Consider <code>ReadHook</code>, for
processing messages as they’re read from disk, and its hypothetical
counterpart <code>WriteHook</code>. A plugin for on-disk mail compression would use
these hooks. When reading mail, decompression must precede other
operations. When writing, compression should be the final step.
The current implementation runs plugins hooks in the order they’re
stored—external plugins first, then built-ins. So plugins that
involve dual operations (compression, encryption) present inherent
challenges. And there is no way to tame unwanted interactions
between external and built-in plugins.</p>
<p>For now, the ordering problem is theoretical. I haven’t encountered
it in practice, because few plugins have been implemented. So I’m
not going to try to solve the problem prematurely. I have an idea
that does not add much complexity and should be simple for users to
understand. But I will save that discussion for a future post.</p>]]></summary>
</entry>
<entry>
    <title>How Dyre works with Cabal Nix-style builds</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-03-18-dyre-cabal-store.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-03-18-dyre-cabal-store.html</id>
    <published>2021-03-18T00:00:00Z</published>
    <updated>2021-03-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="how-dyre-works-with-cabal-nix-style-builds">How Dyre works with Cabal Nix-style builds</h1>
<p><a href="https://hackage.haskell.org/package/dyre">Dyre</a> is a tool for Haskell program configuration by
(re)compilation. In <a href="2021-02-21-dyre-0.9-rc.html">my previous post</a> I discussed the changes
planned for the Dyre 0.9 release. That release happened a couple of
days ago… but I soon discovered a critical bug in Dyre’s support for
<em>cabal-install</em> Nix-style local builds.</p>
<p>I have now <a href="https://github.com/willdonnelly/dyre/commit/414d961222b5b864933f35f0a0d74b1a2f501a23">fixed the bug</a> and <a href="https://hackage.haskell.org/package/dyre-0.9.1">released v0.9.1</a>. As a result
of the experience I decided to write this post about how Nix-style
local builds work, and how Dyre works with programs built and
installed that way.</p>
<h2 id="ghc-and-package-databases">GHC and package databases <a href="#ghc-and-package-databases" class="section">§</a></h2>
<p>Haskell packages are installed in <em>package databases</em>. The package
database contains libraries’ object code and Haskell interface
(<code>*.hi</code>) files, as well as package descriptions and references to
the library’s dependencies. When compiling and linking a program or
library, GHC looks for dependencies in the configured package
database(s).</p>
<p>By default, GHC knows about two package databases. The <em>global
package database</em> is where <em>base</em> and the other libraries bundled
with GHC are installed. The database location is tied to the GHC
release; for example: <code>/usr/lib64/ghc-8.8.4/package.conf.d</code>. On
most operating systems, the system package manager will install
Haskell libraries in the global package database.</p>
<p>GHC also knows about <em>user package databases</em>. On Unix systems
these are located at <code>~/.ghc/ARCH-OS-GHCVER/package.conf.d</code>. As the
name and location suggests, unprivileged users can install packages
to their user package database. GHC will also search for
dependencies in there, unless told otherwise.</p>
<p><em>cabal-install</em> (the <code>cabal</code> program) and the system package manager take care of these
package databases. Users don’t normally need to look into or modify
them. For the curious (or cursed), you can use the <code>ghc-pkg</code>
program to inspect and modify package databases. For example,
here’s how to list the contents of the global package database:</p>
<pre class="shell"><code>% ghc-pkg --global list
/usr/lib64/ghc-8.8.4/package.conf.d
    Cabal-3.0.1.0
    Glob-0.10.0
    HTTP-4000.3.14
    HsYAML-0.2.1.0
    HsYAML-aeson-0.2.0.0
    … (many more)</code></pre>
<p>Let’s have a look at one of the records in the global package
database:</p>
<pre><code>% cat /usr/lib64/ghc-8.8.4/package.conf.d/mtl-2.2.2.conf
name:                 mtl
version:              2.2.2
visibility:           public
id:                   mtl-2.2.2
key:                  mtl-2.2.2
license:              BSD-3-Clause
maintainer:           Edward Kmett &lt;ekmett@gmail.com&gt;
author:               Andy Gill
homepage:             http://github.com/haskell/mtl
synopsis:             Monad classes, using functional dependencies
description:
    … (elided)
category:             Control
abi:                  7208c11cc6615ddff9d903a90a9878f8
exposed:              True
exposed-modules:
    … (elided)
import-dirs:          /usr/lib64/ghc-8.8.4/mtl-2.2.2
library-dirs:         /usr/lib64/ghc-8.8.4/mtl-2.2.2
dynamic-library-dirs: /usr/lib64
data-dir:             /usr/share/x86_64-linux-ghc-8.8.4/mtl-2.2.2
hs-libraries:         HSmtl-2.2.2
depends:              base-4.13.0.0 transformers-0.5.6.2
haddock-interfaces:   /usr/share/doc/ghc/html/libraries/mtl-2.2.2/mtl.haddock
haddock-html:         /usr/share/doc/ghc/html/libraries/mtl-2.2.2</code></pre>
<p>Most fields are self explanatory, but some need a little
explanation:</p>
<ul>
<li><p><strong><code>id</code></strong> is the <em>unit ID</em> that uniquely identifies the package. In
the example above it includes the package <code>name</code> and <code>version</code>;
a unit ID can also include other identifying data.</p></li>
<li><p><strong><code>depends</code></strong> lists the direct dependencies of this package, as
unit IDs.</p></li>
<li><p><strong><code>exposed</code></strong> controls whether the modules in the package are
available to import during compilation. This is just the
default. GHC command line options and <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/packages.html#package-environments"><em>package environment
files</em></a> can alter package visibility.</p></li>
</ul>
<p>For more details see the <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/packages.html"><em>Packages</em> chapter</a> of
the GHC User’s Guide.</p>
<h2 id="cabal-install-and-package-databases"><em>cabal-install</em> and package databases <a href="#cabal-install-and-package-databases" class="section">§</a></h2>
<p>In earlier times, the <em>cabal-install</em> build tool would install all
dependencies of a package into the global or user package database.
But when you have multiple packages with conflicting dependencies,
this approach does not work. It also makes updating packages very
risky. Updating one package (because some dependent program or
library requires a newer version) would often break other installed
dependent packages.</p>
<p><em>cabal-install</em>’s first solution to this problem was <a href="https://cabal.readthedocs.io/en/3.2/installing-packages.html#developing-with-sandboxes">per-project
sandboxes</a>. When using a sandbox, <em>cabal-install</em> installs
dependencies (those that are not in the global or user package
database) under <code>.cabal-sandbox/</code> in the project directory.
Sandboxes are isolated from each other. This solved the main
problem but introduced another. Many projects meant many sandboxes,
wasting a lot of time and space as common dependencies got built
over and over again, in different sandboxes.</p>
<p>Furthermore, users had to deliberately create sandboxes. The
problematic behaviour (install to the user package database) was the
default behaviour. You had to <em>know</em> about, and use, sandboxes to
avoid trouble.</p>
<div class="note">
<p>Sandbox support was removed in <em>cabal-install</em> 3.4.</p>
</div>
<h2 id="nix-style-local-builds">Nix-style local builds <a href="#nix-style-local-builds" class="section">§</a></h2>
<p><em>cabal-install</em> since version 1.24 supports <a href="https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html"><em>Nix-style local
builds</em></a>. It is the default behaviour (i.e. what <code>cabal build</code> does) since version 2.0. The feature is also called
<em><code>v2-build</code></em> or <em><code>new-build</code></em></p>
<p>This build system caches dependencies in a package database at
<code>~/.cabal/store/GHCVER/package.db</code>. I call this package database
the <strong><em>Cabal store</em></strong>. The unit IDs of packages in the Cabal store
include the name, version, and a digest (hash) of the entire package
contents, which prevents collisions. For example, <code>ghc-pkg</code> can
print the unit IDs of all the variants of <em>purebred-email</em> in my
Cabal store. Note that there are multiple variants even of
particular versions (some were development builds):</p>
<pre class="shell"><code>% ghc-pkg \
    --package-db ~/.cabal/store/ghc-8.8.4/package.db \
    field purebred-email id \
    | sort
id: purebred-email-0.4.2-904f4dca7fc38b0732875f3118229289f0a854a1b29ceb6f61952455fc536475
id: purebred-email-0.4.2-937f77fe675ce899d5b8bf4e451f09d83f458db59751e28d393dafa5d0e46e80
id: purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7
id: purebred-email-0.4.3-132e0f4a654056feced84d90a98b5cc3f8635b2a56e2821e5193cace1a73946d
id: purebred-email-0.5.0-04c8aceff5a68a6eb0537475f958dcb2aa763675c36a57893119534e690ebfe7
id: purebred-email-0.5.0-0a5c9f98d485c79e5bbbb3eefbc8239c4e5a74dc26d03fc0a12ce8a45a304c8d
id: purebred-email-0.5.0-4c9fa1b81ac8638346df176519fee11541953f243502699a8693f69fafc2293f
id: purebred-email-0.5.0-cc781fa90dc462076d5be322d38e59b76a1604cb866e8b6a15a150653e9f6595
id: purebred-email-0.5.0-e8d411ef4593a88bbd40293b523c03079a01138f9bb1278781a4eb5a15cf461f</code></pre>
<p>If we inspect the <code>depends</code> fields of one of these packages, we see
a mix of unit IDs with and without hashes. The ones without hashes
will be located in the global package database, and the ones with
hashes are other packges in the Cabal store:</p>
<pre class="shell"><code>% ghc-pkg \
    --package-db ~/.cabal/store/ghc-8.8.4/package.db \
    --unit-id \
    field purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7 \
    depends
depends: attoparsec-0.13.2.4-6pdJvsCYDtQ1ZikLcQPH6i base-4.13.0.0
         base64-bytestring-1.0.0.3-6nNbupf0oNc9ekFOSwyfJw
         bytestring-0.10.10.1 case-insensitive-1.2.1.0-GK3nA3zBZszGkFybfKiPH
         concise-0.1.0.1-9e9a3f5d1a0cb55cc27d6ed4559347484ed0182db25d17f54fecc4cb16c664f3
         deepseq-1.4.4.0 lens-4.18.1-1Ci7u4sFw8083dvBI6HqCw
         semigroupoids-5.3.4-3QeAlkxMhKa1rjJSsIVWj7
         semigroups-0.19.1-LKdktuRRdRZ1yx9gBXzSbK
         stringsearch-0.3.6.6-ea9567d6b6c3d6f0b0229eaa65b28da6602e2135e50018657a4d1545dc4a0d0c
         text-1.2.4.0 time-1.9.3</code></pre>
<p>Object code filenames of libraries installed in the Cabal store
incorporate the full unit ID:</p>
<pre class="shell"><code>% cd ~/.cabal/store/ghc-8.8.4/purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7/lib
% ls
Data
libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7.a
libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7-ghc8.8.4.so</code></pre>
<p>To assist the dynamic linker, the <code>RUNPATH</code> attribute in dynamically
linked executables and shared objects includes the subdirectories of
the Cabal store where the needed shared objects are located:</p>
<pre class="shell"><code>% objdump -x libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7-ghc8.8.4.so \
    | grep RUNPATH \
    | awk &#39;{ print $2 }&#39; \
    | tr : &#39;\n&#39; \
    | sort
/home/ftweedal/.cabal/store/ghc-8.8.4/concise-0.1.0.1-9e9a3f5d1a0cb55cc27d6ed4559347484ed0182db25d17f54fecc4cb16c664f3/lib
/home/ftweedal/.cabal/store/ghc-8.8.4/stringsearch-0.3.6.6-ea9567d6b6c3d6f0b0229eaa65b28da6602e2135e50018657a4d1545dc4a0d0c/lib
/usr/lib64
/usr/lib64/ghc-8.8.4/rts</code></pre>
<p>Executables are installed in the Cabal store and referenced by a
symbolic link installed in <code>~/.cabal/bin/</code> or a similar location.</p>
<pre class="shell"><code>% which purebred
~/.cabal/bin/purebred
% readlink ~/.cabal/bin/purebred
../store/ghc-8.8.4/purebred-0.1.0.0-ffa8d363a9788cf11f71e6dbad787526a4fa1f9f750969f4d55036610f5cb027/bin/purebred</code></pre>
<h2 id="dyre-and-the-cabal-store">Dyre and the Cabal store <a href="#dyre-and-the-cabal-store" class="section">§</a></h2>
<p>When using <em>cabal-install</em>, the details about the Cabal store are
hidden from the user. But a Dyre-enabled program does not have the
luxury of using <em>cabal-install</em> when (re)compiling a custom
executable. We cannot assume that the <code>cabal</code> program is available.
Even if we did make that assumption, using <em>cabal-install</em> would
introduce <strong>a lot</strong> of additional complexity. And maintenance
overhead, because <em>cabal-install</em>’s behaviour is continually
evolving, whereas GHC’s command line interface is stable.</p>
<p>So Dyre invokes GHC directly. When a Dyre application’s main
library is in the global or user package database, GHC finds it and
all is well. But when the library is in the Cabal store, GHC cannot
find it:</p>
<pre class="shell"><code>% purebred
Configuration &#39;/home/fraser/.config/purebred/purebred.hs&#39; changed. Recompiling.
Error occurred while loading configuration file.
purebred: 
/home/fraser/.config/purebred/purebred.hs:5:1: error:
    Could not find module ‘Purebred’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
5 | import Purebred
  | ^^^^^^^^^^^^^^^

CallStack (from HasCallStack):
  error, called at src/Purebred.hs:347:69 in purebred-0.1.0.0-95b0b0050ea0df258f6dce7f45c7c58630549c4395e1e143f3e0915c057e8cbc:Purebred</code></pre>
<p>To overcome this, Dyre needs to detect when the application library
is installed in the Cabal store, and pass some additional command
line options to GHC:</p>
<ul>
<li><p>The <code>-package-db &lt;FILE&gt;</code> option adds the package database at
<code>FILE</code> to the list of databases GHC searches. Dyre uses this
option to add the Cabal store.</p></li>
<li><p>The <code>-package-id &lt;UNIT-ID&gt;</code> option <em>exposes</em> the package
identified by <code>UNIT-ID</code>, making its public modules available for
import. Dyre uses this option to expose the main application
library.</p></li>
</ul>
<p>In Dyre’s implementation, the <code>getCabalStoreGhcArgs</code> function
computes these options. It is applied to a Dyre project name and a
library path. If the library path is in the Cabal store <em>and</em>
matches the project name, Dyre derives the appropriate <code>-package-db</code>
and <code>-package-id</code> options.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.FilePath</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  (joinPath, splitPath, dropTrailingPathSeparator)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ot">getCabalStoreGhcArgs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>getCabalStoreGhcArgs proj <span class="ot">=</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    mkArgs <span class="op">.</span> go <span class="op">.</span> <span class="fu">fmap</span> dropTrailingPathSeparator <span class="op">.</span> splitPath</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>  go (<span class="st">&quot;.cabal&quot;</span> <span class="op">:</span> <span class="st">&quot;store&quot;</span> <span class="op">:</span> hc <span class="op">:</span> pid <span class="op">:</span> _) <span class="ot">=</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> splitOn <span class="ch">&#39;-&#39;</span> pid <span class="kw">of</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>      [name, _version, _hash] <span class="op">|</span> name <span class="op">==</span> proj</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="ot">-&gt;</span> <span class="dt">Just</span> (pid, [<span class="st">&quot;.cabal&quot;</span>, <span class="st">&quot;store&quot;</span>, hc, <span class="st">&quot;package.db&quot;</span>])</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>      _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>  go (h <span class="op">:</span> t<span class="op">@</span>(_ <span class="op">:</span> _ <span class="op">:</span> _ <span class="op">:</span> _ <span class="op">:</span> _)) <span class="ot">=</span> <span class="fu">fmap</span> (h<span class="op">:</span>) <span class="op">&lt;$&gt;</span> go t</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>  go _ <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  mkArgs <span class="dt">Nothing</span> <span class="ot">=</span> []</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  mkArgs (<span class="dt">Just</span> (unitId, pkgDb)) <span class="ot">=</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    [<span class="st">&quot;-package-db&quot;</span>, joinPath pkgDb, <span class="st">&quot;-package-id&quot;</span>, unitId]</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>  splitOn a l <span class="ot">=</span> <span class="kw">case</span> <span class="fu">span</span> (<span class="op">/=</span> a) l <span class="kw">of</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>    (h, []) <span class="ot">-&gt;</span> [h]</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>    (h, _ <span class="op">:</span> t) <span class="ot">-&gt;</span> h <span class="op">:</span> splitOn a t</span></code></pre></div>
<div class="note">
<p><em>cabal-install</em> lets you <a href="https://cabal.readthedocs.io/en/3.4/cabal-project.html?highlight=store-dir#cmdoption-store-dir">override the Cabal store directory</a>. Dyre
assumes the default <code>~/.cabal/store/</code>. If the Cabal store is not in
the expected place, the detection logic fails.</p>
</div>
<p>The final piece of the puzzle is how Dyre learns the application’s
library directory that will be the <code>FilePath</code> argument to
<code>getCabalStoreGhcArgs</code>. Dyre itself is just a library. We rely on
the main program to tell Dyre where its library is located. The
only alternative I know of is brittle, operating system-specific
hacks.</p>
<p>Cabal packages can make use of an auto-generated <a href="https://cabal.readthedocs.io/en/3.4/cabal-package.html#accessing-data-files-from-package-code"><code>Paths_&lt;pkgname&gt;</code>
module</a>. It provides <code>IO</code> actions that return the
installation paths of the package (object files, binaries, data and
so on), including:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getLibDir ::</span> <span class="dt">IO</span> <span class="dt">FilePath</span></span></code></pre></div>
<p>Dyre applications can read this value and pass it to Dyre via the
<a href="https://hackage.haskell.org/package/dyre-0.9.1/docs/Config-Dyre.html#v:includeDirs"><code>includeDirs</code></a> field in the <code>Params</code> object. Here is
a simplified example:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">MyApp</span> <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Config.Dyre</span> <span class="kw">as</span> <span class="dt">Dyre</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Paths_myapp</span> (getLibDir)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Configuration</span> <span class="ot">=</span> …</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ot">defaultConfig ::</span> <span class="dt">Configuration</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>defaultConfig <span class="ot">=</span> …</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="ot">realMain ::</span> <span class="dt">Configuration</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>realMain <span class="ot">=</span> …</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>  libdir <span class="ot">&lt;-</span> getLibDir</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> params <span class="ot">=</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>        ( Dyre.newParams <span class="st">&quot;myapp&quot;</span> realMain (<span class="fu">const</span> <span class="fu">error</span>) )</span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        { Dyre.includeDirs <span class="ot">=</span> [libdir] }</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>  Dyre.wrapMain params defaultConfig</span></code></pre></div>
<div class="note">
<p>For Cabal store detection to work, the Dyre project name (<code>myapp</code> in
the example above), <strong>must</strong> be the same as the library package
name. Otherwise <code>getCabalStoreGhcArgs</code> will fail to detect the
package ID to expose.</p>
</div>
<p>With this small additional behaviour in place, Dyre detects that the
library is in a Cabal store and passes the extra CLI options to GHC.
GHC finds the library and compiles the program successfully:</p>
<pre class="shell"><code>% purebred
Configuration &#39;/home/fraser/.config/purebred/purebred.hs&#39; changed.
Recompiling.
Program reconfiguration successful.
Launching custom binary /home/fraser/.cache/purebred/purebred-linux-x86_64
… (realMain executes)</code></pre>
<h2 id="discussion">Discussion <a href="#discussion" class="section">§</a></h2>
<p>It is unfortunate that the author of a Dyre application must do
extra work to enable it to work with the Cabal store. Even though
it is a small effort, it is something most programs will want to do.
I have so far been unable to conceive a robust solution that avoids
this work.</p>
<p>Dyre pre-0.9 did not have this feature. To enable <a href="https://github.com/purebred-mua/purebred">Purebred</a> to
work with the Cabal store, we performed the detection and
constructed the extra GHC options ourselves. Then we passed the
extra options to Dyre via the <a href="https://hackage.haskell.org/package/dyre-0.9.1/docs/Config-Dyre.html#v:ghcOpts"><code>ghcOpts</code></a> fields of the <code>Params</code> type.
This behaviour was ported to Dyre more or less <em>as-is</em> for the 0.9
release. Except for the bit that I forgot to port, which was
restored in v0.9.1.</p>
<p>My Purebred co-author reported a regression with Nix support in Dyre
0.9.x. Under Nix, GHC fails to find the application library during
custom binary compilation. I suspect the cause is an incidental
behavioural change as a result of porting the detection logic from
Purebred to Dyre. But I have not yet started a proper
investigation.</p>]]></summary>
</entry>

</feed>
