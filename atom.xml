<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>pureblog</title>
    <link href="https://frasertweedale.github.io/blog-fp/atom.xml" rel="self" />
    <link href="https://frasertweedale.github.io/blog-fp" />
    <id>https://frasertweedale.github.io/blog-fp/atom.xml</id>
    <author>
        <name>Fraser Tweedale</name>
        
        <email>frase@frase.id.au</email>
        
    </author>
    <updated>2023-06-04T00:00:00Z</updated>
    <entry>
    <title>haskell-ci how-to: caching and using your program executable</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2023-06-04-haskell-ci-use-executable.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2023-06-04-haskell-ci-use-executable.html</id>
    <published>2023-06-04T00:00:00Z</published>
    <updated>2023-06-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="haskell-ci-how-to-caching-and-using-your-program-executable"><code>haskell-ci</code> how-to: caching and using your program executable</h1>
<p>In this article I show how to extend the <code>haskell-ci</code> GitHub Actions
workflow to pass the built executable to subsequent jobs.</p>
<h2 id="background">Background <a href="#background" class="section">§</a></h2>
<p>The Haskell <em>Security Response Team</em> recently bootstrapped the
<a href="https://github.com/haskell/security-advisories"><em>haskell/security-advisories</em></a> database.
This repository contains:</p>
<ul>
<li>The security advisories themselves. These are freeform Markdown
files with a TOML header. The header contains various required or
optional fields encoding information about the security issue, the
package it affects, and the affected package versions.</li>
<li>Tools for maintaining the database and exporting the data in
various formats. The <em>hsec-tools</em> Cabal package contains a
library that defines the advisory data format and parsers, and the
<code>hsec-tools</code> executable which is a CLI front-end for processing
advisories.</li>
</ul>
<p>With both tool sources and advisory data in the repository our
<em>continuous integration (CI)</em> pipelines have to do several things:</p>
<ul>
<li><strong>Build and test the tools.</strong> We want to test against several
recent GHC versions (to avoid inconvenience for contributors). We
also perform a Nix build.</li>
<li><strong>Check the validity of the advisory data.</strong> Advisories have to
conform to our schema. We can use <code>hsec-tools</code> to check each
advisory file. We <em>should</em> use the version of <code>hsec-tools</code> from
the same commit, to allow the advisory format and tooling to
evolve in lockstep.</li>
<li><strong>Publish advisories.</strong> We will likely want to set up automation
to publish <a href="https://osv.dev/">OSV</a> streams, a web site, and other relevant
artifacts.</li>
</ul>
<p>The remainder of this post explains how we use <code>haskell-ci</code> and
GitHub Actions reusable workflows to achieve the first two
objectives. The Security Response Team has not yet tackled
<em>publishing</em> but the same techniques should be applicable.</p>
<h2 id="introduction-to-haskell-ci">Introduction to <code>haskell-ci</code> <a href="#introduction-to-haskell-ci" class="section">§</a></h2>
<p><a href="https://github.com/haskell-CI/haskell-ci"><code>haskell-ci</code></a> is a tool that generates CI
workflows for Haskell projects. It supports GitHub Actions
(actively maintained) and Travis-CI (unmaintained), and can also
generate shell scripts for local testing. You can install
<code>haskell-ci</code> via <code>cabal</code>:</p>
<pre class="shell"><code>% cabal install haskell-ci</code></pre>
<p>Alternatively, you can clone the Git repository and build from
there:</p>
<pre class="shell"><code>% git clone https://github.com/haskell-CI/haskell-ci
% cd haskell-ci
% cabal install</code></pre>
<p>Now that <code>haskell-ci</code> is on the <code>PATH</code> you can generate the GitHub
actions workflow in a couple of steps. First, add the GHC versions
you want to test with to the <a href="https://cabal.readthedocs.io/en/3.6/cabal-package.html#pkg-field-tested-with"><code>tested-with</code></a>
field in your package’s <code>.cabal</code> file:</p>
<pre><code>cabal-version:      2.4
name:               hsec-tools
version:            0.1.0.0
tested-with:
  GHC ==8.10.7 || ==9.0.2 || ==9.2.7 || ==9.4.5 || ==9.6.2
…</code></pre>
<div class="note">
<p>Run <code>haskell-ci list-ghc</code> to see the list of GHC versions it knows
about. <code>haskell-ci</code> updates usually follow soon after GHC releases,
especially major versions.</p>
</div>
<p>Next run <code>haskell-ci github path/to/package.cabal</code>. It will
inspect the <code>.cabal</code> file to see what GHC versions to include in the
build matrix, and write <code>.github/workflows/haskell-ci.yml</code>. Then
commit the changes and push (or create a pull request). For
example:</p>
<pre class="shell"><code>% haskell-ci github code/hsec-tools/hsec-tools.cabal
*INFO* Generating GitHub config for testing for GHC versions: 8.10.7 9.0.2 9.2.7 9.4.5 9.6.2
% git add code .github
% git commit -m &#39;ci: add haskell-ci workflow&#39; --quiet
% git push
…</code></pre>
<h3 id="what-does-the-haskell-ci-workflow-do">What does the <code>haskell-ci</code> workflow do? <a href="#what-does-the-haskell-ci-workflow-do" class="section">§</a></h3>
<p>This post is not the place to belabour the details of GitHub Actions
<a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">workflow syntax</a>. But I will make a few
observations about the steps in the <code>haskell-ci</code> workflow.</p>
<ul>
<li>The build runs on Ubuntu (version 20.04 at time of writing). You
can tell <code>haskell-ci</code> to install <strong>extra APT packages</strong> via option
<code>--apt "space separated list"</code>. For example, if your package uses
the FFI to bind to a C library, use this option to install that
library and its development headers.</li>
<li>There is a job <em>matrix</em> with a different job for each of the GHC
versions mentioned in the <code>tested-with</code> field.</li>
<li>Each job downloads GHC via <a href="https://www.haskell.org/ghcup/">GHCUp</a>, a popular, multi-platform
installation tool for Haskell.</li>
<li>The package under test is not built <em>in situ</em>. Instead, a source
distribution is built using <code>cabal sdist</code>. It is then unpacked in
a different location, and built and tested there. This helps
<strong>detect packaging errors</strong> (e.g. missing extra source or data
files).</li>
<li>The job caches build tools and Haskell dependencies using the
GitHub Actions cache mechanism (discussed later in the post).
This saves time on subsequent test runs.</li>
<li>There is a step that runs <code>cabal check</code>, which checks for issues
that Hackage may complain about if you try to publish your package
there. This could be a mild annoyance for private or toy
projects.</li>
</ul>
<h3 id="adding-haddock-and-hlint-jobs">Adding Haddock and HLint jobs <a href="#adding-haddock-and-hlint-jobs" class="section">§</a></h3>
<p><code>haskell-ci</code> makes it easy to add <a href="https://haskell-haddock.readthedocs.io/en/latest/">Haddock</a> (build documentation) and
<a href="https://hackage.haskell.org/package/hlint">HLint</a> (source code suggestions) jobs to your workflow. Just use the
<code>--haddock</code> and <code>--hlint</code> options when creating the workflow:</p>
<pre class="shell"><code>% haskell-ci github --haddock --hlint path/to/package.cabal</code></pre>
<p>The Haddock step (if enabled) runs on every job in the build matrix.
Haddock is part of the GHC toolchain so there are no extra
dependencies.</p>
<p>HLint <em>is</em> an extra dependency; if the HLint step is enabled, it
will install it via <code>cabal v2-install</code>. The HLint step is skipped
for all but one of the jobs in the matrix—by default, the most
recent version of GHC.</p>
<div class="note">
<p><code>haskell-ci</code> prefers a particular version of <code>HLint</code>. Sometimes
that version of HLint doesn’t build against the latest version of
GHC. Use the <code>--hlint-job</code> option to override the job:</p>
<pre class="shell"><code>% haskell-ci github --hlint --hlint-job 9.4.5 foo.cabal</code></pre>
</div>
<h3 id="updating-the-build-matrix">Updating the build matrix <a href="#updating-the-build-matrix" class="section">§</a></h3>
<p>When a new release of GHC comes along, updating the <code>haskell-ci</code>
workflow is as simple as adding it to the <code>tested-with</code> list, then
running:</p>
<pre class="shell"><code>% haskell-ci regenerate
No haskell-ci.sh, skipping bash regeneration
*INFO* Generating GitHub config for testing for GHC versions: 8.10.7 9.0.2 9.2.7 9.4.5 9.6.2
No .travis.yml, skipping travis regeneration</code></pre>
<p><code>haskell-ci regenerate</code> reuses the options from the original
invocation of <code>haskell-ci github</code>. These were recorded in a comment
starting with <code># REGENDATA</code> in <code>haskell-ci.yml</code>. After running
<code>haskell-ci regenerate</code>, all that’s left is to commit and push the
changes.</p>
<h2 id="github-actions-passing-the-executable-between-jobs">GitHub Actions: passing the executable between jobs <a href="#github-actions-passing-the-executable-between-jobs" class="section">§</a></h2>
<p>Now the <code>haskell-ci</code> job is set up it will build and test the
package on every push or pull request. We have a further CI use
case: using the built executable to perform additional action. So
we now turn to the problem of <strong>how to use data produced by the
<code>haskell-ci</code> workflow in other jobs</strong>.</p>
<p>GitHub Actions provides (at least) 3 mechanisms for passing data
between jobs.</p>
<ul>
<li>Jobs can define <a href="https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs"><strong><em>outputs</em></strong></a>. They must be unicode
strings and the size limit is 50MB. Both limitations make this
mechanism unsuitable for passing the built executable to dependent
jobs.</li>
<li>Jobs can <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows"><strong><em>cache</em></strong></a> dependencies to speed up the
build. But we want to cache the <em>result</em> of the build, which will
often be different from previous build. It seems to me that we
<em>could</em> use the caching mechanism, but it doesn’t feel like a good
fit.</li>
<li>Jobs can upload build <a href="https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts"><strong><em>artifacts</em></strong></a>. This makes
them available to subsequent jobs in the workflow. Unlike caches,
they can also be downloaded by anyone with access to the
repository. This is the appropriate mechanism for our use case.</li>
</ul>
<div class="note">
<p>By default GitHub retains artifacts for 90 days. The <a href="https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#configuring-a-custom-artifact-retention-period">duration can
be customised</a>.</p>
</div>
<p>We need to add two steps to the <code>linux</code> job. First we install the
<code>hsec-tools</code> executable. It was already built—this just copies it
to a known location. <code>--install-method=copy</code> ensures the executable
is copied to that location, not symlinked.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> install executable</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">if</span><span class="kw">:</span><span class="at"> matrix.compiler == &#39;ghc-9.6.2&#39;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="fu">        run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>          $CABAL v2-install $ARG_COMPILER \</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            --install-method=copy exe:hsec-tools</span></code></pre></div>
<p>The second step uses the <code>upload-artifact</code> action to archive the
executable. The artifact <em>bundle name</em> includes the commit hash.
The file <em>within the bundle</em> keeps the name <code>hsec-tools</code>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> upload executable</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/upload-artifact@v3</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">if</span><span class="kw">:</span><span class="at"> matrix.compiler == &#39;ghc-9.6.2&#39;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="at">          </span><span class="fu">name</span><span class="kw">:</span><span class="at"> hsec-tools-${{ github.sha }}</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="at">          </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.cabal/bin/hsec-tools</span></span></code></pre></div>
<div class="note">
<p>All <em>Haskell</em> dependencies are statically linked in the binary. It
does need some system libraries including <em>libgmp</em> and <em>libffi</em>.
But we do not need to preserve the Cabal store or provide the GHC
toolchain when we use the artifact.</p>
</div>
<p>Notice that each of the new steps has the condition:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">if</span><span class="kw">:</span><span class="at"> matrix.compiler == &#39;ghc-9.6.2&#39;</span></span></code></pre></div>
<p>The build matrix produces jobs for several different GHC versions.
But we only need one copy of the <code>hsec-tools</code> executable. I’m not
totally happy with this approach because the patch will need
updating as the matrix evolves. But I can live with it for now.</p>
<h2 id="github-actions-workflows-and-jobs">GitHub Actions: workflows and jobs <a href="#github-actions-workflows-and-jobs" class="section">§</a></h2>
<p>A repository can define one or more CI <em>workflows</em>. They are
written as YAML files in the <code>.github/workflows/</code> directory.</p>
<p>Each <em>workflow</em> is comprised of one or more <em>jobs</em>. It is
straightforward to declare dependencies between jobs <em>within a
workflow</em>. But workflows themselves are independent. There is no
reasonable way to specify that a particular workflow depends on the
result or outputs of another workflow.</p>
<p>This means that for our use case we have to create a new <em>job</em>
<strong>within the <code>Haskell-CI</code> workflow</strong>. Because <code>haskell-ci.yml</code> is
generated by the <code>haskell-ci</code> tool we have to patch this file.
Fortunately <code>haskell-ci</code> provides a mechanism to apply specified
patches when generating <code>haskell-ci.yml</code> (shown later in this
article). Unfortunately, defining and maintaining our additional
job(s) as <em>patches</em> to YAML files is even more unpleasant than
dealing with them as plain YAML.</p>
<h2 id="github-actions-reusable-workflows">GitHub Actions: reusable workflows <a href="#github-actions-reusable-workflows" class="section">§</a></h2>
<p><a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows"><em>Reusable workflows</em></a> provide a neat
solution. A reusable workflow is defined as a separate YAML file,
just like ordinary workflows. The main differences are:</p>
<ul>
<li>Reusable workflows use the trigger condition <code>workflow_call</code>,
instead of the usual triggers like <code>push</code> or <code>pull_request</code>.</li>
<li>Reusable workflows can be parameterised by <em>inputs</em>. The calling
job provides the values. An input can be required or optional.</li>
</ul>
<p>The main goal of reusable workflows is to enable reuse, like
subroutines in programming. Our use case is a bit different. We
will define the <em>check-advisories</em> behaviour as a reusable workflow.
Although we will not be using it from multiple places, it still
gives us several advantages:</p>
<ul>
<li>Separation of concerns: checking the advisories uses an artifact
from the <code>haskell-ci</code> build/test job, but it’s a distinct task.</li>
<li>Maintainability: the behaviour is specified in an ordinary
workflow YAML file. We do not need to edit patch files to modify
the workflow.</li>
<li>We minimise the size and complexity of the patch to be applied to
<code>haskell-ci.yml</code>. The patch itself should rarely change, even if
the reusable workflow definition changes.</li>
</ul>
<h2 id="defining-the-check-advisories-workflow">Defining the <em>check-advisories</em> workflow <a href="#defining-the-check-advisories-workflow" class="section">§</a></h2>
<p>The <em>check-advisories</em> workflow is defined in
<code>.github/workflows/check-advisories.yml</code>. The full content is
below, with commentary.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Check security advisories</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">workflow_call</span><span class="kw">:</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">artifact-name</span><span class="kw">:</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">required</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">type</span><span class="kw">:</span><span class="at"> string</span></span></code></pre></div>
<p>The <code>workflow_call</code> trigger condition establishes it as a reusable
workflow. We also define the <code>artifact-name</code> input. The caller is
<code>required</code> to provide it.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">check-advisories</span><span class="kw">:</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-20.04</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v3</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="at">          </span><span class="fu">path</span><span class="kw">:</span><span class="at"> source</span></span></code></pre></div>
<p>The workflow has a single job called <code>check-advisories</code>. As usual
the first step is to check out the repository.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">run</span><span class="kw">:</span><span class="at"> mkdir -p .local/bin</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">id</span><span class="kw">:</span><span class="at"> download</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/download-artifact@v3</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="at">          </span><span class="fu">name</span><span class="kw">:</span><span class="at"> ${{ inputs.artifact-name }}</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="at">          </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.local/bin</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">run</span><span class="kw">:</span><span class="at"> chmod +x ~/.local/bin/hsec-tools</span></span></code></pre></div>
<p>Next we download the <code>hsec-tools</code> artifact to <code>~/.local/bin</code>, which
is in the <code>PATH</code>. Then we <code>chmod</code> it to make it executable.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> run checks</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="fu">        run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>          cd source</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>          RESULT=0</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>          while read FILE ; do</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>            echo -n &quot;$FILE: &quot;</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>            hsec-tools check &lt; &quot;$FILE&quot; || RESULT=1</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>          done &lt; &lt;(find advisories EXAMPLE_ADVISORY.md -name &quot;*.md&quot;)</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>          exit $RESULT</span></code></pre></div>
<p>Finally we <code>find</code> all the advisory files and run <code>hsec-tools check</code>
on each one. If any of the checks fail the whole job fails (after
checking each file—we don’t want to short-circuit).</p>
<h2 id="calling-the-check-advisories-workflow">Calling the <em>check-advisories</em> workflow <a href="#calling-the-check-advisories-workflow" class="section">§</a></h2>
<p>Add a new job to the <code>haskell-ci.yml</code> workflow. It must be a
<strong>separate job</strong>, not a <em>step</em> of the existing <code>linux</code> job.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">check-advisories</span><span class="kw">:</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Invoke check-advisories workflow</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">needs</span><span class="kw">:</span><span class="at"> linux</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> ./.github/workflows/check-advisories.yml</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">artifact-name</span><span class="kw">:</span><span class="at"> hsec-tools-${{ github.sha }}</span></span></code></pre></div>
<p>The meaning of the fields is as follows:</p>
<ul>
<li><strong><code>uses</code></strong>: <em>calls</em> the <code>check-advisories.yml</code> workflow.</li>
<li><strong><code>with</code></strong>: specifies values for the inputs, which in our
case is the <code>artifact-name</code>.</li>
<li><strong><code>needs</code></strong>: expresses the dependency on the <code>linux</code> job.</li>
</ul>
<div class="note">
<p>You can call workflows defined in other repositories. For example:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="fu">uses</span><span class="kw">:</span><span class="at"> user-or-org/repo/.github/workflows/workflow.yml@v1</span></span></code></pre></div>
</div>
<h2 id="patching-haskell-ci.yml">Patching <code>haskell-ci.yml</code> <a href="#patching-haskell-ci.yml" class="section">§</a></h2>
<p>At this stage I have committed the <code>check-advisories.yml</code> reusable
workflow. I also have <em>uncommitted changes</em> to <code>haskell-ci.yml</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/.github/workflows/haskell-ci.yml b/.github/workflows/haskell-ci.yml</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>index d51bb64..7ff8684 100644</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/.github/workflows/haskell-ci.yml</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/.github/workflows/haskell-ci.yml</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -224,3 +224,19 @@ jobs:</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>         with:</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>           key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>           path: ~/.cabal/store</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="va">+      - name: install executable</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="va">+        if: matrix.compiler == &#39;ghc-9.6.2&#39;</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="va">+        run: |</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="va">+          $CABAL v2-install $ARG_COMPILER \</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a><span class="va">+            --install-method=copy exe:hsec-tools</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="va">+      - name: upload executable</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a><span class="va">+        uses: actions/upload-artifact@v3</span></span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a><span class="va">+        if: matrix.compiler == &#39;ghc-9.6.2&#39;</span></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a><span class="va">+        with:</span></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a><span class="va">+          name: hsec-tools-${{ github.sha }}</span></span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a><span class="va">+          path: ~/.cabal/bin/hsec-tools</span></span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a><span class="va">+  check-advisories:</span></span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    name: Invoke check-advisories workflow</span></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a><span class="va">+    needs: linux</span></span>
<span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a><span class="va">+    uses: ./.github/workflows/check-advisories.yml</span></span>
<span id="cb17-24"><a href="#cb17-24" aria-hidden="true" tabindex="-1"></a><span class="va">+    with:</span></span>
<span id="cb17-25"><a href="#cb17-25" aria-hidden="true" tabindex="-1"></a><span class="va">+      artifact-name: hsec-tools-${{ github.sha }}</span></span></code></pre></div>
<p>We could commit these changes <em>as is</em>, but they will be lost the
next time we run <code>haskell-ci regenerate</code>. Instead create a <em>patch</em>
file:</p>
<pre class="shell"><code>% git diff &gt; .github/haskell-ci.patch</code></pre>
<p>Then tell <code>haskell-ci</code> to apply the patch when (re)generating
<code>haskell-ci.yml</code>. What I would <em>like to do</em> is run:</p>
<pre class="shell"><code>% haskell-ci regenerate \
    --github-patches .github/haskell-ci.patch</code></pre>
<p>The above command regenerates the <code>haskell-ci.yml</code> and correctly
applies our patch. But it <strong>does not add the new arguments to the
<code>REGENDATA</code> line</strong>. As a consequence, subsequent executions of
<code>haskell-ci regenerate</code> will not apply the patch unless you use the
<code>--github-patches</code> option every time. This is not what we want, and
possibly a bug (I will investigate further, but not today).</p>
<p><strong>The workaround</strong>: manually edit <code>haskell-ci.yml</code>, inserting
<code>"--github-patches",".github/haskell-ci.patch"</code> in the <code>REGENDATA</code>
line. As a result of that change, running <code>haskell-ci regenerate</code>
without extra arguments applies the patch.</p>
<p>The final step is to <strong>commit the patch file</strong> together with the
updated <code>haskell-ci.yml</code>.</p>
<h2 id="final-words">Final words <a href="#final-words" class="section">§</a></h2>
<p>In this article I showed how to use <code>haskell-ci</code> to generate a
GitHub Actions workflow for testing Haskell projects. I also
demonstrated how to extend the <code>haskell-ci</code> workflow to save a built
executable as an artifact, which can then be used by other CI jobs.</p>
<p>I hope it has been a useful article, both for people starting out
and wondering how to test their Haskell projects, as well as for
projects with more advanced CI workflows.</p>
<p>One area I would like to investigate further is how to skip the
<code>haskell-ci</code> workflow when the tool code did not change. For
example, if someone submits a pull request that adds or updates an
advisory but does touch the <code>hsec-tools</code> code. Artifacts and cache
entries have a name or key. Right now we use the Git <em>commit</em> hash
in the artifact name. Perhaps we could use the Git <em>tree</em> hash of
the <code>code/hsec-tools</code> directory instead:</p>
<pre class="shell"><code>% git rev-parse HEAD:code/hsec-tools 
a08aa5a2ee93ed09ec0025809226571969e24e3d</code></pre>
<p>Uploading the artifact with a name based on the tree hash seems
straightforward. The bigger challenge is how to skip the <code>linux</code>
jobs when the artifact for the current <code>hsec-tools</code> tree already
exists. And how to <em>not</em> skip the <code>check-advisories</code> job, even
though it depends on the <code>linux</code> jobs. I think it’s probably
possible. But it’s a <em>nice-to-have</em>; this yak’s haircut will have
to wait for another day.</p>]]></summary>
</entry>
<entry>
    <title>Haskell FFI call safety and garbage collection</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2022-09-23-ffi-safety-and-gc.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2022-09-23-ffi-safety-and-gc.html</id>
    <published>2022-09-23T00:00:00Z</published>
    <updated>2022-09-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="haskell-ffi-call-safety-and-garbage-collection">Haskell FFI call safety and garbage collection</h1>
<p>The Haskell <em>Foreign Function Interface (FFI)</em> lets you interface
with code written in other languages, including C. Some kinds of
foreign calls—such as those that could call back into Haskell
code—require the GHC <em>runtime system (RTS)</em> to do some bookkeeping.
This bookkeeping has a performance cost, so there is a mechanism to
out of it for foreign calls that can’t call back into Haskell. This
mechanism is called the <em>safety level</em>. There are two levels:</p>
<ul>
<li><strong><code>safe</code></strong>: do the bookkeeping; callbacks are safe</li>
<li><strong><code>unsafe</code></strong>: skip the bookkeeping; callbacks have undefined
behaviour</li>
</ul>
<p>But beware! Besides callback safety, there are other situations
that require a <code>safe</code> foreign call. And some that may require an
<code>unsafe</code> call (not just for performance). <span class="abstract">In this post I explain
the garbage collection behaviour of <code>safe</code> and <code>unsafe</code> foreign
calls, and describe how the wrong choice led to a nasty deadlock bug
in <em>hs-notmuch</em>.</span></p>
<h2 id="foreign-imports">Foreign imports <a href="#foreign-imports" class="section">§</a></h2>
<p><a href="https://www.haskell.org/onlinereport/haskell2010/haskellch8.html">Chapter 8 of the Haskell 2010 Language Report</a> specifies the
foreign function interface syntax and semantics. A <code>foreign import</code>
declaration creates a Haskell binding to a foreign function or
value:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>foreign <span class="kw">import</span> ccall unsafe &quot;notmuch.h notmuch_database_open&quot;</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  notmuch_database_open</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> <span class="dt">CString</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">CInt</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Ptr</span> (<span class="dt">Ptr</span> <span class="dt">DatabaseHandle</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">CInt</span></span></code></pre></div>
<p>You can see that the <code>foreign import</code> declaration contains:</p>
<ul>
<li>the safety declaration (<code>unsafe</code>)</li>
<li>a reference to the C header and symbol to be imported</li>
<li>a name for the function on the Haskell side</li>
<li>a type annotation, which corresponds to the C type signature</li>
</ul>
<p>If you need a <code>safe</code> foreign call, write <code>safe</code> or just omit the
safety declaration (<code>safe</code> is the default).</p>
<div class="note">
<p><code>notmuch_database_open</code> is a C <em>double-pointer style constructor</em>.
The arguments are the filesystem path (<code>CString</code>), a mode enum
(<code>CInt</code>) and a location to write the pointer to the database handle
upon success (<code>Ptr (Ptr DatabaseHandle)</code>). The return value is <code>0</code>
on success or a nonzero error code (<code>CInt</code>).</p>
</div>
<h2 id="finalizers">Finalizers <a href="#finalizers" class="section">§</a></h2>
<p>Haskell is a garbage collected language. It is possible to use the
garbage collector to clean up objects that were allocated in foreign
calls, when they are no longer referenced. The clean up functions
are called <em>finalizers</em>. Often, finalizers are themselves imported
from the foreign library:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>foreign <span class="kw">import</span> ccall &quot;notmuch.h &amp;notmuch_database_destroy&quot;</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  notmuch_database_destroy ::</span> <span class="dt">FinalizerPtr</span> <span class="dt">DatabaseHandle</span></span></code></pre></div>
<p>The ampersand (<code>&amp;</code>) denotes that we are importing a <em>function
pointer</em> rather than the function itself.</p>
<p><code>FinalizerPtr</code> is a type synonym defined in the
<a href="https://hackage.haskell.org/package/base-4.16.2.0/docs/Foreign-ForeignPtr.html#t:FinalizerPtr"><code>Foreign.ForeignPtr</code></a> module:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FinalizerPtr</span> a <span class="ot">=</span> <span class="dt">FunPtr</span> (<span class="dt">Ptr</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ())</span></code></pre></div>
<p>This arises from the usual definition of a destructor or <code>free</code>
function. That is, a void function whose single argument is the
pointer to the object to be destroyed, or memory to be freed.</p>
<p>Programs need to associate finalizers with the objects they are to
clean up. The function to do this is
<a href="https://hackage.haskell.org/package/base-4.16.2.0/docs/Foreign-ForeignPtr.html#v:newForeignPtr"><code>newForeignPtr</code></a>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>newForeignPtr</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">FinalizerPtr</span> a <span class="ot">-&gt;</span> <span class="dt">Ptr</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">ForeignPtr</span> a)</span></code></pre></div>
<div class="note">
<p>A <code>ForeignPtr a</code> can have multiple (or zero) finalizers. Use cases
for multiple finalizers are uncommon.</p>
</div>
<h2 id="ffi-safety-and-garbage-collection">FFI safety and garbage collection <a href="#ffi-safety-and-garbage-collection" class="section">§</a></h2>
<p>Consider the wording of the Haskell 2010 FFI chapter:</p>
<blockquote>
<p>A <code>safe</code> call … guarantees to leave the Haskell system in a state
that allows callbacks from the external code. In contrast, an
<code>unsafe</code> call, while carrying less overhead, must not trigger a
callback into the Haskell system. If it does, the system behaviour
is undefined. … Note that a callback into the Haskell system
implies that a garbage collection might be triggered after an
external entity was called, but before this call returns.</p>
</blockquote>
<p>This says that garbage collection can occur during a <code>safe</code> call.
But it <em>does not say</em> whether GC is allowed, or not, during an
<code>unsafe</code> call. It is up to implementations to decide what to do.</p>
<p>GHC’s behaviour here has changed over time. Since version 8.4, GHC
<em>guarantees</em> that <strong>garbage collection will never occur during an
<code>unsafe</code> FFI call.</strong> This guarantee allows <code>unsafe</code> FFI calls to
work with heap-allocated data, which enables some performance
optimisations.</p>
<div class="note">
<p>The <a href="https://downloads.haskell.org/ghc/9.4.1/docs/users_guide/exts/ffi.html#guaranteed-call-safety">GHC users guide</a> has a more thorough treatment of
this topic. It also mentions important details about threading
and the FFI, among other things.</p>
</div>
<h2 id="crouching-gc-hidden-deadlock">Crouching GC, hidden deadlock <a href="#crouching-gc-hidden-deadlock" class="section">§</a></h2>
<p>We have discussed the FFI, finalizers, foreign call (un)safety and
garbage collection. What’s it all coming to?</p>
<p>The earlier foreign import examples are from
<a href="https://hackage.haskell.org/package/notmuch"><em>hs-notmuch</em></a>, my Haskell binding to the
<a href="https://notmuchmail.org/"><em>notmuch</em></a> mail indexer. Note the following:</p>
<ul>
<li><p><code>notmuch_database_open</code> is an <code>unsafe</code> foreign call (because it
doesn’t call back into Haskell and I don’t want the bookkeeping
overhead).</p></li>
<li><p><code>notmuch_database_destroy</code> is a finalizer that closes the database
and frees resources. The garbage collector schedules the
finalizer when the database handle is no longer in use.</p></li>
<li><p>Wrapper code in <em>hs-notmuch</em> uses <code>newForeignPtr</code> to associate the
the <code>notmuch_database_destroy</code> finalizer with the pointers created
by <code>notmuch_database_open</code>.</p></li>
<li><p>The finalizer (called after GC) is the <em>only way</em> to close a
database handle. The <em>hs-notmuch</em> API does not offer an explicit
close function.</p></li>
</ul>
<p>An application could attempt to open a database multiple times.
This might be intentional. Or it could occur when there is an
unreferenced database handle whose finalizer has not yet been
executed.</p>
<p><em>libnotmuch</em> uses locks to prevent multiple read-write sessions to a
single database. <code>notmuch_database_open</code> blocks if the lock is
already held. In the case of <em>accidental</em> multiple open this isn’t
a problem because GC will eventually occur, finalizers will run and
the lock will be released.</p>
<p><strong>Except it won’t, because GHC prevents garbage collection during
<code>unsafe</code> foreign calls.</strong> As a result, the program deadlocks.
Non-deterministically.</p>
<p>This bug went unnoticed for a long time. It was <a href="https://github.com/purebred-mua/purebred/issues/468">eventually
detected</a> by <a href="https://github.com/purebred-mua/purebred"><em>purebred</em></a>’s automated user acceptance
tests, which perform many user actions very quickly. (<em>purebred</em> is
a mail program that uses <em>hs-notmuch</em>). Whether deadlock is likely
to occur depends very much on the application and/or user behaviour.</p>
<p>Fortunately, the fix was simple: make <code>notmuch_database_open</code> a
<code>safe</code> foreign call. Opening the database would typically be an
infrequent operation so the bookkeeping overhead is tolerable.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>This post discussed the FFI, finalizers, and GHC’s garbage
collection behaviour (or lack thereof) during <code>safe</code> and <code>unsafe</code>
foreign calls. I used a deadlock bug in a foreign binding library
as a case study of this behaviour.</p>
<p>The folk wisdom regarding <code>safe</code> versus <code>unsafe</code> foreign calls
mainly deals with callbacks and performance overheads. I have
rarely seen the garbage collection mentioned. This is unfortunate
because the GC behaviour is critical to program safety and
correctness (as the case study proves). Resources (wiki pages, blog
posts, etc) that discuss FFI call safety but fail to mention the GC
behaviour of <code>safe</code> versus <code>unsafe</code> should be updated.</p>
<p>With these things in mind, here are my recommendations for Haskell
programmers working with the FFI:</p>
<ul>
<li><p>If a foreign function could call back into Haskell code, it must
be <code>safe</code>.</p></li>
<li><p>If a foreign call might block, it probably needs to be <code>safe</code>
(unless you are certain about what you are doing).</p></li>
<li><p>If you are unsure about whether a foreign call could block (or
why), make it <code>safe</code>.</p></li>
</ul>
<p>In fact, it’s fine to make every foreign import <code>safe</code> unless:</p>
<ul>
<li><p>You need to guarantee that heap-allocated objects (e.g. unpinned
<code>ByteArray#</code>) will not move during the foreign call, or</p></li>
<li><p>The bookkeeping overhead is a real performance issue (e.g. C-style
<code>_valid()</code>/<code>_get()</code>/<code>_next()</code> iterators, calls in tight loops).</p></li>
</ul>
<p>Doing so might deliver you from debugging a non-deterministic
deadlock.</p>]]></summary>
</entry>
<entry>
    <title>Writing tests for GHC</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2022-05-31-ghc-test-suite.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2022-05-31-ghc-test-suite.html</id>
    <published>2022-05-31T00:00:00Z</published>
    <updated>2022-05-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="writing-tests-for-ghc">Writing tests for GHC</h1>
<p>In this post I explain how to write functional tests for GHC, with
examples.</p>
<h2 id="overview-of-the-ghc-test-suite">Overview of the GHC test suite <a href="#overview-of-the-ghc-test-suite" class="section">§</a></h2>
<p>The <em>Glasgow Haskell Compiler (GHC)</em> is a huge project. It
includes:</p>
<ul>
<li>a Haskell compiler (parser, simplifier, codegen, etc)</li>
<li>the runtime system (GC, thread scheduler, STM, etc)</li>
<li>GHCi (interactive interpreter / REPL)</li>
<li>bundled libraries (<em>base</em>, <em>template-haskell</em>, <em>ghc-prim</em>, etc)</li>
<li>build tooling (Makefiles, <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/hadrian">Hadrian</a>)</li>
<li>the users guide</li>
<li>a test suite</li>
</ul>
<p>The test suite should test all the functional parts of GHC. There
are different kinds of tests:</p>
<ul>
<li><strong>Testing the compiler.</strong> The test suite includes Haskell program
sources. A test can assert that the program compiles, or that
compilation failure is expected.</li>
<li><strong>Testing the resulting programs.</strong> Does the behaviour of a
program match expectations?</li>
<li><strong>Testing the bundled libraries.</strong> This is conceptually distinct
from the preceding point. In practice it can be achieved in
the same way.</li>
<li><strong>Performance tests</strong> ensure that the performance of the
compiler, and of compiled programs, does not regress. This is a
complex topic and I won’t discuss it further in this post. The
GHC wiki has <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/running-tests/performance-tests">a good introduction</a>.</li>
</ul>
<p>The GHC GitLab instances runs a <strong>continuous integration (CI)</strong>
pipeline for all merge requests. It builds GHC and runs the test
suite on a variety of target architectures and operating systems.
Here’s an <a href="https://gitlab.haskell.org/frasertweedale/ghc/-/pipelines/51652">example for one of my merge requests</a>.</p>
<p>The test suite driver is implemented in Python. Tests are described
in terms of its library interface. I won’t discuss the
<em>implementation</em> of the test driver—I just want to show you how to
use it.</p>
<h2 id="writing-tests">Writing tests <a href="#writing-tests" class="section">§</a></h2>
<p>In the GHC source repository, tests are organised heirarchically
under <code>testsuite/tests/</code>. Bundled libraries can also supply tests.
For example, some tests for <em>base</em> sit under
<code>libraries/base/tests/</code>. <code>.T</code> files describe the tests, using the
Python DSL. Usually the name <code>all.T</code> is used. The source code for
each test lives alongside the <code>.T</code> file.</p>
<h3 id="the-test-driver-dsl">The test driver DSL <a href="#the-test-driver-dsl" class="section">§</a></h3>
<p>Each test is described in a <code>.T</code> file by an invocation of the <code>test</code>
function:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>test(<span class="op">&lt;</span>name<span class="op">&gt;</span>, <span class="op">&lt;</span>setup<span class="op">&gt;</span>, <span class="op">&lt;</span>test<span class="op">-</span>fn<span class="op">&gt;</span>, <span class="op">&lt;</span>args<span class="op">&gt;</span>)</span></code></pre></div>
<ul>
<li><code>&lt;name&gt;</code> is the <strong>name of the test</strong> source file (without file
extension), or the directory containing the source code (for
multi-module builds). Often, the name is based on an issue
number.</li>
<li><code>&lt;setup&gt;</code> is a function or list of functions that affect <strong>when or
how to run the test program</strong>. For example, you can set extra
program arguments, declare the expected exit status, or supply a
predicate for skipping the test. The GHC wiki gives a <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/running-tests/adding#the-setup-field">full
list</a> with descriptions.</li>
<li><code>&lt;test-fn&gt;</code> specifies <strong>how to compile</strong> the test program, and
<strong>whether to run</strong> the resulting program. Common values include
<code>compile</code>, <code>compile_fail</code> (compilation failure expected) and
<code>compile_and_run</code> (run the resulting program). There are <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/running-tests/adding#the-test-fn-field">several
other options</a> such as for multi-module builds, and
GHCi sessions.</li>
<li><code>&lt;args&gt;</code> specifies extra <strong>arguments for GHC</strong> when compiling the
test program. It also has other use patterns depending on the
value of <code>&lt;test-fn&gt;</code>.</li>
</ul>
<p>Alongside the source file (<code>&lt;name&gt;.hs</code>) are optional files for
specifying the input and output of the test program:</p>
<ul>
<li><code>&lt;name&gt;.stdin</code>: data to feed on standard input</li>
<li><code>&lt;name&gt;.stdout</code>: data expected on standard output</li>
<li><code>&lt;name&gt;.stderr</code>: data expected on standard error from the test
program (for compile-only tests, from GHC).</li>
</ul>
<h3 id="example">Example <a href="#example" class="section">§</a></h3>
<p>Test <code>T20757</code> is a regression test for issue <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20757"><code>#20757</code></a>.
The test program source code lives in
<code>testsuite/tests/ghc-api/T20757.hs</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">GHC.SysTools.BaseDir</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> findToolDir <span class="dt">False</span> <span class="st">&quot;/&quot;</span> <span class="op">&gt;&gt;=</span> <span class="fu">print</span></span></code></pre></div>
<p>The test driver file <code>testsuite/tests/ghc-api/all.T</code> declares the
test (alongside several others):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>test(<span class="st">&#39;T20757&#39;</span>,</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>     [unless(opsys(<span class="st">&#39;mingw32&#39;</span>), skip), exit_code(<span class="dv">1</span>)],</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>     compile_and_run,</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>     [<span class="st">&#39;-package ghc&#39;</span>])</span></code></pre></div>
<p>This declaration:</p>
<ul>
<li>tells the test driver to both compile and run the test program</li>
<li>skips the test on operating systems other than Windows</li>
<li>sets the expected exit status to <code>1</code></li>
<li>adds <code>-package ghc</code> to the <em>compiler</em> CLI options</li>
</ul>
<p>Additionally, <code>testsuite/tests/ghc-api/T20757.stderr</code> exists. The
test driver shall assert that whatever the <em>test program</em> writes to
standard error matches the contents of that file.</p>
<h2 id="running-tests">Running tests <a href="#running-tests" class="section">§</a></h2>
<p>I use <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/hadrian">Hadrian</a> to build and test GHC:</p>
<pre class="shell"><code>% ./hadrian/build -j test</code></pre>
<p>The <code>-j[N]</code> option sets the number of jobs that can be run in
parallel. If the integer argument is not specified, it defaults to
the number of CPU cores.</p>
<p>There are around 9000 tests in the GHC test suite. It takes a while
to run them all (~15 minutes with 12 parallel jobs on my 12-core
workstation). If you’re hacking on GHC you might want to limit the
driver to one or just a few tests. Use the <code>--only</code> option to do
this:</p>
<pre class="shell"><code>% ./hadrian/build -j test --only=T20757
...
SUMMARY for test run started at Wed May 18 22:58:26 2022 
0:00:00.162930 spent to go through
       1 total tests, which gave rise to
       9 test cases, of which
       9 were skipped
       0 had missing libraries

       0 expected passes
       0 expected failures

       0 caused framework failures
       0 caused framework warnings
       0 unexpected passes
       0 unexpected failures
       0 unexpected stat failures
       0 fragile tests

Build completed in 1.30s</code></pre>
<p>The driver ran zero tests. Well, I am using FreeBSD; <code>T20757</code> skips
on all platforms except Windows. Let’s add one more test. You can
specify multiple tests via <code>--only</code>, <strong>separated by spaces</strong>:</p>
<pre class="shell"><code>% ./hadrian/build -j test --only=&quot;T20757 executablePath&quot;
...
SUMMARY for test run started at Wed May 18 23:02:33 2022
0:00:00.513652 spent to go through
       2 total tests, which gave rise to
      18 test cases, of which
      17 were skipped
       0 had missing libraries

       1 expected passes
       0 expected failures

       0 caused framework failures
       0 caused framework warnings
       0 unexpected passes
       0 unexpected failures
       0 unexpected stat failures
       0 fragile tests

Build completed in 11.82s</code></pre>
<p>That’s more like it.</p>
<p>Each test seems to inflate to 9 <em>test cases</em>. I think these
correspond to the different <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/rts/compiler-ways"><em>compiler ways</em></a>, and the test is
only run for the configured way(s).</p>
<p>Use <code>--test-verbose=[1,2,3,4,5]</code> to see more verbose output. The
commands and output for compiling and running the test program
appear at level <code>3</code> and above.</p>
<p>See the GHC wiki for further <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/running-tests/running">details about running tests</a>.</p>
<h2 id="testing-executablepath">Testing <code>executablePath</code> <a href="#testing-executablepath" class="section">§</a></h2>
<p>In my <a href="2022-05-10-improved-executable-path-queries.html">previous post</a> I described
<a href="https://downloads.haskell.org/ghc/9.4.1-alpha1/docs/html/libraries/base/System-Environment.html#v:executablePath"><code>System.Environment.executablePath</code></a>, an improved
way to query the path to the executable file of the calling process.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">executablePath ::</span> <span class="dt">Maybe</span> (<span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">FilePath</span>))</span></code></pre></div>
<p>The <code>IO</code> query is not defined on all platforms. Where it is
defined, its behaviour differs by platform. So it is an interesting
feature to test.</p>
<p>One could write multiple small test programs, one for each operating
system. Then tell the test driver to run the test for the current
system, and skip the others. Alternatively, define a single test
program, but tell it what platform it’s running on. That is what I
did.</p>
<p>The test driver declaration adds the operating system to the test
program’s arguments:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>test(<span class="st">&#39;executablePath&#39;</span>,</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>     extra_run_opts(config.os),</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>     compile_and_run,</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>     [<span class="st">&#39;&#39;</span>])</span></code></pre></div>
<p>The test program itself then implements some OS-aware checks of the
behaviour of <code>executablePath</code>. First come lists of which systems
have what behaviour:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>canQuery <span class="ot">=</span> [<span class="st">&quot;mingw32&quot;</span>,<span class="st">&quot;freebsd&quot;</span>,<span class="st">&quot;linux&quot;</span>,<span class="st">&quot;darwin&quot;</span>,<span class="st">&quot;netbsd&quot;</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>canDelete <span class="ot">=</span> [<span class="st">&quot;freebsd&quot;</span>,<span class="st">&quot;linux&quot;</span>,<span class="st">&quot;darwin&quot;</span>,<span class="st">&quot;netbsd&quot;</span>]</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>canQueryAfterDelete <span class="ot">=</span> [<span class="st">&quot;netbsd&quot;</span>]</span></code></pre></div>
<p>In <code>main</code>, grab the OS from the program arguments:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  [os] <span class="ot">&lt;-</span> getArgs</span></code></pre></div>
<p>Next grab the query function. If the query is <em>expectedly</em>
undefined, stop here (<code>exitSuccess</code>). If the query is <em>unexpected</em>
undefined, or <em>unexpectedly defined</em>, fail the test. Otherwise
return the query.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>  query <span class="ot">&lt;-</span> <span class="kw">case</span> (os <span class="ot">`elem`</span> canQuery, executablePath) <span class="kw">of</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">False</span>, <span class="dt">Nothing</span>) <span class="ot">-&gt;</span> exitSuccess</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">False</span>, <span class="dt">Just</span> _) <span class="ot">-&gt;</span> die <span class="st">&quot;query unexpectedly defined&quot;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">True</span>, <span class="dt">Nothing</span>) <span class="ot">-&gt;</span> die <span class="st">&quot;query unexpected not defined&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">True</span>, <span class="dt">Just</span> k) <span class="ot">-&gt;</span> <span class="fu">pure</span> k</span></code></pre></div>
<p>Now run the query. If it returns <code>Nothing</code>, fail the test
(it should return a result).</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>  before <span class="ot">&lt;-</span> query <span class="op">&gt;&gt;=</span> \r <span class="ot">-&gt;</span> <span class="kw">case</span> r <span class="kw">of</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span>   <span class="ot">-&gt;</span> die <span class="st">&quot;query unexpectedly returned Nothing&quot;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> path <span class="ot">-&gt;</span> <span class="fu">pure</span> path</span></code></pre></div>
<p>We need to compare the result (<code>before</code>) to the expected value.
That is, the file <code>executablePath</code> in the current directory:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  cwd <span class="ot">&lt;-</span> getCurrentDirectory</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> expected <span class="ot">=</span> cwd <span class="op">&lt;/&gt;</span> <span class="st">&quot;executablePath&quot;</span></span></code></pre></div>
<p>Also drop the file extension (if any) from the result of the query.
This is needed because GHC names the executables it generates with a
file extension on some platforms (e.g. <code>.exe</code> on Windows).</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> actual <span class="ot">=</span> dropExtension before</span></code></pre></div>
<p>Now compare <code>expected</code> and <code>actual</code>. Use <code>equalFilePath</code> because
the query may return a non-normalised path on some systems (I have
observed this on NetBSD):</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>  unless (equalFilePath actual expected) <span class="op">$</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    die <span class="st">&quot;query result did not match expected&quot;</span></span></code></pre></div>
<p>Now, what happens if we <em>delete the executable</em> while the process
runs? First of all, some operating systems don’t even allow
that. We grant those systems an honourable discharge. The
remaining systems delete the file.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>  unless (os <span class="ot">`elem`</span> canDelete)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    exitSuccess</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  removeFile before</span></code></pre></div>
<p>Finally we run the query again. Once again, the expected behaviour
differs by platform. On Mac OS X and FreeBSD, we expect <code>Nothing</code>.
But NetBSD successfully returns the original value.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>  after <span class="ot">&lt;-</span> query</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> after <span class="kw">of</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> os <span class="ot">`elem`</span> canQueryAfterDelete</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>      <span class="ot">-&gt;</span> die <span class="st">&quot;query unexpected failed after delete&quot;</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> <span class="fu">otherwise</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>      <span class="ot">-&gt;</span> <span class="fu">pure</span> ()</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> _</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> os <span class="ot">`elem`</span> canQueryAfterDelete</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>      <span class="ot">-&gt;</span> <span class="fu">pure</span> ()</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> <span class="fu">otherwise</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>      <span class="ot">-&gt;</span> die <span class="op">$</span> <span class="st">&quot;query unexpected succeeded after delete&quot;</span></span></code></pre></div>
<p>Phew, quite a lot of code to test one little feature. There is no
standard system interface for querying the executable path. So it
is no surprise to see such diverse behaviour across different
platforms—including no query mechanism at all (looking at you,
OpenBSD).</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>In this article I gave an introduction to writing tests for the GHC
test suite, with some examples. The GHC wiki <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/running-tests/adding">contains more
comprehensive documentation</a>. <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/running-tests/performance-tests">Performance
tests</a> are a more complex aspect of the GHC test
suite which I didn’t discuss in detail.</p>]]></summary>
</entry>
<entry>
    <title>Better executable path queries in GHC 9.4</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2022-05-10-improved-executable-path-queries.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2022-05-10-improved-executable-path-queries.html</id>
    <published>2022-05-10T00:00:00Z</published>
    <updated>2022-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="better-executable-path-queries-in-ghc-9.4">Better executable path queries in GHC 9.4</h1>
<p>I <a href="2021-01-01-fixing-getExecutablePath-FreeBSD.html">previously wrote about</a>
<a href="https://downloads.haskell.org/ghc/9.4.1-alpha1/docs/html/libraries/base/System-Environment.html#v:getExecutablePath"><code>System.Environment.getExecutablePath</code></a> and how
I fixed it on FreeBSD. Unfortunately, this function still has some
problems. In this post I explain the problems and introduce
<a href="https://downloads.haskell.org/ghc/9.4.1-alpha1/docs/html/libraries/base/System-Environment.html#v:executablePath"><code>executablePath</code></a>, the solution arriving in
<em>base-4.17.0.0</em> (GHC 9.4.1).</p>
<h2 id="problems-with-getexecutablepath">Problems with <code>getExecutablePath</code> <a href="#problems-with-getexecutablepath" class="section">§</a></h2>
<p><code>getExecutablePath :: IO FilePath</code> is a way for a Haskell program to
query the path to its own executable. It has several significant
problems:</p>
<ul>
<li><p><strong>Not all operating systems provide a reliable mechanism to query
the executable path.</strong> Where an OS-specific implementation does
not exist, <code>getExecutablePath</code> falls back to providing the value
of <code>argv[0]</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12377">#12377</a>). The invoking process chooses the
value; it does not necessarily represent the path to the
executable. It might represent or resolve to a different
executable. <code>argv</code> could even be an empty array, in which case
<code>getExecutablePath</code> throws an exception!</p></li>
<li><p><strong>Divergent behaviour when executable has been deleted.</strong> When we
say “executable” we mean “<em>file which contains <strong>program</strong> text,
which the OS can load and execute (becoming a <strong>process</strong>)</em>”.
That file could be deleted while the process is running. In this
case, the behaviour of <code>getExecutablePath</code> differs by platform.
On FreeBSD it throws an exception. On Linux it returns the
original <code>FilePath</code> suffixed with <code>" (deleted)"</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/10957">#10957</a>).
These differences impede cross-platform development.</p></li>
<li><p><strong>The documentation is wrong.</strong> Until I fixed it, the
documentation for <code>getExecutablePath</code> stated, <em>“Returns the
absolute pathname of the current executable.”</em> It didn’t explain
any of the discrepancies mentioned in the preceding points.
Programmers can easily stumble into the unsafe behaviour (I did).</p></li>
</ul>
<h2 id="type-of-the-solution">Type of the solution <a href="#type-of-the-solution" class="section">§</a></h2>
<p>Types are an essential tool for modelling a problem and guiding the
development of a solution. The problems with <code>getExecutablePath</code>
reveal that:</p>
<ul>
<li><p>Some OSes provide a mechanism to query the executable path, and
some do not. This is a static property of the platform; it does
not change over the lifetime of a process.</p></li>
<li><p>The query mechanism (if it exists) might be unable to return a
result. For example, when the executable file has been deleted.
The result may vary during the lifetime of a process.</p></li>
</ul>
<p>The <code>Maybe a</code> type models the existence or absence of a value:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a</span></code></pre></div>
<p>Accordingly, a suitable type to model this problem is:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">executablePath ::</span> <span class="dt">Maybe</span> (<span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">FilePath</span>))</span></code></pre></div>
<p>The outer <code>Maybe</code> models the presence or absence of a query
mechanism. The query itself has the type <code>IO (Maybe FilePath)</code>.
The inner <code>Maybe</code> models that the query might be unable to return
a valid <code>FilePath</code>.</p>
<p>The type is also a kind of (machine-checked) documentation. It
reveals things that the written documentation for
<code>getExecutablePath</code> <strong><em>should have said, but didn’t</em></strong>.</p>
<div class="note">
<p><code>FilePath</code> is defined as a type synonym for <code>String</code>, which is
itself a type synonym for <code>[Char]</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FilePath</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">String</span>   <span class="ot">=</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>It can be argued on multiple grounds that this is not an appropriate
type for representing file paths:</p>
<ul>
<li><p>Performance: <code>[Char]</code> is a linked list of individual characters.
Packed strings have better performance.</p></li>
<li><p>Correctness: <code>FilePath</code> admits any string value, not just valid
paths. See above for a real world example: paths suffixed with
<code>"(deleted)"</code> on Linux.</p></li>
</ul>
<p>I did not go further down this rabbit hole for the change discussed
in this post. <code>FilePath</code> pervades <em>base</em> and other “standard”
libraries. Furthermore, GHC targets a variety of operating systems;
accurately modeling valid file paths on diverse platforms drives up
complexity. If you have specific needs not met by <code>FilePath</code>, check
out the <a href="https://hackage.haskell.org/packages/search?terms=filepath">many path libraries</a> which offer different approaches to
representing and working with paths.</p>
</div>
<h2 id="implementation-of-executablepath">Implementation of <code>executablePath</code> <a href="#implementation-of-executablepath" class="section">§</a></h2>
<p>In this section I’ll briefly review the implementation. GHC
<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4779">merge request !4779</a> has the gory details, for those
interested.</p>
<p>I was able to implement <code>executablePath</code> without modifying any code
that uses the <em>foreign function interface (FFI)</em>.
<code>getExecutablePath</code> was unchanged. <code>executablePath</code> implementations
wrap the former. See <a href="2021-01-01-fixing-getExecutablePath-FreeBSD.html">my earlier post</a> for an example
of how <code>getExecutablePath</code> uses the FFI.</p>
<h3 id="mac-os-x-freebsd-and-netbsd">Mac OS X, FreeBSD and NetBSD <a href="#mac-os-x-freebsd-and-netbsd" class="section">§</a></h3>
<p>The FreeBSD and NetBSD implementations of <code>getExecutablePath</code> are
nearly identical, but the implementation for Mac OS X is very
different. Nevertheless, the observable behaviour is identical: the
system calls error with <code>ENOENT</code> when the executable has been
deleted, and succeed otherwise. No other expected failure scenarios
are known (yet).</p>
<p>Therefore, the <code>executablePath</code> implementation for these platforms
boils down to catching the Haskell exception value corresponding to
<code>ENOENT</code> and turning it into <code>Nothing</code>. Unexpected exceptions are
re-thrown.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Just</span> (<span class="fu">fmap</span> <span class="dt">Just</span> getExecutablePath <span class="ot">`catch`</span> f)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    f e <span class="op">|</span> isDoesNotExistError e <span class="ot">=</span> <span class="fu">pure</span> <span class="dt">Nothing</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">|</span> <span class="fu">otherwise</span>             <span class="ot">=</span> throw e</span></code></pre></div>
<h3 id="linux">Linux <a href="#linux" class="section">§</a></h3>
<p>The Linux implementation of <code>getExecutablePath</code> reads the value of
<code>/proc/self/exe</code> (part of the <a href="https://manpages.debian.org/buster/manpages/procfs.5.en.html"><code>procfs(5)</code></a>). The
man page states:</p>
<blockquote>
<p>If the pathname has been unlinked, the symbolic link will contain
the string ‘(deleted)’ appended to the original pathname.</p>
</blockquote>
<p><code>executablePath</code> checks for this condition and, if detected, returns
<code>Nothing</code>. Note that we could have stripped the suffix and returned
<code>Just</code> the “original” path. Returning <code>Nothing</code> makes it consistent
with the other platforms.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">fmap</span> check getExecutablePath)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  check s <span class="op">|</span> <span class="st">&quot;(deleted)&quot;</span> <span class="ot">`isSuffixOf`</span> s <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span>                  <span class="ot">=</span> <span class="dt">Just</span> s</span></code></pre></div>
<div class="note">
<p>What if the file is named <code>foo (deleted)</code>? The behaviour is
ambiguous. Checking the existence of the file is not safe either.
If the file was <code>foo</code>, a <em>different</em> file <code>foo (deleted)</code> could
exist beside it. Better a false negative in an unlikely scenario,
than an <strong>unsafe false positive</strong>.</p>
</div>
<h3 id="windows">Windows <a href="#windows" class="section">§</a></h3>
<p>Windows prevents the deletion of an executable file during the
lifetime of any process created from it. So <code>executablePath</code> simply
wraps the result of <code>getExecutablePath</code> with a <code>Just</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">fmap</span> <span class="dt">Just</span> getExecutablePath)</span></code></pre></div>
<h3 id="fallback-implementation">Fallback implementation <a href="#fallback-implementation" class="section">§</a></h3>
<p>The “fallback implementation” is for platforms that don’t have a
reliable mechanism for querying the executable path (or no one
implemented it in GHC yet). In this case, <code>executablePath</code> does not
even supply the query <code>IO</code> action.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>executablePath <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Programs that want to query the executable path have to deal with
the <code>Nothing</code> case. That is: the possibility that there <em>is no
reliable way</em> to get it. That’s a good thing.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>This article explained the problems of <code>getExecutablePath</code> and
reviewed the solution coming in GHC 9.4, called <code>executablePath</code>. I
encourage programs that use <code>getExecutablePath</code> to migrate when
feasible, especially if multi-platform support is important.</p>
<p>One topic I did not discuss is how I implemented tests for this
feature in the GHC test suite. I will cover this in an upcoming
post.</p>]]></summary>
</entry>
<entry>
    <title>Haddock: disambiguating types and values</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-11-12-haddock-disambiguation.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-11-12-haddock-disambiguation.html</id>
    <published>2021-11-12T00:00:00Z</published>
    <updated>2021-11-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="haddock-disambiguating-types-and-values">Haddock: disambiguating types and values</h1>
<p>Haskell has separate namespaces for types and values. When types
and data constructors share a name, <a href="https://haskell-haddock.readthedocs.io/en/latest/index.html">Haddock</a>, Haskell’s
documentation generator, can get confused. <span class="abstract">In this post I show how
to disambiguate types and values in Haddock
documentation.</span></p>
<h2 id="demonstrating-the-problem">Demonstrating the problem <a href="#demonstrating-the-problem" class="section">§</a></h2>
<p>For demonstration purposes I created a simple module, <code>ACME.Disamb</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">ACME.Disamb</span> (<span class="dt">Foo</span>(<span class="op">..</span>), <span class="dt">Bar</span>(<span class="op">..</span>), <span class="dt">Quux</span>, <span class="dt">Xyxxy</span>) <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Foo</span> <span class="ot">=</span> <span class="dt">Foo</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- | A bar contains a &#39;Foo&#39;.  Example:</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- @let bar = &#39;Bar&#39; &#39;Foo&#39;@</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Bar</span> <span class="ot">=</span> <span class="dt">Bar</span> <span class="dt">Foo</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Quux</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Xyxxy</span> a</span></code></pre></div>
<p>Note that <code>Foo</code> is the name of both a type and a data constructor.
Same for <code>Bar</code>. <code>Quux</code> is a type with no constructor and <code>Xyxxy</code> is
a class. The Haddock
for type <code>Bar</code> contains ambiguous references to both <code>Bar</code> and
<code>Foo</code>.</p>
<p>Let’s look at the HTML Haddock generated for each top-level
declaration:</p>
<h3 id="data-foo"><code>data Foo</code> <a href="#data-foo" class="section">§</a></h3>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>data<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Foo&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Foo&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;subs constructors&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;caption&quot;</span><span class="kw">&gt;</span>Constructors<span class="kw">&lt;/p&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;table&gt;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;tbody&gt;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;tr&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;td</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;v:Foo&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/td&gt;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;td</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc empty&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;nbsp;</span><span class="kw">&lt;/td&gt;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/tr&gt;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/tbody&gt;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/table&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>The element representing type <code>Foo</code> has <code>id="t:Foo"</code>, whereas the
constructor has <code>id="v:Foo"</code>. These identifiers can be used as
fragment identifiers in hyperlinks. Types and values are
disambiguated through the <code>t:…</code> and <code>v:…</code> identifier prefixes.</p>
<h3 id="data-bar"><code>data Bar</code> <a href="#data-bar" class="section">§</a></h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>data<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Bar&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Bar<span class="kw">&lt;/a&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Bar&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;p&gt;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      A bar contains a</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;</span>. Example:</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/p&gt;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;pre&gt;</span>let bar = <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Bar&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Bar<span class="kw">&lt;/a&gt;&lt;/code&gt;</span> <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">&lt;!-- constructors elided --&gt;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Here we can see that all references to <code>Foo</code> and <code>Bar</code> in the
documentation I wrote <strong>all link to <code>t:Foo</code> or <code>t:Bar</code></strong>. This is
not what I intended. The usage example should refer to the data
constructors.</p>
<p>In my example this is a minor nuisance, but recall that <code>Foo</code> could
be the constructor of some other type. The <em>type</em> <code>Foo</code> could be
unrelated!</p>
<h3 id="data-quux"><code>data Quux</code> <a href="#data-quux" class="section">§</a></h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>data<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Quux&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Quux<span class="kw">&lt;/a&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Quux&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p><code>Quux</code> has no constructor. As a result, there is no element with <code>id="v:…"</code>.</p>
<h3 id="class-xyxxy-a"><code>class Xyxxy a</code> <a href="#class-xyxxy-a" class="section">§</a></h3>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;top&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;src&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;keyword&quot;</span><span class="kw">&gt;</span>class<span class="kw">&lt;/span&gt;</span> <span class="kw">&lt;a</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;t:Xyzzy&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;def&quot;</span><span class="kw">&gt;</span>Xyzzy<span class="kw">&lt;/a&gt;</span> a</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;#t:Xyzzy&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;selflink&quot;</span><span class="kw">&gt;</span>#<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Type class names inhabit the type namespace. Therefore the
corresponding element identifiers also use the <code>t:…</code> prefix.</p>
<h2 id="the-solution">The solution <a href="#the-solution" class="section">§</a></h2>
<p>To refer explicitly to a type or value, prefix the reference with
<code>t</code> or <code>v</code>. For example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | A bar contains a &#39;Foo&#39;.  Example:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- @let bar = v&#39;Bar&#39; v&#39;Foo&#39;@</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Bar</span> <span class="ot">=</span> <span class="dt">Bar</span> <span class="dt">Foo</span></span></code></pre></div>
<p>The resulting HTML</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>…</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc&quot;</span><span class="kw">&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;p&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>      A bar contains a</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#t:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;</span>. Example:</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/p&gt;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;pre&gt;</span>let bar = <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#v:Bar&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Bar<span class="kw">&lt;/a&gt;&lt;/code&gt;</span> <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#v:Foo&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Foo<span class="kw">&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>…</span></code></pre></div>
<div class="note">
<p>This feature is available since <a href="https://hackage.haskell.org/package/haddock-2.23.0/changelog">haddock-2.23.0</a> (<a href="https://github.com/haskell/haddock/commit/dd47029cb29c80b1ab4db520c9c2ce4dca37f833">commit</a>).
The published <a href="https://haskell-haddock.readthedocs.io/en/latest/index.html">user guide</a> is out of date but you can read
<a href="https://github.com/haskell/haddock/blob/haddock-2.25.0-release/doc/markup.rst#hyperlinked-identifiers">up-to-date documentation on GitHub</a>.</p>
</div>
<h2 id="inter-module-references">Inter-module references <a href="#inter-module-references" class="section">§</a></h2>
<p>Consider the following module:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | See also &#39;ACME.Disamb.Quux&#39;.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">ACME.Disamb2</span> <span class="kw">where</span></span></code></pre></div>
<p>Unlike references <em>within</em> a module, inter-module references default
to the <em>value</em> namespace:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;p</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;caption&quot;</span><span class="kw">&gt;</span>Description<span class="kw">&lt;/p&gt;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;doc&quot;</span><span class="kw">&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;p&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    See also</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;code&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;ACME-Disamb.html#v:Quux&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;ACME.Disamb&quot;</span><span class="kw">&gt;</span>Quux<span class="kw">&lt;/a&gt;&lt;/code&gt;</span>.</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/p&gt;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Recall that <code>Quux</code> has no constructor. So the link doesn’t even
target the wrong identifier; it targets a <em>non-existent</em> identifier.</p>
<p>The solution is the same: prefix the whole reference with <code>t</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | See also t&#39;ACME.Disamb.Quux&#39;.</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">ACME.Disamb2</span> <span class="kw">where</span></span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>How to protect aeson code from hash flooding</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-10-12-aeson-hash-flooding-protection.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-10-12-aeson-hash-flooding-protection.html</id>
    <published>2021-10-12T00:00:00Z</published>
    <updated>2021-10-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="how-to-protect-aeson-code-from-hash-flooding">How to protect <em>aeson</em> code from hash flooding</h1>
<p>A few weeks ago Tom Sydney Kerckhove (<a href="https://twitter.com/kerckhove_ts/">@kerckhove_ts</a>)
published <a href="https://cs-syd.eu/posts/2021-09-11-json-vulnerability">an excellent writeup</a> of a serious DoS
vulnerability in <a href="https://hackage.haskell.org/package/aeson"><em>aeson</em></a>, a widely used Haskell
JSON library. <span class="abstract">A new <em>aeson</em> release addresses the hash flooding
issue, but you <strong>need more than a version bump</strong> to ensure your
programs are protected.</span> This post outlines how <em>aeson</em>
addressed the vulnerability and what action <em>you</em> need to take.</p>
<h2 id="overview-of-the-issue">Overview of the issue <a href="#overview-of-the-issue" class="section">§</a></h2>
<p><a href="https://cs-syd.eu/posts/2021-09-11-json-vulnerability">Tom’s article</a> is great and if you want the gory details,
go read it. There’s no need for me to repeat it here. It’s enough
to say that the attack, called <em>hash flooding</em> or <em>hash DoS</em>,
exploits the behaviour of the <a href="https://hackage.haskell.org/package/unordered-containers-0.2.14.0/docs/Data-HashMap-Lazy.html"><code>HashMap</code></a>
implementation from <em>unordered-containers</em>, which <em>aeson</em> used. It
results in a denial of service through CPU consumption. This
technique has been used in real-world attacks against a variety of
languages, libraries and frameworks over the years.</p>
<h2 id="am-i-vulnerable">Am I vulnerable? <a href="#am-i-vulnerable" class="section">§</a></h2>
<p>If you are using <code>aeson &lt; 2.0.0.0</code> and processing JSON from
untrusted sources, you are probably vulnerable. You could mitigate
the attack by refusing to decode large inputs, if your use case
allows it. Rate limiting may be a possible mitigation for some
applications.</p>
<h2 id="how-did-aeson-address-the-vulnerability">How did <em>aeson</em> address the vulnerability? <a href="#how-did-aeson-address-the-vulnerability" class="section">§</a></h2>
<p>Whereas prior versions used <code>HashMap</code> directly, starting at version
<code>2.0.0.0</code> <em>aeson</em> abstracts the map implementation behind a new data
type: <a href="https://hackage.haskell.org/package/aeson-2.0.1.0/docs/src/Data.Aeson.KeyMap.html"><code>Data.Aeson.KeyMap</code></a>. The <code>ordered-keymap</code>
Cabal flag selects the underlying implementation. When set, <em>aeson</em>
uses the <code>Ord</code>-based <a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Map-Lazy.html#t:Map"><code>Map</code></a> from <em>containers</em>. If
unset, <em>aeson</em> uses <a href="https://hackage.haskell.org/package/unordered-containers-0.2.14.0/docs/Data-HashMap-Lazy.html"><code>HashMap</code></a>.</p>
<p>Version <code>2.0.0.0</code> defaults the flag to <code>False</code>. As of <code>2.0.1.0</code> it
defaults to <code>True</code>. Importantly, the maintainers offer <a href="https://github.com/haskell/aeson/issues/864#issuecomment-939363297"><strong>no
guarantee that the default won’t change again</strong></a>. So
if you use <em>aeson</em> and want to protect yourself from hash flooding
attacks, take the extra precautions outlined in the following
sections.</p>
<p>This is an API-breaking change, hence the major version bump. Most
users will not have to change much code, but there will be
exceptions (I had to change quite a lot for <a href="https://hackage.haskell.org/package/jose"><em>jose</em></a>).</p>
<p>The <code>Map</code> version also behaves differently from <code>HashMap</code>. In
particular, objects may be serialised with a different key order,
and object keys are iterated in different orders. And who knows
what systems out there depend on the key order in some way, even
though they should not. That is a big reason why the maintainers
felt it was necessary to keep the option of using <code>HashMap</code>.</p>
<p>Also, these data structures have different performance
characteristics, with <code>Map</code> having <em>O(log n)</em> insertion and lookup
time. <code>HashMap</code> insertion and lookup are amortised <em>O(1)</em>,
degrading to <em>O(n)</em> for pathological inputs—which is the cause of
the vulnerability!</p>
<h2 id="compiling-a-safe-version-of-aeson">Compiling a safe version of aeson <a href="#compiling-a-safe-version-of-aeson" class="section">§</a></h2>
<p>If you have a program or library that uses <em>aeson</em>, you need to
ensure that the <em>aeson</em> you link against was compiled with the
<code>ordered-keymap</code> flag. There is no way to express this condition in
a <code>.cabal</code> file, but you can <em>can</em> express these constraints in the
<code>cabal.project</code> file:</p>
<pre><code>packages: .
constraints:
  aeson +ordered-keymap</code></pre>
<p>For Stack users, configure the flag in your <code>stack.yaml</code>:</p>
<pre><code>flags:
  aeson:
    ordered-keymap: true</code></pre>
<p>If you’re building and installing <em>aeson</em> directly, via
<em>cabal-install</em> (the <code>cabal</code> program), you can use the
<code>--flags=ordered-keymap</code> command line option.</p>
<h2 id="runtime-checks">Runtime checks <a href="#runtime-checks" class="section">§</a></h2>
<p>In your program or library you can also detect the <code>KeyMap</code>
implementation at runtime. If you detect <code>HashMap</code> you could abort,
emit a warning, or employ other mitigations like limiting the input
size.</p>
<p><code>Data.Aeson.KeyMap</code> exports the following types:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>coercionToHashMap</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Maybe</span> (<span class="dt">Coercion</span> (<span class="dt">HashMap</span> <span class="dt">Key</span> v) (<span class="dt">KeyMap</span> v))</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>coercionToMap</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Maybe</span> (<span class="dt">Coercion</span>     (<span class="dt">Map</span> <span class="dt">Key</span> v) (<span class="dt">KeyMap</span> v))</span></code></pre></div>
<p>The values are coercions—proofs of representational equality
enabling zero-cost conversions; see
<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Type-Coercion.html#t:Coercion"><code>Data.Type.Coercion</code></a>. Only one of <code>HashMap</code> or
<code>Map</code> is actually used, which is why they’re wrapped in <code>Maybe</code>.
The map implementation that <em>aeson</em> is using has a non-<code>Nothing</code>
coercion.</p>
<p>In <a href="https://hackage.haskell.org/package/jose"><em>jose</em></a> I will export the following value to make
it easy for library users to check that the implementation is safe
from hash flooding:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">vulnerableToHashFlood ::</span> <span class="dt">Bool</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>vulnerableToHashFlood <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> KeyMap.coercionToMap <span class="kw">of</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="dt">False</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span></code></pre></div>
<p>Users can (and hopefully will) check that value and respond in
whatever way is suitable for their use case. I might go even
further and cause all JWS processing to immediately fail when the
vulnerable implementation is detected, unless the caller overrides
this behaviour.</p>
<h2 id="what-about-other-things-that-use-hashmap">What about other things that use <code>HashMap</code>? <a href="#what-about-other-things-that-use-hashmap" class="section">§</a></h2>
<p>The <code>HashMap</code> data structure from <em>unordered-containers</em> remains
vulnerable to hash flooding attacks. Users and maintainers are
discussion potential solutions and mitigations in <a href="https://github.com/haskell-unordered-containers/unordered-containers/issues/319">issue #319</a>.
There are several interesting ideas, including:</p>
<ul>
<li><p>Initialise the library with a random salt, via <code>unsafePerformIO</code>.
Many libraries in other language ecosystems use this approach.
But it breaks referential integrity. Values and orders will not
be stable across different executions.</p></li>
<li><p>Use a more collision-resistant hash algorithm, or multiple hashes,
to make it harder to compute collisions.</p></li>
<li><p>Don’t do anything, because the other ideas come with performance
or usability penalties. If your program needs to be safe against
hash flooding, employ other mitigations (size check, rate
limiting, etc) or use an ordered map.</p></li>
</ul>
<p>This discussion is ongoing. The only change so far is to add a
security advisory to the package description.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p><code>aeson &gt;= 2.0.0.0</code> has mitigated the hash flooding vulnerability.
Users of the library must take specific action not only to upgrade
<em>aeson</em> to the latest version, but also ensure it is compiled with
the correct flags. Programs can also perform runtime checks and
take appropriate action if <em>aeson</em> is using <code>HashMap</code>.</p>]]></summary>
</entry>
<entry>
    <title>Reusing random generators in Hedgehog</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-10-03-hedgehog-reuse-random.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-10-03-hedgehog-reuse-random.html</id>
    <published>2021-10-03T00:00:00Z</published>
    <updated>2021-10-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="reusing-random-generators-in-hedgehog">Reusing random generators in Hedgehog</h1>
<p><a href="https://hedgehog.qa/">Hedgehog</a> has a powerful API for generating arbitrary values of
your types. But sometimes a library will already provide a random
generator. <span class="abstract">In this post I show how to use existing generators with
Hedgehog, and discuss the advantages and disadvantages.</span></p>
<h2 id="random-generator-use-cases">Random generator use cases <a href="#random-generator-use-cases" class="section">§</a></h2>
<p>Libraries may need to provide random generators of (some of) their
types for a variety of reasons. Cryptographic keys, secrets and
unique identifiers come to mind immediately.</p>
<p>One use case we have in <a href="https://hackage.haskell.org/package/purebred-email"><em>purebred-email</em></a>
is generation of MIME multipart boundary values (<a href="https://www.rfc-editor.org/rfc/rfc2046.html#section-5.1">RFC
2046</a>). The boundary is a string with 1–70 characters
from a restricted alphabet. Using a random boundary is useful
because the boundary delimiter line (the boundary value preceded by
two hyphens) must not appear anywhere within the message parts.</p>
<p>The <code>Boundary</code> type is defined as follows:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- constructor NOT exported</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Boundary</span> <span class="ot">=</span> <span class="dt">Boundary</span> <span class="dt">ByteString</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">unBoundary ::</span> <span class="dt">Boundary</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>unBoundary (<span class="dt">Boundary</span> s) <span class="ot">=</span> s</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- smart constructor; checks length and validity</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">makeBoundary ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">ByteString</span> <span class="dt">Boundary</span></span></code></pre></div>
<p>We don’t export the constructor. Users must use the <code>makeBoundary</code>
<em>smart constructor</em> which checks that the input is a valid boundary
value.</p>
<p>We also instance the <a href="https://hackage.haskell.org/package/random-1.2.0/docs/System-Random-Stateful.html#t:Uniform"><code>Uniform</code></a> type class from
the <a href="https://hackage.haskell.org/package/random"><em>random</em></a> package (version 1.2.0 onwards).
This instance provides a convenient way for users to generate
conformant boundary values that have a negligible probability of
matching any line in an arbitrary message.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">B</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Internal</span> <span class="kw">as</span> <span class="dt">B</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">C8</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Uniform</span> <span class="dt">Boundary</span> <span class="kw">where</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ot">  uniformM ::</span> <span class="dt">StatefulGen</span> g m <span class="ot">=&gt;</span> g <span class="ot">-&gt;</span> m a</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  uniformM g <span class="ot">=</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Boundary</span> <span class="op">.</span> B.unsafePackLenBytes <span class="dv">64</span> <span class="op">&lt;$&gt;</span> randString</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    randString  <span class="ot">=</span> replicateM <span class="dv">64</span> randChar</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    randChar    <span class="ot">=</span> B.index bchars <span class="op">&lt;$&gt;</span> randIndex</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    randIndex   <span class="ot">=</span> uniformRM (<span class="dv">0</span>, B.length bchars <span class="op">-</span> <span class="dv">1</span>) g</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    bchars      <span class="ot">=</span> C8.pack <span class="op">$</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                       [<span class="ch">&#39;a&#39;</span><span class="op">..</span><span class="ch">&#39;z&#39;</span>] <span class="op">&lt;&gt;</span> [<span class="ch">&#39;A&#39;</span><span class="op">..</span><span class="ch">&#39;Z&#39;</span>]</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&lt;&gt;</span> [<span class="ch">&#39;0&#39;</span><span class="op">..</span><span class="ch">&#39;9&#39;</span>] <span class="op">&lt;&gt;</span> <span class="st">&quot;&#39;()+_,-./:=?&quot;</span></span></code></pre></div>
<div class="note">
<p>A <code>Uniform</code> instance is supposed to draw from all possible values of
a type. In the <code>Boundary</code> instance we are only generating values of
length 64. This is acceptable for our use case but may surprise
some users.</p>
</div>
<p>The <em>random</em> library provides a very general interface to
instantiate and use random number generators. I cannot cover it in
any detail in this post. Assuming you already have a generator
value, <a href="https://hackage.haskell.org/package/random-1.2.0/docs/System-Random-Stateful.html#t:Uniform"><code>System.Random.uniform</code></a> generates a value
of any type with an instance of <code>Uniform</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">uniform ::</span> (<span class="dt">RandomGen</span> g, <span class="dt">Uniform</span> a) <span class="ot">=&gt;</span> g <span class="ot">-&gt;</span> (a, g)</span></code></pre></div>
<p>You can use <code>uniform</code> with
<a href="https://hackage.haskell.org/package/random-1.2.0/docs/System-Random.html#v:getStdRandom"><code>System.Random.getStdRandom</code></a> to generate
values using a global pseudo-random number generated initialised
from system entropy, as an <code>IO</code> action:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getStdRandom ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> (<span class="dt">StdGen</span> <span class="ot">-&gt;</span> (a, <span class="dt">StdGen</span>)) <span class="ot">-&gt;</span>  m a</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">getStdRandom ::</span>              (<span class="dt">StdGen</span> <span class="ot">-&gt;</span> (a, <span class="dt">StdGen</span>)) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>getStdRandom<span class="ot"> uniform ::</span> (<span class="dt">MonadIO</span> m, <span class="dt">Uniform</span> a) <span class="ot">=&gt;</span>  m a</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>getStdRandom<span class="ot"> uniform ::</span>            (<span class="dt">Uniform</span> a) <span class="ot">=&gt;</span> <span class="dt">IO</span> a</span></code></pre></div>
<h2 id="hedgehog-and-hidden-constructors">Hedgehog and hidden constructors <a href="#hedgehog-and-hidden-constructors" class="section">§</a></h2>
<p>If a module does not expose the constructor of some type, how can
the test suite generate random values of that type? There are
several ways you could tackle this:</p>
<ol type="1">
<li><p>Export the constructor from some “internal” module, which is not
really internal. In this way, library users may be
discouraged—but not prevented—from constructing bad data. The
test module can import the constructor from the library’s
“internal” module and use it to define the generator.</p></li>
<li><p>Export a Hedgehog <code>Gen</code> for the type from the library itself.
This causes the library to depend on Hedgehog, which is usually
not desirable.</p></li>
<li><p>For a <code>newtype</code>, use
<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Unsafe-Coerce.html"><code>Unsafe.Coerce.unsafeCoerce</code></a> in the <code>Gen</code>
definition to coerce the underlying type to the wrapped type.
You cannot use <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Coerce.html"><code>Data.Coerce.coerce</code></a> if the
constructor is not in scope. This is nasty, but not unspeakable
given we’re talking about generators for the test suite.</p></li>
</ol>
<ol start="4" type="1">
<li>Export a “lightweight” random generator from the library, and
reuse it to define the <code>Gen</code> in the test suite. If you were
going to export a <code>Uniform</code> (or <code>UniformRange</code>) instance anyway,
this will be low-effort. This approach is the main topic of this
article.</li>
</ol>
<h2 id="implementing-gen-using-uniform">Implementing <code>Gen</code> using <code>Uniform</code> <a href="#implementing-gen-using-uniform" class="section">§</a></h2>
<p>I was aware that Hedgehog depends on <em>random</em>, and was hopeful of
finding a way to use the existing <code>Uniform</code> instance to implement a
<code>Gen Boundary</code>. Looking through the docs, I stumbled across
<a href="https://hackage.haskell.org/package/hedgehog-1.0.5/docs/Hedgehog-Internal-Gen.html#v:generate"><code>generate</code></a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">generate ::</span> <span class="dt">MonadGen</span> m <span class="ot">=&gt;</span> (<span class="dt">Size</span> <span class="ot">-&gt;</span> <span class="dt">Seed</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>It was not immediately apparent whether I could use <code>generate</code> to
define a <code>Gen Boundary</code>. First, does <code>Gen</code> have an instance of
<code>MonadGen</code>?</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Gen</span> <span class="ot">=</span> <span class="dt">GenT</span> <span class="dt">Identity</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">MonadGen</span> (<span class="dt">GenT</span> m)</span></code></pre></div>
<p>Yes, it does. Next, I had to work out how to turn a <code>Size</code> and a
<code>Seed</code> into a <code>Boundary</code>. To my delight, I saw that <code>Seed</code> has an
instance of <code>RandomGen</code>. Putting it together, all that is required
is to apply <code>uniform</code> to the <code>Seed</code>, and discard the new generator
value. I ignore the <code>Size</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hedgehog</span> (<span class="dt">Gen</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hedgehog.Internal.Gen</span> (generate)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ot">genBoundary ::</span> <span class="dt">Gen</span> <span class="dt">Boundary</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>genBoundary <span class="ot">=</span> generate (\_size seed <span class="ot">-&gt;</span> <span class="fu">fst</span> (uniform seed))</span></code></pre></div>
<h2 id="disadvantages">Disadvantages <a href="#disadvantages" class="section">§</a></h2>
<p>There are a few disadvantages to reusing a library’s random
generator to define your Hedgehog <code>Gen</code>.</p>
<p>First, the generated values are restricted to whatever the library’s
generator gives you. In my case, the <code>Boundary</code> generator only
generates values of length 64. It follows that Hedgehog could miss
all kinds of bugs. For example, if <em>purebred-email</em> fails to decode
boundaries of length 70 due to an off-by-one error, I have no hope
of catching that bug.</p>
<p>Second, <code>generate</code> gives you a <code>Gen</code> with no shrinks. If Hedgehog
finds a counterexample, it can’t do anything to try and simplify it.
Automatic shrinking is one of Hedgehog’ss killer features, but you
give it up by using <code>generate</code>.</p>
<p>You can use the <code>shrink</code> function to supply additional shrinking
behaviour to a <code>Gen</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">shrink ::</span> <span class="dt">MonadGen</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> [a]) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m a </span></code></pre></div>
<p>But when you don’t have access to the constructor for the data type
you’re generating, defining your own shrinks is at best awkward, and
maybe impossible. I <em>could</em> implement <code>Boundary</code> shrinking by
extracting the underlying <code>ByteString</code> (<code>unBoundary</code>), shrinking it,
applying the smart constructor (<code>makeBoundary</code>) and filtering
invalid values. That’s a lot of work. I didn’t bother.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>Defining Hedgehog <code>Gen</code> values can be awkward or very difficult for
types whose constructors are hidden. But if you have a function
that uses a <code>RandomGen</code> to generate values, you can use it with
Hedgehog’s <code>generate</code> function to define a <code>Gen</code>. The downsides are
that you don’t get automatic shrinking, and you are restricted to
whatever values the generator produces.</p>
<p>Alternative approaches include exposing the constructor via an
“internal” (but actually public) module, or using <code>unsafeCoerce</code>.</p>]]></summary>
</entry>
<entry>
    <title>Hakyll how-to: pages without source files</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-07-26-hakyll-without-sources.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-07-26-hakyll-without-sources.html</id>
    <published>2021-07-26T00:00:00Z</published>
    <updated>2021-07-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="hakyll-how-to-pages-without-source-files">Hakyll how-to: pages without source files</h1>
<p><a href="https://jaspervdj.be/hakyll/">Hakyll</a> is a static website builder. The typical use case is to
take some files written in lightweight markup and compile them into
static HTML. Besides the sources for the main content, there are
also HTML templates, CSS, perhaps some JavaScript, images and so on.</p>
<p>But perhaps you need to build a site from sources other than local
files. Possible scenarios include:</p>
<ul>
<li>Crawl and mirror another site</li>
<li>Generate and publish calendars files for a conference</li>
<li>Create a directory of content from some other source</li>
</ul>
<p>As a static site builder, Hakyll can be a good choice for publishing
data that change infrequently. <span class="abstract">In this post I demonstrate how to
generate Hakyll site content without corresponding source
files.</span></p>
<h2 id="use-case-web-key-directory">Use case: Web Key Directory <a href="#use-case-web-key-directory" class="section">§</a></h2>
<p>My use case was to generate a <a href="https://wiki.gnupg.org/WKD"><em>Web Key Directory (WKD)</em></a> for
my personal OpenPGP keys. OpenPGP clients can use WKD for key
discovery. WKD is an alternative to the older keyserver system, which
<a href="https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f">has some problems</a>. It works as follows:</p>
<ol type="1">
<li><p>The client seeks a key for identity <code>Joe.Doe@example.org</code>.</p></li>
<li><p>Lower-case, digest (SHA-1) and <a href="https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt">z-base-32</a> encode the address
local part (<code>Joe.Doe</code> → <code>iy9q119eutrkn8s1mk4r39qejnbu3n5q</code>).</p></li>
<li><p>The client performs HTTP GET request for:</p>
<pre><code>https://openpgpkey.example.org
  /.well-known/openpgpkey/example.org
  /hu/iy9q119eutrkn8s1mk4r39qejnbu3n5q?l=Joe.Doe</code></pre>
<p>This is called the <em>advanced method</em>.</p></li>
<li><p>The server responds with the binary encoding of the key (or a
<code>404</code>).</p></li>
<li><p>As a fallback, the client tries:</p>
<pre><code>https://example.org
  /.well-known/openpgpkey
  /hu/iy9q119eutrkn8s1mk4r39qejnbu3n5q?l=Joe.Doe</code></pre>
<p>This is called the <em>direct method</em>.</p></li>
</ol>
<p>Observe that, up to case-sensitivity of the email local part, the
server does not necessarily need to use the <code>?l=Joe.Doe</code> query
parameter. If the local part is case-<strong><em>in</em></strong>sensitive (it usually is)
then the digest, which is part of the URI path, is enough.
Therefore an HTTP server serving static files can be a functional
WKD server. You just need to build the directory.</p>
<div class="note">
<p>The <em>advanced method</em> has several advantages over the <em>direct
method</em>. Users or organisations with multiple domains can maintain
a single unified WKD, or delegate to an external service. The
advanced method does not interfere with existing sites. On the down
side, the <code>openpgpkey</code> DNS subdomain must be configured for each
domain. The TLS requirement is hardly a disadvantage, because of
<a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a>.</p>
</div>
<h2 id="building-a-web-key-directory-with-hakyll">Building a Web Key Directory with Hakyll <a href="#building-a-web-key-directory-with-hakyll" class="section">§</a></h2>
<h3 id="reading-keys-from-gnupg">Reading keys from GnuPG <a href="#reading-keys-from-gnupg" class="section">§</a></h3>
<p><a href="https://gnupg.org/">GnuPG</a> is my OpenPGP client. My Hakyll program invokes <code>gpg</code> to
list and extract keys. Here are the types of the functions involved
(I will not detail their implementations):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">KeyId</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Uid</span> <span class="ot">=</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="co">-- ^ local-part, domain</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">listKeys ::</span> <span class="dt">IO</span> (<span class="dt">L8.ByteString</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">exportKey ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Uid</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">L8.ByteString</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ot">hashLocalPart ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ot">extractUserIds ::</span> <span class="dt">L8.ByteString</span> <span class="ot">-&gt;</span> [<span class="dt">Uid</span>]</span></code></pre></div>
<div class="note">
<p>I used the <a href="https://hackage.haskell.org/package/typed-process"><em>typed-process</em></a> package to
execute GnuPG. The <code>--with-colons</code> option is helpful for inspecting
keys and their user IDs. You can use an <code>--export-filter</code> to select
the user ID(s) to export. The man pages and <a href="https://github.com/gpg/gnupg/blob/master/doc/DETAILS"><code>DETAILS</code></a>
file contain all the information you need for programmatic
interaction with GnuPG.</p>
</div>
<h3 id="creating-resources">Creating resources <a href="#creating-resources" class="section">§</a></h3>
<p>Hakyll sites use <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:match"><code>match</code></a> to generate compilation rules
for local resources. For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*.md&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  compile pandocCompiler</span></code></pre></div>
<p>But there are no local files to <code>match</code>. Instead, we use
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:create"><code>create</code></a> to declare new resources. These resources can be
routed to like any other, but we must synthesise the content. The
following function, given a key ID and an email address, exports the
key from GnuPG and establishes the route.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">wkdUid ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Uid</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>wkdUid keyId uid<span class="op">@</span>(localPart, domain) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> path <span class="ot">=</span> <span class="st">&quot;.well-known/openpgpkey/&quot;</span> <span class="op">&lt;&gt;</span> domain <span class="op">&lt;&gt;</span> <span class="st">&quot;/hu/&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>             <span class="op">&lt;&gt;</span> hashLocalPart localPart</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  create [fromFilePath path] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    route <span class="op">$</span> idRoute</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> exportKey keyId uid</span></code></pre></div>
<p><code>create</code> is applied to a list of resource identifiers, and a <code>Rules ()</code> for compiling and routing the resource. I am not showing the
implementation of <code>exportKey</code>; it’s enough to know that it uses
<code>IO</code>. Hakyll provides <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Compiler.html#v:unsafeCompiler"><code class="sourceCode haskell"><span class="ot">unsafeCompiler ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> a</code></a> for executing I/O actions in compiler
context.</p>
<p><code>wkdUid</code> creates the key resource for a single user ID. A key can
have multiple user IDs. <code>wkUIDs on a specified KeydKey</code> creates the
Hakyll <code>Rules ()</code> for all user IDs on a given key:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">wkdKey ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>wkdKey keyId <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  out <span class="ot">&lt;-</span> preprocess listKeys</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> uids <span class="ot">=</span> extractUserIds out</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  traverse_ (wkdUid keyId) uids</span></code></pre></div>
<p><code class="sourceCode haskell"><span class="ot">preprocess ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">Rules</span> a</code> embeds an I/O action in
the <code>Rules</code> context. Hakyll executes the action eagerly, unlike
<code>unsafeCompiler</code> which is run on demand. This makes sense—we need
to <code>listKeys</code> first to work out what resources to create.</p>
<p>Having extracted the user IDs, we <code>traverse_</code> them to create the WKD
resources. We also use <code>traverse_</code> at the outmost layer of the
program to invoke <code>wkdKey</code> for each key ID given on standard input:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  keys <span class="ot">&lt;-</span> <span class="fu">words</span> <span class="op">&lt;$&gt;</span> <span class="fu">getContents</span> <span class="co">-- read stdin</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  hakyll <span class="op">$</span> traverse_ wkdKey keys</span></code></pre></div>
<h2 id="how-hakyll-compiling-works">How Hakyll compiling works <a href="#how-hakyll-compiling-works" class="section">§</a></h2>
<p>Let’s dive a bit deeper into how compiling works. The
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:compile"><code>compile</code></a> function adds a content compiler to the <code>Rules</code>
for resources. It’s type is:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>compile</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> (<span class="dt">Binary</span> a, <span class="dt">Typeable</span> a, <span class="dt">Writable</span> a)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> a)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span></code></pre></div>
<p>The compiler argument has to return an <code>Item a</code>, where <code>a</code> has
several type class constraints. <code>Binary</code> and <code>Typeable</code> are used by
Hakyll’s caching mechanism. <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Writable.html#t:Writable"><code>Writable</code></a> is what Hakyll
uses to write the compiled resource to the site output. There are
several instances, including for <code>String</code>, <code>ByteString</code> (lazy and
strict), and <code>Html</code>. Hakyll provides <code>makeItem :: a -&gt; Compiler (Item a)</code> for returning an <code>Item a</code>.</p>
<p>As an example, here is a compiler that executes a subprocess and
returns the standard output:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>processCompiler</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">L.ByteString</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>processCompiler exe args <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  (_status, out, _err) <span class="ot">&lt;-</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    unsafeCompiler <span class="op">.</span> readProcess <span class="op">$</span> proc exe args</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  makeItem out</span></code></pre></div>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>I have demonstrated how to use Hakyll to create content derived not
from local files, but other sources (GnuPG in my case). Is this
actually a good idea? For one-shot applications and data that don’t
change frequently, I think it is fine. Hakyll takes care of all the
filesystem I/O, relieving me of some tedium and avoiding a possible
source of bugs.</p>
<p>For my WKD use case, I can rebuild the site when my keys have been
updated, then <code>rsync</code> it to my web server. The program is well
under 100 lines of code—including imports! Source code is
<a href="https://github.com/frasertweedale/hakyll-wkd">available on GitHub</a>
under AGPLv3. At time of writing I have not published it on
Hackage.</p>
<div class="note">
<p>Because there are no local file dependencies for the resources,
Hakyll does not know to recompile it. You have to <strong><code>rebuild</code></strong>
every time. This may be a practical issue for some use cases,
though not for mine.</p>
</div>
<p>In general, it would be useful to be able to specify arbitrary
freshness checks for resources. Unfortunately Hakyll’s
implementation does not readily admit such a feature. But it was
straightforward to add <em>unconditional</em> rebuilding on a per-resource
basis. I submitted a <a href="https://github.com/jaspervdj/hakyll/pull/857">pull request</a> to add the <code>forceCompile</code>
helper function. Example usage:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- compile this resource every time</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>forceCompile <span class="op">$</span> create [<span class="st">&quot;foo&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> idRoute</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> unsafeCompiler <span class="op">$</span> doStuff</span></code></pre></div>
<p>This feature was accepted and will appear in a future release of
Hakyll.</p>]]></summary>
</entry>
<entry>
    <title>Generating abstracts for Hakyll articles</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-06-11-hakyll-abstracts.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-06-11-hakyll-abstracts.html</id>
    <published>2021-06-11T00:00:00Z</published>
    <updated>2021-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="generating-abstracts-for-hakyll-articles">Generating abstracts for Hakyll articles</h1>
<p>Suppose you have a list of recent posts and want to include an
abstract for each one. Or maybe you want to include brief article
summaries in metadata about your content. <span class="abstract">In this post I
demonstrate several ways to declare or generate abstracts for
content on your <a href="https://jaspervdj.be/hakyll/">Hakyll</a> site.</span></p>
<h2 id="objective">Objective <a href="#objective" class="section">§</a></h2>
<p>The goal is to include an <code>$abstract$</code> field in each article’s
context. The field value should be a brief abstract or description
of the article. What to actually <em>do</em> with the value is outside the
scope of this post. But it is fair to include an example, so here’s
how you could use it in a “recent posts” list:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  $for(posts)$</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;li&gt;&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span>: $abstract$<span class="kw">&lt;/li&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  $endfor$</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/ul&gt;</span></span></code></pre></div>
<p>I will discuss a more interesting use case in a future post.</p>
<h2 id="metadata">Metadata <a href="#metadata" class="section">§</a></h2>
<p>Hakyll processes optional metadata at the top of the article source.
The format is YAML. Fields in the YAML map are available via
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Template-Context.html#v:metadataField"><code>metadataField</code></a>, which is also part of the
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Template-Context.html#v:defaultContext"><code>defaultContext</code></a>.</p>
<p>So you can define an abstract in the metadata, like so:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">---</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="fu">tags</span><span class="kw">:</span><span class="at"> hakyll, pandoc</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">abstract</span><span class="kw">: </span><span class="ch">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  In this post I demonstrate several ways to generate</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  abstracts for articles in your Hakyll site.</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="pp">---</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co"># Generating abstracts for Hakyll articles</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">…</span></span></code></pre></div>
<div class="note">
<p>Be careful of including HTML special characters (<code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>"</code>,
<code>'</code>) in the metadata. These will <em>not</em> be escaped automatically,
and could break the page. I avoid this pitfall by escaping all
values that come from <code>metadataField</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>context <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  mapContext escapeHtml metadataField </span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
</div>
<h2 id="markup">Markup <a href="#markup" class="section">§</a></h2>
<p>I don’t like repeating myself. If I were to use <code>metadataField</code>,
the abstract I write would often be a repeat the article’s
introduction or some part thereof. Wouldn’t it be nice if I could
just indicate—<em>inline</em>—a portion of the article to use as the
abstract? For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu"># Generating abstracts for Hakyll articles</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>Suppose you have … [In this post I demonstrate several</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ways to generate abstracts for articles in your Hakyll</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>site.]{.abstract}</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>…</span></code></pre></div>
<p>The example above uses Pandoc’s <code>bracketed_spans</code> extension. You
could achieve the same with explicit <code>&lt;span&gt;</code> tags. Other input
formats may or may not provide a way to do it.</p>
<p>On the Hakyll side, we first need a function to locate a span with
the <code>abstract</code> class in the <code>Pandoc</code> AST:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">abstract ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>abstract (<span class="dt">Pandoc</span> _ blocks) <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  removeFormatting <span class="op">&lt;$&gt;</span> findSpan blocks</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  findSpan <span class="ot">=</span> <span class="fu">fmap</span> getFirst <span class="op">.</span> query <span class="op">$</span> \inl <span class="ot">-&gt;</span> <span class="kw">case</span> inl <span class="kw">of</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Span</span> (_id, cls, _attrs) inls</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">|</span> <span class="st">&quot;abstract&quot;</span> <span class="ot">`elem`</span> cls <span class="ot">-&gt;</span> <span class="dt">First</span> (<span class="dt">Just</span> inls)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    _                           <span class="ot">-&gt;</span> <span class="fu">mempty</span></span></code></pre></div>
<p>In the unlikely event that there are multiple spans with class
<code>abstract</code>, the <code>First [Inline]</code> monoid keeps only the first. I
strip all formatting via <a href="2021-01-11-hakyll-title-formatting.html#removeFormatting"><code>removeFormatting</code></a>,
which I <a href="2021-01-11-hakyll-title-formatting.html#removeFormatting">described</a> in a previous post.</p>
<p>The next step is to update the compiler to save a
snapshot of the abstract.
<a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM"><code>pandocCompilerWithTransformM</code></a>
gives access to the <code>Pandoc</code> AST, and allows arbitrary
<code>Compiler</code> actions including <code>saveSnapshot</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    pandocCompilerWithTransformM</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>      defaultHakyllReaderOptions</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>      defaultHakyllWriterOptions</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>      (\pandoc <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> render <span class="ot">=</span> <span class="fu">fmap</span> writePandoc <span class="op">.</span> makeItem</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>                     <span class="op">.</span> <span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">maybe</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>            (<span class="fu">pure</span> ())</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>            (void <span class="op">.</span> (saveSnapshot <span class="st">&quot;abstract&quot;</span> <span class="op">&lt;=&lt;</span> render))</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>            (abstract pandoc)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> pandoc</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>      )</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> context</span></code></pre></div>
<p>Finally we define a new kind of context field that can read
snapshots:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  loadSnapshotBody item snap</span></code></pre></div>
<p>and add the field to the context:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>context <span class="ot">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  snapshotField <span class="st">&quot;abstract&quot;</span> <span class="st">&quot;abstract&quot;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
<h2 id="autogeneration">Autogeneration <a href="#autogeneration" class="section">§</a></h2>
<p>Consider the following heuristic for autogenerating an abstract:
Take the first paragraph that immediately precedes a heading; that
is the abstract.</p>
<p>This is a very basic heuristic. But absent other data it’s probably
better than nothing. So let’s implement it:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">abstract ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>abstract (<span class="dt">Pandoc</span> _ blocks) <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  removeFormatting <span class="op">&lt;$&gt;</span> fallback</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  fallback (<span class="dt">Para</span> inlines <span class="op">:</span> <span class="dt">Header</span> _ _ _ <span class="op">:</span> _) <span class="ot">=</span> <span class="dt">Just</span> inlines</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  fallback (_h <span class="op">:</span> t) <span class="ot">=</span> fallback t</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  fallback [] <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This version of <code>abstract</code> scans the list of block elements at the
top level of the <code>Pandoc</code> AST. The first time it sees a <code>Para</code>
preceding a <code>Header</code>, it returns the paragraph content.</p>
<h2 id="putting-it-all-together">Putting it all together <a href="#putting-it-all-together" class="section">§</a></h2>
<p>For my sites, I want to use all three methods described above. An
abstract specified in the <em>metadata</em> is preferred. Explicit
<em>markup</em> is my second preference and the <em>autogeneration</em> heuristic
is a last resort. This will provide a good user experience for me.
With a tiny bit of markup I can avoid repeating myself most of the
time. But if it is warranted, I can use the metadata to write
something different. Sometimes I’ll get a fair result without doing
anything.</p>
<p>Combining the two versions of <code>abstract</code> is left as an exercise for
the reader (hint: <code>Control.Applicative.&lt;|&gt;</code>).</p>
<p>Take care when composing the context. The <code>metadataField</code> has to
come before the <code>snapshotField</code> (if that’s the priority you want):</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>context <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  mapContext escapeHtml metadataField</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;abstract&quot;</span> <span class="st">&quot;abstract&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
<p>Now I have a nice way to generate abstracts for my articles. I will
explore an interesting use case in an upcoming post.</p>]]></summary>
</entry>
<entry>
    <title>A combinator library for taxes</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-05-23-tax-combinators.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-05-23-tax-combinators.html</id>
    <published>2021-05-23T00:00:00Z</published>
    <updated>2021-05-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="a-combinator-library-for-taxes">A combinator library for taxes</h1>
<p>Doing your taxes is no fun. But functional programming can ease the
pain. In this post I describe and demonstrate the Haskell
<a href="https://hackage.haskell.org/package/tax"><em>tax</em></a> library, which provides data types and
combinators for defining taxes.</p>
<h2 id="what-is-a-tax">What is a tax? <a href="#what-is-a-tax" class="section">§</a></h2>
<p>Wikipedia <a href="https://en.wikipedia.org/wiki/Tax">defines</a> a tax as <em>a compulsory financial
charge or some other type of levy imposed on a taxpayer</em>. Most
taxes have monetary “inputs and outputs” but other kinds of taxation
exist, such as the <a href="https://en.wikipedia.org/wiki/Corv%C3%A9e#Modern_instances"><em>corvée</em></a>. Therefore <em>tax</em>
defines a type that is abstracted over its inputs and outputs:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Tax</span> b a <span class="ot">=</span> <span class="dt">Tax</span> {<span class="ot"> getTax ::</span> b <span class="ot">-&gt;</span> a }</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Semigroup</span>, <span class="dt">Monoid</span>, <span class="dt">Functor</span>, <span class="dt">Profunctor</span>)</span></code></pre></div>
<p>The <code>Tax b a</code> type is a wrapper around the function type <code>(b -&gt; a)</code>.
Although <code>(-&gt;)</code> has all the instances we need, I found it more
ergonomic to define a new type that communicates the <em>intent</em> of the
values. The <code>GeneralizedNewtypeDeriving</code> extension enables
automatic derivation of the following type class instances:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> a <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Tax</span> b a)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span>    <span class="dt">Monoid</span> a <span class="ot">=&gt;</span>    <span class="dt">Monoid</span> (<span class="dt">Tax</span> b a)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Tax</span> b)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Profunctor</span> <span class="dt">Tax</span></span></code></pre></div>
<p>The <code>Semigroup</code> operation sums outputs. The <code>Monoid</code> identity
is a 0% tax.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> getTax (flat <span class="fl">0.1</span> <span class="op">&lt;&gt;</span> flat <span class="fl">0.2</span> <span class="op">&lt;&gt;</span> <span class="fu">mempty</span>) (<span class="dt">Money</span> <span class="dv">10</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">$</span><span class="fl">3.0</span></span></code></pre></div>
<p>For convenience, <em>tax</em> exports a type synonym for taxes whose inputs
and outputs are money (of the same type). The input is an amount
subject to taxation (often income), and the output is the tax due:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MoneyTax</span> a <span class="ot">=</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span></code></pre></div>
<p>The <a href="https://hackage.haskell.org/package/dollaridoos-0.1.0.0/docs/Data-Money.html#t:Money"><code>Money</code></a> type comes from the
<a href="https://hackage.haskell.org/package/dollaridoos"><em>dollaridoos</em></a> package.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Money</span> a <span class="ot">=</span> <span class="dt">Money</span> a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p><code>Money</code> restricts the operations that can be performed by omitting a
<code>Num</code> instance. Dedicated functions provide the operations that
make sense for money, like <em>scalar</em> multiplication:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">($*) ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span>       a <span class="ot">-&gt;</span> <span class="dt">Money</span> a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(*$) ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span>       a <span class="ot">-&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> <span class="dt">Money</span> a</span></code></pre></div>
<p><code>Money a</code> also has instances for <code>Semigroup</code> and <code>Monoid</code> when the
wrapped type has an instance of <code>Num</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Money</span> a)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span>    <span class="dt">Monoid</span> (<span class="dt">Money</span> a)</span></code></pre></div>
<p>All types in <em>tax</em> are abstracted over the numeric representation.
Different applications can have different requirements for
precision. Users may want to use a type that carries additional
context, such as a currency. Therefore <em>tax</em> lets the user choose
the numeric representation to use.</p>
<h2 id="constructing-taxes">Constructing taxes <a href="#constructing-taxes" class="section">§</a></h2>
<p>The most basic taxes are <strong>lump</strong> sums, and <strong>flat</strong>-rate taxes:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lump ::</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>lump <span class="ot">=</span> <span class="dt">Tax</span> <span class="op">.</span> <span class="fu">const</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">flat ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>flat <span class="ot">=</span> <span class="dt">Tax</span> <span class="op">.</span> (<span class="op">*$</span>)</span></code></pre></div>
<p>Some other common taxation constructions include taxing the amount
<strong>above</strong> some threshold at a flat rate, or taxing the <em>whole</em>
amount at a flat rate when it exceeds the <strong>threshold</strong>. These
functions have the same type signature (I’ll show the implementation
later):</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>above, threshold</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span></code></pre></div>
<h2 id="combinators">Combinators <a href="#combinators" class="section">§</a></h2>
<p>More complex taxes can be built using a handful of
<a href="https://wiki.haskell.org/Combinator_pattern"><em>combinators</em></a> (functions that assemble smaller
components into more complicated structures). This section
describes the combinators provided by the <em>tax</em> package.</p>
<p>Levy the <strong>lesser</strong> or <strong>greater</strong> of two taxes:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>lesserOf, greaterOf</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>lesserOf  t1 t2 <span class="ot">=</span> <span class="dt">Tax</span> (<span class="fu">min</span> <span class="op">&lt;$&gt;</span> getTax t1 <span class="op">&lt;*&gt;</span> getTax t2)</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>greaterOf t1 t2 <span class="ot">=</span> <span class="dt">Tax</span> (<span class="fu">max</span> <span class="op">&lt;$&gt;</span> getTax t1 <span class="op">&lt;*&gt;</span> getTax t2)</span></code></pre></div>
<p><strong>Limit</strong> the tax payable to a given amount:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">limit ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>limit <span class="ot">=</span> lesserOf <span class="op">.</span> lump</span></code></pre></div>
<p>Whereas <code>above</code> and <code>threshold</code> use flat rates, <code>above'</code> and
<code>threshold'</code> subject the taxable portion of the input to arbitrary
<code>Tax</code> computations:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">above&#39; ::</span> (<span class="dt">Num</span> b, <span class="dt">Ord</span> b)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>       <span class="ot">=&gt;</span> <span class="dt">Money</span> b <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> b) a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> b) a</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>above&#39; l <span class="ot">=</span> lmap (\x <span class="ot">-&gt;</span> <span class="fu">max</span> (x <span class="op">$-$</span> l) <span class="fu">mempty</span>)</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ot">threshold&#39; ::</span> (<span class="dt">Ord</span> b, <span class="dt">Monoid</span> a) <span class="ot">=&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>threshold&#39; l tax <span class="ot">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tax</span> (\x <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="op">&gt;=</span> l <span class="kw">then</span> getTax tax x <span class="kw">else</span> <span class="fu">mempty</span>)</span></code></pre></div>
<p>In <code>above'</code>, note the use of <code>lmap</code> to reduce (via the <code>Money</code>
subtraction function <code>($-$)</code>) the amount the tax is levied upon.
This is the first usage of the <code>Profunctor</code> instance, but it will
not be the last.</p>
<p>With <code>above'</code> and <code>threshold'</code> in hand, we now see that the
implementations of <code>above</code> and <code>threshold</code> (which apply flat-rate
taxes) are trivial:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>above, threshold</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>above     l <span class="ot">=</span> above&#39;     l <span class="op">.</span> flat</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>threshold l <span class="ot">=</span> threshold&#39; l <span class="op">.</span> flat</span></code></pre></div>
<p>In real world use, I have not (so far) used <code>above'</code> or
<code>threshold'</code>; the flat rate variants sufficed. Nevertheless, for
completeness <em>tax</em> exports the general variants.</p>
<h2 id="examples">Examples <a href="#examples" class="section">§</a></h2>
<h3 id="progressive-tax">Progressive tax <a href="#progressive-tax" class="section">§</a></h3>
<p>Many countries use <a href="https://en.wikipedia.org/wiki/Progressive_tax"><em>progressive taxes</em></a>, where
different bands of income are taxed at increasing flat rates. For
example, in Australia for the 2020–21 financial year the first
$18,200 is tax free, with income between $18,200 and $45,000 taxed
at 19%, then 32.5% up to $120,000, 37% up to $180,000, and 45% above
$180,000.</p>
<p>Observe that the <code>Monoid</code> instance for <code>Tax</code> sums the outputs of
constituent taxes applied to the same input. We can define a
function that takes a list of thresholds and rates, and constructs a
progressive tax:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">marginal ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>         <span class="ot">=&gt;</span> [(<span class="dt">Money</span> a, a)] <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>marginal <span class="ot">=</span> <span class="fu">foldMap</span> (<span class="fu">uncurry</span> above)</span></code></pre></div>
<p>Because of the accumulative behaviour, the rate for each band must
be the <strong>difference</strong> to the previous band. The rate for the first
band is implicitly the delta to 0%. The Australian regime can be
expressed as:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ausTax ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>ausTax <span class="ot">=</span> marginal</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  [ ( <span class="dt">Money</span> <span class="dv">18200</span>,  <span class="fl">0.19</span>  <span class="op">-</span> <span class="dv">0</span>     )</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  , ( <span class="dt">Money</span> <span class="dv">45000</span>,  <span class="fl">0.325</span> <span class="op">-</span> <span class="fl">0.19</span>  )</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  , ( <span class="dt">Money</span> <span class="dv">120000</span>, <span class="fl">0.37</span>  <span class="op">-</span> <span class="fl">0.325</span> )</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  , ( <span class="dt">Money</span> <span class="dv">180000</span>, <span class="fl">0.45</span>  <span class="op">-</span> <span class="fl">0.37</span>  ) ]</span></code></pre></div>
<p>The <code>marginal</code> function is useful enough that the <em>tax</em> package
provides it.</p>
<h3 id="shade-in">Shade in <a href="#shade-in" class="section">§</a></h3>
<p>Australia’s public health system is funded by the <em>Medicare Levy</em>.
It is currently 2% of income, but people below a certain threshold
are exempt (the threshold changes each year). The amount above the
threshold is taxed at 10% until it reaches 2% of the input. This
prevents a sudden jump in tax owed and eliminates a perverse
incentive to earn less than the threshold (if your income is around
that number). The Australian Taxation Office calls this
construction a <em>shade in</em>.</p>
<p>Using the functions defined above and taking the lower shade in
threshold as a parameter, this tax is an elegant one-liner:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>medicareLevy</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>medicareLevy l <span class="ot">=</span> lesserOf (above l <span class="fl">0.1</span>) (flat <span class="fl">0.02</span>)</span></code></pre></div>
<h3 id="tax-offsets">Tax offsets <a href="#tax-offsets" class="section">§</a></h3>
<p>A tax doesn’t have to result in an amount owed. Maybe your
government will <em>give</em> you some money based on your income. Indeed
Australia has some <em>tax offsets</em> that reduce the tax paid by people
on lower incomes.</p>
<p>An example is the <em>Low Income Tax Offset</em>, which was previously
defined as: <em>$445, reduced by 1.5c for every dollar earned over
$37,000</em> (the current definition is more complex). We can implement
it like so:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lito ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>lito <span class="ot">=</span> limit <span class="fu">mempty</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  (lump (<span class="dt">Money</span> (<span class="op">-</span><span class="dv">445</span>)) <span class="op">&lt;&gt;</span> above (<span class="dt">Money</span> <span class="dv">37000</span>) <span class="fl">0.015</span>)</span></code></pre></div>
<p><code>limit mempty</code> ensures that the result does not exceed $0.</p>
<h3 id="withholding-tax">Withholding tax <a href="#withholding-tax" class="section">§</a></h3>
<p>Many jurisdictions collect income taxes by requiring employers to
remit a portion of employees’ wages directly to the tax authority.
In Australia, the amount to <em>withhold</em> from a payment can be
determined by extrapolating the amount to an annual income,
computing the tax due, then dividing it back down to the pay period.</p>
<p>We can use the <code>Profunctor</code> instance to compute the amount to
withhold for different pay periods. Think of <code>dimap f g</code> as an
adapter that modifies that data flowing in (via <code>f</code>) and out (via
<code>g</code>) of the target computation.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>allTaxes <span class="ot">=</span> ausTax <span class="op">&lt;&gt;</span> medicareLevy (<span class="dt">Money</span> <span class="dv">23226</span>) <span class="op">&lt;&gt;</span> lito</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>weeklyWithholding      <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">52</span>) (<span class="op">$/</span> <span class="dv">52</span>) allTaxes</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>fortnightlyWithholding <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">26</span>) (<span class="op">$/</span> <span class="dv">26</span>) allTaxes</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>monthlyWithholding     <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">12</span>) (<span class="op">$/</span> <span class="dv">12</span>) allTaxes</span></code></pre></div>
<div class="note">
<p>The examples above are not correct when there are 53 weekly or 27
fortnightly payments in a financial year. Can you see how to define
the correct computation?</p>
<p>In the example I ignored some <strong>rounding</strong> rules. I also omitted
several other tax components. It is an example, not a complete
solution!</p>
</div>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>I hope you have enjoyed this tour of the <em>tax</em> library. Of course,
most real tax systems are much more complex than the handful of
examples in this article. But <em>tax</em> provides building blocks for
defining many kinds of taxes.</p>
<p>My <a href="https://github.com/frasertweedale/hs-tax-ato"><em>tax-ato</em></a> package builds upon <em>tax</em> to provide
types and behaviour for tax in Australia. In addition to the
kinds of taxes described in this article it also handles capital
gains tax, <a href="https://en.wikipedia.org/wiki/Dividend_imputation">franking credits</a>, student loan repayments,
deductions, and other concepts. I use it to predict and record my
own tax obligations. If you need to perform calculations related to
tax in Australia, you might find it useful too. It is definitely
not complete and comes with no guarantee of correctness.</p>
<p>One final note: oh how I wish Haskell would decouple numeric
literals from the <code>Num</code> and <code>Fractional</code> type classes. <code>Money</code>
cannot have instances of these type classes because like other
dimensional types, it is is not <a href="https://en.wikipedia.org/wiki/Closure_(mathematics)">closed</a> under multiplication and
division. As a consequence, we have to lift bare numeric values
into <code>Money</code> in several places. Separate type classes for numeric
literals would avoid this. (<code>IsIntegral</code> and <code>IsRational</code> might be
sensible names, following the pattern of <code>IsString</code> and <code>IsList</code>).
Ultimately this is a minor inconvenience, but does add friction to
using <em>dollaridoos</em>, <em>tax</em>, and programs that use these libraries.</p>]]></summary>
</entry>

</feed>
