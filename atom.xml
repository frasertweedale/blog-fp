<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>pureblog</title>
    <link href="https://frasertweedale.github.io/blog-fp/atom.xml" rel="self" />
    <link href="https://frasertweedale.github.io/blog-fp" />
    <id>https://frasertweedale.github.io/blog-fp/atom.xml</id>
    <author>
        <name>Fraser Tweedale</name>
        <email>frase@frase.id.au</email>
    </author>
    <updated>2021-07-26T00:00:00Z</updated>
    <entry>
    <title>Hakyll how-to: pages without source files</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-07-26-hakyll-without-sources.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-07-26-hakyll-without-sources.html</id>
    <published>2021-07-26T00:00:00Z</published>
    <updated>2021-07-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="hakyll-how-to-pages-without-source-files">Hakyll how-to: pages without source files</h1>
<p><a href="https://jaspervdj.be/hakyll/">Hakyll</a> is a static website builder. The typical use case is to take some files written in lightweight markup and compile them into static HTML. Besides the sources for the main content, there are also HTML templates, CSS, perhaps some JavaScript, images and so on.</p>
<p>But perhaps you need to build a site from sources other than local files. Possible scenarios include:</p>
<ul>
<li>Crawl and mirror another site</li>
<li>Generate and publish calendars files for a conference</li>
<li>Create a directory of content from some other source</li>
</ul>
<p>As a static site builder, Hakyll can be a good choice for publishing data that change infrequently. <span class="abstract">In this post I demonstrate how to use Hakyll to generate site content without any source files.</span></p>
<h2 id="use-case-web-key-directory">Use case: Web Key Directory <a href="#use-case-web-key-directory" class="section">§</a></h2>
<p>My use case was to generate a <a href="https://wiki.gnupg.org/WKD"><em>Web Key Directory (WKD)</em></a> for my personal OpenPGP keys. OpenPGP clients can use WKD for key discovery. WKD is an alternative to the older keyserver system, which <a href="https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f">has some problems</a>. It works as follows:</p>
<ol type="1">
<li><p>The client seeks a key for identity <code>Joe.Doe@example.org</code>.</p></li>
<li><p>Lower-case, digest (SHA-1) and <a href="https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt">z-base-32</a> encode the address local part (<code>Joe.Doe</code> → <code>iy9q119eutrkn8s1mk4r39qejnbu3n5q</code>).</p></li>
<li><p>The client performs HTTP GET request for:</p>
<pre><code>https://openpgpkey.example.org
  /.well-known/openpgpkey/example.org
  /hu/iy9q119eutrkn8s1mk4r39qejnbu3n5q?l=Joe.Doe</code></pre>
<p>This is called the <em>advanced method</em>.</p></li>
<li><p>The server responds with the binary encoding of the key (or a <code>404</code>).</p></li>
<li><p>As a fallback, the client tries:</p>
<pre><code>https://example.org
  /.well-known/openpgpkey
  /hu/iy9q119eutrkn8s1mk4r39qejnbu3n5q?l=Joe.Doe</code></pre>
<p>This is called the <em>direct method</em>.</p></li>
</ol>
<p>Observe that, up to case-sensitivity of the email local part, the server does not necessarily need to use the <code>?l=Joe.Doe</code> query parameter. If the local part is case-<strong><em>in</em></strong>sensitive (it usually is) then the digest, which is part of the URI path, is enough. Therefore an HTTP server serving static files can be a functional WKD server. You just need to build the directory.</p>
<div class="note">
<p>The <em>advanced method</em> has several advantages over the <em>direct method</em>. Users or organisations with multiple domains can maintain a single unified WKD, or delegate to an external service. The advanced method does not interfere with existing sites. On the down side, the <code>openpgpkey</code> DNS subdomain must be configured for each domain. The TLS requirement is hardly a disadvantage, because of <a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a>.</p>
</div>
<h2 id="building-a-web-key-directory-with-hakyll">Building a Web Key Directory with Hakyll <a href="#building-a-web-key-directory-with-hakyll" class="section">§</a></h2>
<h3 id="reading-keys-from-gnupg">Reading keys from GnuPG <a href="#reading-keys-from-gnupg" class="section">§</a></h3>
<p><a href="https://gnupg.org/">GnuPG</a> is my OpenPGP client. My Hakyll program invokes <code>gpg</code> to list and extract keys. Here are the types of the functions involved (I will not detail their implementations):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">KeyId</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Uid</span> <span class="ot">=</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="co">-- ^ local-part, domain</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">listKeys ::</span> <span class="dt">IO</span> (<span class="dt">L8.ByteString</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="ot">exportKey ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Uid</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">L8.ByteString</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="ot">hashLocalPart ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="ot">extractUserIds ::</span> <span class="dt">L8.ByteString</span> <span class="ot">-&gt;</span> [<span class="dt">Uid</span>]</span></code></pre></div>
<div class="note">
<p>I used the <a href="https://hackage.haskell.org/package/typed-process"><em>typed-process</em></a> package to execute GnuPG. The <code>--with-colons</code> option is helpful for inspecting keys and their user IDs. You can use an <code>--export-filter</code> to select the user ID(s) to export. The man pages and <a href="https://github.com/gpg/gnupg/blob/master/doc/DETAILS"><code>DETAILS</code></a> file contain all the information you need for programmatic interaction with GnuPG.</p>
</div>
<h3 id="creating-resources">Creating resources <a href="#creating-resources" class="section">§</a></h3>
<p>Hakyll sites use <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:match"><code>match</code></a> to generate compilation rules for local resources. For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>match <span class="st">&quot;posts/*.md&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  compile pandocCompiler</span></code></pre></div>
<p>But there are no local files to <code>match</code>. Instead, we use <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:create"><code>create</code></a> to declare new resources. These resources can be routed to like any other, but we must synthesise the content. The following function, given a key ID and an email address, exports the key from GnuPG and establishes the route.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">wkdUid ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Uid</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>wkdUid keyId uid<span class="op">@</span>(localPart, domain) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="kw">let</span> path <span class="ot">=</span> <span class="st">&quot;.well-known/openpgpkey/&quot;</span> <span class="op">&lt;&gt;</span> domain <span class="op">&lt;&gt;</span> <span class="st">&quot;/hu/&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>             <span class="op">&lt;&gt;</span> hashLocalPart localPart</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>  create [fromFilePath path] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    route <span class="op">$</span> idRoute</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    compile <span class="op">$</span> exportKey keyId uid</span></code></pre></div>
<p><code>create</code> is applied to a list of resource identifiers, and a <code>Rules ()</code> for compiling and routing the resource. I am not showing the implementation of <code>exportKey</code>; it’s enough to know that it uses <code>IO</code>. Hakyll provides <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Compiler.html#v:unsafeCompiler"><code class="sourceCode haskell"><span class="ot">unsafeCompiler ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> a</code></a> for executing I/O actions in compiler context.</p>
<p><code>wkdUid</code> creates the key resource for a single user ID. A key can have multiple user IDs. <code>wkUIDs on a specified KeydKey</code> creates the Hakyll <code>Rules ()</code> for all user IDs on a given key:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">wkdKey ::</span> <span class="dt">KeyId</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>wkdKey keyId <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  out <span class="ot">&lt;-</span> preprocess listKeys</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>  <span class="kw">let</span> uids <span class="ot">=</span> extractUserIds out</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>  traverse_ (wkdUid keyId) uids</span></code></pre></div>
<p><code class="sourceCode haskell"><span class="ot">preprocess ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">Rules</span> a</code> embeds an I/O action in the <code>Rules</code> context. Hakyll executes the action eagerly, unlike <code>unsafeCompiler</code> which is run on demand. This makes sense—we need to <code>listKeys</code> first to work out what resources to create.</p>
<p>Having extracted the user IDs, we <code>traverse_</code> them to create the WKD resources. We also use <code>traverse_</code> at the outmost layer of the program to invoke <code>wkdKey</code> for each key ID given on standard input:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>  keys <span class="ot">&lt;-</span> <span class="fu">words</span> <span class="op">&lt;$&gt;</span> <span class="fu">getContents</span> <span class="co">-- read stdin</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>  hakyll <span class="op">$</span> traverse_ wkdKey keys</span></code></pre></div>
<h2 id="how-hakyll-compiling-works">How Hakyll compiling works <a href="#how-hakyll-compiling-works" class="section">§</a></h2>
<p>Let’s dive a bit deeper into how compiling works. The <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Rules.html#v:compile"><code>compile</code></a> function adds a content compiler to the <code>Rules</code> for resources. It’s type is:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>compile</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="dt">Binary</span> a, <span class="dt">Typeable</span> a, <span class="dt">Writable</span> a)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="ot">=&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> a)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</span></code></pre></div>
<p>The compiler argument has to return an <code>Item a</code>, where <code>a</code> has several type class constraints. <code>Binary</code> and <code>Typeable</code> are used by Hakyll’s caching mechanism. <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Core-Writable.html#t:Writable"><code>Writable</code></a> is what Hakyll uses to write the compiled resource to the site output. There are several instances, including for <code>String</code>, <code>ByteString</code> (lazy and strict), and <code>Html</code>. Hakyll provides <code>makeItem :: a -&gt; Compiler (Item a)</code> for returning an <code>Item a</code>.</p>
<p>As an example, here is a compiler that executes a subprocess and returns the standard output:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>processCompiler</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">  ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">L.ByteString</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>processCompiler exe args <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>  (_status, out, _err) <span class="ot">&lt;-</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>    unsafeCompiler <span class="op">.</span> readProcess <span class="op">$</span> proc exe args</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>  makeItem out</span></code></pre></div>
<h2 id="conclusion">Conclusion <a href="#conclusion" class="section">§</a></h2>
<p>I have demonstrated how to use Hakyll to create content derived not from local files, but other sources (GnuPG in my case). Is this actually a good idea? For one-shot applications and data that don’t change frequently, I think it is fine. Hakyll takes care of all the filesystem I/O, relieving me of some tedium and avoiding a possible source of bugs.</p>
<p>For my WKD use case, I can rebuild the site when my keys have been updated, then <code>rsync</code> it to my web server. The program is well under 100 lines of code—including imports! Source code is <a href="https://github.com/frasertweedale/hakyll-wkd">available on GitHub</a> under AGPLv3. At time of writing I have not published it on Hackage.</p>
<div class="note">
<p>Because there are no local file dependencies for the resources, Hakyll does not know to recompile it. You have to <strong><code>rebuild</code></strong> every time. This may be a practical issue for some use cases, though not for mine.</p>
</div>
<p>In general, it would be useful to be able to specify arbitrary freshness checks for resources. Unfortunately Hakyll’s implementation does not readily admit such a feature. But it was straightforward to add <em>unconditional</em> rebuilding on a per-resource basis. I submitted a <a href="https://github.com/jaspervdj/hakyll/pull/857">pull request</a> to add the <code>forceCompile</code> helper function. Example usage:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">-- compile this resource every time</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>forceCompile <span class="op">$</span> create [<span class="st">&quot;foo&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  route <span class="op">$</span> idRoute</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  compile <span class="op">$</span> unsafeCompiler <span class="op">$</span> doStuff</span></code></pre></div>
<p>This feature was accepted and will appear in a future release of Hakyll.</p>]]></summary>
</entry>
<entry>
    <title>Generating abstracts for Hakyll articles</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-06-11-hakyll-abstracts.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-06-11-hakyll-abstracts.html</id>
    <published>2021-06-11T00:00:00Z</published>
    <updated>2021-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="generating-abstracts-for-hakyll-articles">Generating abstracts for Hakyll articles</h1>
<p>Suppose you have a list of recent posts and want to include an abstract for each one. Or maybe you want to include brief article summaries in metadata about your content. <span class="abstract">In this post I demonstrate several ways to declare or generate abstracts for content on your <a href="https://jaspervdj.be/hakyll/">Hakyll</a> site.</span></p>
<h2 id="objective">Objective <a href="#objective">§</a></h2>
<p>The goal is to include an <code>$abstract$</code> field in each article’s context. The field value should be a brief abstract or description of the article. What to actually <em>do</em> with the value is outside the scope of this post. But it is fair to include an example, so here’s how you could use it in a “recent posts” list:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  $for(posts)$</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="kw">&lt;li&gt;&lt;a</span><span class="ot"> href=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span>: $abstract$<span class="kw">&lt;/li&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  $endfor$</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">&lt;/ul&gt;</span></span></code></pre></div>
<p>I will discuss a more interesting use case in a future post.</p>
<h2 id="metadata">Metadata <a href="#metadata">§</a></h2>
<p>Hakyll processes optional metadata at the top of the article source. The format is YAML. Fields in the YAML map are available via <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Template-Context.html#v:metadataField"><code>metadataField</code></a>, which is also part of the <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Template-Context.html#v:defaultContext"><code>defaultContext</code></a>.</p>
<p>So you can define an abstract in the metadata, like so:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="pp">---</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="fu">tags</span><span class="kw">:</span><span class="at"> hakyll, pandoc</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="fu">abstract</span><span class="kw">: </span><span class="ch">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  In this post I demonstrate several ways to generate</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  abstracts for articles in your Hakyll site.</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="pp">---</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co"># Generating abstracts for Hakyll articles</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="at">…</span></span></code></pre></div>
<div class="note">
<p>Be careful of including HTML special characters (<code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>"</code>, <code>'</code>) in the metadata. These will <em>not</em> be escaped automatically, and could break the page. I avoid this pitfall by escaping all values that come from <code>metadataField</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>context <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>  mapContext escapeHtml metadataField </span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
</div>
<h2 id="markup">Markup <a href="#markup">§</a></h2>
<p>I don’t like repeating myself. If I were to use <code>metadataField</code>, the abstract I write would often be a repeat the article’s introduction or some part thereof. Wouldn’t it be nice if I could just indicate—<em>inline</em>—a portion of the article to use as the abstract? For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="fu"># Generating abstracts for Hakyll articles</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>Suppose you have … [In this post I demonstrate several</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>ways to generate abstracts for articles in your Hakyll</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>site.]{.abstract}</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>…</span></code></pre></div>
<p>The example above uses Pandoc’s <code>bracketed_spans</code> extension. You could achieve the same with explicit <code>&lt;span&gt;</code> tags. Other input formats may or may not provide a way to do it.</p>
<p>On the Hakyll side, we first need a function to locate a span with the <code>abstract</code> class in the <code>Pandoc</code> AST:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">abstract ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>abstract (<span class="dt">Pandoc</span> _ blocks) <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  removeFormatting <span class="op">&lt;$&gt;</span> findSpan blocks</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>  findSpan <span class="ot">=</span> <span class="fu">fmap</span> getFirst <span class="op">.</span> query <span class="op">$</span> \inl <span class="ot">-&gt;</span> <span class="kw">case</span> inl <span class="kw">of</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    <span class="dt">Span</span> (_id, cls, _attrs) inls</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="op">|</span> <span class="st">&quot;abstract&quot;</span> <span class="ot">`elem`</span> cls <span class="ot">-&gt;</span> <span class="dt">First</span> (<span class="dt">Just</span> inls)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    _                           <span class="ot">-&gt;</span> <span class="fu">mempty</span></span></code></pre></div>
<p>In the unlikely event that there are multiple spans with class <code>abstract</code>, the <code>First [Inline]</code> monoid keeps only the first. I strip all formatting via <a href="2021-01-11-hakyll-title-formatting.html#removeFormatting"><code>removeFormatting</code></a>, which I <a href="2021-01-11-hakyll-title-formatting.html#removeFormatting">described</a> in a previous post.</p>
<p>The next step is to update the compiler to save a snapshot of the abstract. <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM"><code>pandocCompilerWithTransformM</code></a> gives access to the <code>Pandoc</code> AST, and allows arbitrary <code>Compiler</code> actions including <code>saveSnapshot</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  compile <span class="op">$</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    pandocCompilerWithTransformM</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>      defaultHakyllReaderOptions</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>      defaultHakyllWriterOptions</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>      (\pandoc <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>        <span class="kw">let</span> render <span class="ot">=</span> <span class="fu">fmap</span> writePandoc <span class="op">.</span> makeItem</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>                     <span class="op">.</span> <span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        <span class="fu">maybe</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>            (<span class="fu">pure</span> ())</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>            (void <span class="op">.</span> (saveSnapshot <span class="st">&quot;abstract&quot;</span> <span class="op">&lt;=&lt;</span> render))</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>            (abstract pandoc)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>        <span class="fu">pure</span> pandoc</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>      )</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> context</span></code></pre></div>
<p>Finally we define a new kind of context field that can read snapshots:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>  loadSnapshotBody item snap</span></code></pre></div>
<p>and add the field to the context:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>context <span class="ot">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  snapshotField <span class="st">&quot;abstract&quot;</span> <span class="st">&quot;abstract&quot;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
<h2 id="autogeneration">Autogeneration <a href="#autogeneration">§</a></h2>
<p>Consider the following heuristic for autogenerating an abstract: Take the first paragraph that immediately precedes a heading; that is the abstract.</p>
<p>This is a very basic heuristic. But absent other data it’s probably better than nothing. So let’s implement it:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">abstract ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>abstract (<span class="dt">Pandoc</span> _ blocks) <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>  removeFormatting <span class="op">&lt;$&gt;</span> fallback</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>  fallback (<span class="dt">Para</span> inlines <span class="op">:</span> <span class="dt">Header</span> _ _ _ <span class="op">:</span> _) <span class="ot">=</span> <span class="dt">Just</span> inlines</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>  fallback (_h <span class="op">:</span> t) <span class="ot">=</span> fallback t</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>  fallback [] <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This version of <code>abstract</code> scans the list of block elements at the top level of the <code>Pandoc</code> AST. The first time it sees a <code>Para</code> preceding a <code>Header</code>, it returns the paragraph content.</p>
<h2 id="putting-it-all-together">Putting it all together <a href="#putting-it-all-together">§</a></h2>
<p>For my sites, I want to use all three methods described above. An abstract specified in the <em>metadata</em> is preferred. Explicit <em>markup</em> is my second preference and the <em>autogeneration</em> heuristic is a last resort. This will provide a good user experience for me. With a tiny bit of markup I can avoid repeating myself most of the time. But if it is warranted, I can use the metadata to write something different. Sometimes I’ll get a fair result without doing anything.</p>
<p>Combining the two versions of <code>abstract</code> is left as an exercise for the reader (hint: <code>Control.Applicative.&lt;|&gt;</code>).</p>
<p>Take care when composing the context. The <code>metadataField</code> has to come before the <code>snapshotField</code> (if that’s the priority you want):</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">context ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>context <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  mapContext escapeHtml metadataField</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;abstract&quot;</span> <span class="st">&quot;abstract&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> …</span></code></pre></div>
<p>Now I have a nice way to generate abstracts for my articles. I will explore an interesting use case in an upcoming post.</p>]]></summary>
</entry>
<entry>
    <title>A combinator library for taxes</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-05-23-tax-combinators.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-05-23-tax-combinators.html</id>
    <published>2021-05-23T00:00:00Z</published>
    <updated>2021-05-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="a-combinator-library-for-taxes">A combinator library for taxes</h1>
<p>Doing your taxes is no fun. But functional programming can ease the pain. In this post I describe and demonstrate the Haskell <a href="https://hackage.haskell.org/package/tax"><em>tax</em></a> library, which provides data types and combinators for defining taxes.</p>
<h2 id="what-is-a-tax">What is a tax? <a href="#what-is-a-tax">§</a></h2>
<p>Wikipedia <a href="https://en.wikipedia.org/wiki/Tax">defines</a> a tax as <em>a compulsory financial charge or some other type of levy imposed on a taxpayer</em>. Most taxes have monetary “inputs and outputs” but other kinds of taxation exist, such as the <a href="https://en.wikipedia.org/wiki/Corv%C3%A9e#Modern_instances"><em>corvée</em></a>. Therefore <em>tax</em> defines a type that is abstracted over its inputs and outputs:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Tax</span> b a <span class="ot">=</span> <span class="dt">Tax</span> {<span class="ot"> getTax ::</span> b <span class="ot">-&gt;</span> a }</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Semigroup</span>, <span class="dt">Monoid</span>, <span class="dt">Functor</span>, <span class="dt">Profunctor</span>)</span></code></pre></div>
<p>The <code>Tax b a</code> type is a wrapper around the function type <code>(b -&gt; a)</code>. Although <code>(-&gt;)</code> has all the instances we need, I found it more ergonomic to define a new type that communicates the <em>intent</em> of the values. The <code>GeneralizedNewtypeDeriving</code> extension enables automatic derivation of the following type class instances:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> a <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Tax</span> b a)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">instance</span>    <span class="dt">Monoid</span> a <span class="ot">=&gt;</span>    <span class="dt">Monoid</span> (<span class="dt">Tax</span> b a)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Tax</span> b)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Profunctor</span> <span class="dt">Tax</span></span></code></pre></div>
<p>The <code>Semigroup</code> operation sums outputs. The <code>Monoid</code> identity is a 0% tax.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> getTax (flat <span class="fl">0.1</span> <span class="op">&lt;&gt;</span> flat <span class="fl">0.2</span> <span class="op">&lt;&gt;</span> <span class="fu">mempty</span>) (<span class="dt">Money</span> <span class="dv">10</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="op">$</span><span class="fl">3.0</span></span></code></pre></div>
<p>For convenience, <em>tax</em> exports a type synonym for taxes whose inputs and outputs are money (of the same type). The input is an amount subject to taxation (often income), and the output is the tax due:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">MoneyTax</span> a <span class="ot">=</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span></code></pre></div>
<p>The <a href="https://hackage.haskell.org/package/dollaridoos-0.1.0.0/docs/Data-Money.html#t:Money"><code>Money</code></a> type comes from the <a href="https://hackage.haskell.org/package/dollaridoos"><em>dollaridoos</em></a> package.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Money</span> a <span class="ot">=</span> <span class="dt">Money</span> a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p><code>Money</code> restricts the operations that can be performed by omitting a <code>Num</code> instance. Dedicated functions provide the operations that make sense for money, like <em>scalar</em> multiplication:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">($*) ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span>       a <span class="ot">-&gt;</span> <span class="dt">Money</span> a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">(*$) ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span>       a <span class="ot">-&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> <span class="dt">Money</span> a</span></code></pre></div>
<p><code>Money a</code> also has instances for <code>Semigroup</code> and <code>Monoid</code> when the wrapped type has an instance of <code>Num</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Money</span> a)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span>    <span class="dt">Monoid</span> (<span class="dt">Money</span> a)</span></code></pre></div>
<p>All types in <em>tax</em> are abstracted over the numeric representation. Different applications can have different requirements for precision. Users may want to use a type that carries additional context, such as a currency. Therefore <em>tax</em> lets the user choose the numeric representation to use.</p>
<h2 id="constructing-taxes">Constructing taxes <a href="#constructing-taxes">§</a></h2>
<p>The most basic taxes are <strong>lump</strong> sums, and <strong>flat</strong>-rate taxes:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">lump ::</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>lump <span class="ot">=</span> <span class="dt">Tax</span> <span class="op">.</span> <span class="fu">const</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="ot">flat ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>flat <span class="ot">=</span> <span class="dt">Tax</span> <span class="op">.</span> (<span class="op">*$</span>)</span></code></pre></div>
<p>Some other common taxation constructions include taxing the amount <strong>above</strong> some threshold at a flat rate, or taxing the <em>whole</em> amount at a flat rate when it exceeds the <strong>threshold</strong>. These functions have the same type signature (I’ll show the implementation later):</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>above, threshold</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span></code></pre></div>
<h2 id="combinators">Combinators <a href="#combinators">§</a></h2>
<p>More complex taxes can be built using a handful of <a href="https://wiki.haskell.org/Combinator_pattern"><em>combinators</em></a> (functions that assemble smaller components into more complicated structures). This section describes the combinators provided by the <em>tax</em> package.</p>
<p>Levy the <strong>lesser</strong> or <strong>greater</strong> of two taxes:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>lesserOf, greaterOf</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>lesserOf  t1 t2 <span class="ot">=</span> <span class="dt">Tax</span> (<span class="fu">min</span> <span class="op">&lt;$&gt;</span> getTax t1 <span class="op">&lt;*&gt;</span> getTax t2)</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>greaterOf t1 t2 <span class="ot">=</span> <span class="dt">Tax</span> (<span class="fu">max</span> <span class="op">&lt;$&gt;</span> getTax t1 <span class="op">&lt;*&gt;</span> getTax t2)</span></code></pre></div>
<p><strong>Limit</strong> the tax payable to a given amount:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="ot">limit ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>limit <span class="ot">=</span> lesserOf <span class="op">.</span> lump</span></code></pre></div>
<p>Whereas <code>above</code> and <code>threshold</code> use flat rates, <code>above'</code> and <code>threshold'</code> subject the taxable portion of the input to arbitrary <code>Tax</code> computations:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="ot">above&#39; ::</span> (<span class="dt">Num</span> b, <span class="dt">Ord</span> b)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>       <span class="ot">=&gt;</span> <span class="dt">Money</span> b <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> b) a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> b) a</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>above&#39; l <span class="ot">=</span> lmap (\x <span class="ot">-&gt;</span> <span class="fu">max</span> (x <span class="op">$-$</span> l) <span class="fu">mempty</span>)</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="ot">threshold&#39; ::</span> (<span class="dt">Ord</span> b, <span class="dt">Monoid</span> a) <span class="ot">=&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a <span class="ot">-&gt;</span> <span class="dt">Tax</span> b a</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a>threshold&#39; l tax <span class="ot">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>  <span class="dt">Tax</span> (\x <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="op">&gt;=</span> l <span class="kw">then</span> getTax tax x <span class="kw">else</span> <span class="fu">mempty</span>)</span></code></pre></div>
<p>In <code>above'</code>, note the use of <code>lmap</code> to reduce (via the <code>Money</code> subtraction function <code>($-$)</code>) the amount the tax is levied upon. This is the first usage of the <code>Profunctor</code> instance, but it will not be the last.</p>
<p>With <code>above'</code> and <code>threshold'</code> in hand, we now see that the implementations of <code>above</code> and <code>threshold</code> (which apply flat-rate taxes) are trivial:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>above, threshold</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>above     l <span class="ot">=</span> above&#39;     l <span class="op">.</span> flat</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>threshold l <span class="ot">=</span> threshold&#39; l <span class="op">.</span> flat</span></code></pre></div>
<p>In real world use, I have not (so far) used <code>above'</code> or <code>threshold'</code>; the flat rate variants sufficed. Nevertheless, for completeness <em>tax</em> exports the general variants.</p>
<h2 id="examples">Examples <a href="#examples">§</a></h2>
<h3 id="progressive-tax">Progressive tax <a href="#progressive-tax">§</a></h3>
<p>Many countries use <a href="https://en.wikipedia.org/wiki/Progressive_tax"><em>progressive taxes</em></a>, where different bands of income are taxed at increasing flat rates. For example, in Australia for the 2020–21 financial year the first $18,200 is tax free, with income between $18,200 and $45,000 taxed at 19%, then 32.5% up to $120,000, 37% up to $180,000, and 45% above $180,000.</p>
<p>Observe that the <code>Monoid</code> instance for <code>Tax</code> sums the outputs of constituent taxes applied to the same input. We can define a function that takes a list of thresholds and rates, and constructs a progressive tax:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">marginal ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>         <span class="ot">=&gt;</span> [(<span class="dt">Money</span> a, a)] <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>marginal <span class="ot">=</span> <span class="fu">foldMap</span> (<span class="fu">uncurry</span> above)</span></code></pre></div>
<p>Because of the accumulative behaviour, the rate for each band must be the <strong>difference</strong> to the previous band. The rate for the first band is implicitly the delta to 0%. The Australian regime can be expressed as:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">ausTax ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>ausTax <span class="ot">=</span> marginal</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  [ ( <span class="dt">Money</span> <span class="dv">18200</span>,  <span class="fl">0.19</span>  <span class="op">-</span> <span class="dv">0</span>     )</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>  , ( <span class="dt">Money</span> <span class="dv">45000</span>,  <span class="fl">0.325</span> <span class="op">-</span> <span class="fl">0.19</span>  )</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>  , ( <span class="dt">Money</span> <span class="dv">120000</span>, <span class="fl">0.37</span>  <span class="op">-</span> <span class="fl">0.325</span> )</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>  , ( <span class="dt">Money</span> <span class="dv">180000</span>, <span class="fl">0.45</span>  <span class="op">-</span> <span class="fl">0.37</span>  ) ]</span></code></pre></div>
<p>The <code>marginal</code> function is useful enough that the <em>tax</em> package provides it.</p>
<h3 id="shade-in">Shade in <a href="#shade-in">§</a></h3>
<p>Australia’s public health system is funded by the <em>Medicare Levy</em>. It is currently 2% of income, but people below a certain threshold are exempt (the threshold changes each year). The amount above the threshold is taxed at 10% until it reaches 2% of the input. This prevents a sudden jump in tax owed and eliminates a perverse incentive to earn less than the threshold (if your income is around that number). The Australian Taxation Office calls this construction a <em>shade in</em>.</p>
<p>Using the functions defined above and taking the lower shade in threshold as a parameter, this tax is an elegant one-liner:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>medicareLevy</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>  <span class="ot">=&gt;</span> <span class="dt">Money</span> a <span class="ot">-&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>medicareLevy l <span class="ot">=</span> lesserOf (above l <span class="fl">0.1</span>) (flat <span class="fl">0.02</span>)</span></code></pre></div>
<h3 id="tax-offsets">Tax offsets <a href="#tax-offsets">§</a></h3>
<p>A tax doesn’t have to result in an amount owed. Maybe your government will <em>give</em> you some money based on your income. Indeed Australia has some <em>tax offsets</em> that reduce the tax paid by people on lower incomes.</p>
<p>An example is the <em>Low Income Tax Offset</em>, which was previously defined as: <em>$445, reduced by 1.5c for every dollar earned over $37,000</em> (the current definition is more complex). We can implement it like so:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="ot">lito ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">Tax</span> (<span class="dt">Money</span> a) (<span class="dt">Money</span> a)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>lito <span class="ot">=</span> limit <span class="fu">mempty</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>  (lump (<span class="dt">Money</span> (<span class="op">-</span><span class="dv">445</span>)) <span class="op">&lt;&gt;</span> above (<span class="dt">Money</span> <span class="dv">37000</span>) <span class="fl">0.015</span>)</span></code></pre></div>
<p><code>limit mempty</code> ensures that the result does not exceed $0.</p>
<h3 id="withholding-tax">Withholding tax <a href="#withholding-tax">§</a></h3>
<p>Many jurisdictions collect income taxes by requiring employers to remit a portion of employees’ wages directly to the tax authority. In Australia, the amount to <em>withhold</em> from a payment can be determined by extrapolating the amount to an annual income, computing the tax due, then dividing it back down to the pay period.</p>
<p>We can use the <code>Profunctor</code> instance to compute the amount to withhold for different pay periods. Think of <code>dimap f g</code> as an adapter that modifies that data flowing in (via <code>f</code>) and out (via <code>g</code>) of the target computation.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>allTaxes <span class="ot">=</span> ausTax <span class="op">&lt;&gt;</span> medicareLevy (<span class="dt">Money</span> <span class="dv">23226</span>) <span class="op">&lt;&gt;</span> lito</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>weeklyWithholding      <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">52</span>) (<span class="op">$/</span> <span class="dv">52</span>) allTaxes</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>fortnightlyWithholding <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">26</span>) (<span class="op">$/</span> <span class="dv">26</span>) allTaxes</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>monthlyWithholding     <span class="ot">=</span> dimap (<span class="op">$*</span> <span class="dv">12</span>) (<span class="op">$/</span> <span class="dv">12</span>) allTaxes</span></code></pre></div>
<div class="note">
<p>The examples above are not correct when there are 53 weekly or 27 fortnightly payments in a financial year. Can you see how to define the correct computation?</p>
<p>In the example I ignored some <strong>rounding</strong> rules. I also omitted several other tax components. It is an example, not a complete solution!</p>
</div>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>I hope you have enjoyed this tour of the <em>tax</em> library. Of course, most real tax systems are much more complex than the handful of examples in this article. But <em>tax</em> provides building blocks for defining many kinds of taxes.</p>
<p>My <a href="https://github.com/frasertweedale/hs-tax-ato"><em>tax-ato</em></a> package builds upon <em>tax</em> to provide types and behaviour for tax in Australia. In addition to the kinds of taxes described in this article it also handles capital gains tax, <a href="https://en.wikipedia.org/wiki/Dividend_imputation">franking credits</a>, student loan repayments, deductions, and other concepts. I use it to predict and record my own tax obligations. If you need to perform calculations related to tax in Australia, you might find it useful too. It is definitely not complete and comes with no guarantee of correctness.</p>
<p>One final note: oh how I wish Haskell would decouple numeric literals from the <code>Num</code> and <code>Fractional</code> type classes. <code>Money</code> cannot have instances of these type classes because like other dimensional types, it is is not <a href="https://en.wikipedia.org/wiki/Closure_(mathematics)">closed</a> under multiplication and division. As a consequence, we have to lift bare numeric values into <code>Money</code> in several places. Separate type classes for numeric literals would avoid this. (<code>IsIntegral</code> and <code>IsRational</code> might be sensible names, following the pattern of <code>IsString</code> and <code>IsList</code>). Ultimately this is a minor inconvenience, but does add friction to using <em>dollaridoos</em>, <em>tax</em>, and programs that use these libraries.</p>]]></summary>
</entry>
<entry>
    <title>Type-guided development and garden paths</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-05-12-types-garden-path.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-05-12-types-garden-path.html</id>
    <published>2021-05-12T00:00:00Z</published>
    <updated>2021-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="type-guided-development-and-garden-paths">Type-guided development and garden paths</h1>
<p><em>“Types help you reason about effects”</em>, we declare. And they do! Except when they don’t. <em>“Just follow the types!”</em> we insist. But sometimes the types take you down a garden path.</p>
<p>When the type checker is happy but the behaviour is all wrong, it can be hard to find where you took the wrong turn. In this post I’ll share real-world examples of this phenomenon, and offer some tips on how to avoid it.</p>
<h2 id="random-generation-of-applicatives">Random generation of applicatives <a href="#random-generation-of-applicatives">§</a></h2>
<p>The <code>Applicative</code> type class provides a function for lifting a “pure” value into the applicative data type:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Applicative</span> (<span class="ot">k ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">  pure ::</span> a <span class="ot">-&gt;</span> k a</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ot">  (&lt;*&gt;) ::</span> k (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> k a <span class="ot">-&gt;</span> k b</span></code></pre></div>
<p>Assume we have a random generator of values of type <code>a</code>, and wish to generate random applicatives. The shape of this problem is:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">genAp ::</span> (<span class="dt">Applicative</span> t) <span class="ot">=&gt;</span> <span class="dt">Gen</span> a <span class="ot">-&gt;</span> <span class="dt">Gen</span> (t a)</span></code></pre></div>
<p>We can generalise <code>Gen</code> to any effect <code>f</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">effAp ::</span> (<span class="dt">Applicative</span> t) <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> f (t a)</span></code></pre></div>
<p>How can implement this? <em>Follow the types!</em> <code>t</code> has an <code>Applicative</code> instance, so if we introduce a <code>Functor</code> constraint on <code>f</code> we can write:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">effAp ::</span> (<span class="dt">Functor</span> f, <span class="dt">Applicative</span> t) <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> f (t a)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>effAp <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">pure</span></span></code></pre></div>
<p>Now we have a nice, general function that runs an effect and lifts the result into an applicative. Let’s test it by generating single-value lists of <code>Word8</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> [<span class="dt">Word8</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>[<span class="dv">120</span>]</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> [<span class="dt">Word8</span>]</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>[<span class="dv">33</span>]</span></code></pre></div>
<p>OK! Now let’s use it for the following vector type:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">V3</span> a <span class="ot">=</span> <span class="dt">V3</span> a a a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">-- boring</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">V3</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">V3</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Foldable</span> <span class="dt">V3</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">V3</span></span></code></pre></div>
<div class="note">
<p>This type is similar to <a href="https://hackage.haskell.org/package/linear-1.21.5/docs/Linear-V3.html#t:V3"><code>Linear.V3.V3</code></a> from <a href="https://hackage.haskell.org/package/linear"><em>linear</em></a>, a popular linear algebra package.</p>
</div>
<p>The random <code>V3</code> values generated are:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> (<span class="dt">V3</span> <span class="dt">Word8</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="dt">V3</span> <span class="dv">186</span> <span class="dv">186</span> <span class="dv">186</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> effAp<span class="ot"> randomIO ::</span> <span class="dt">IO</span> (<span class="dt">V3</span> <span class="dt">Word8</span>)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="dt">V3</span> <span class="dv">215</span> <span class="dv">215</span> <span class="dv">215</span></span></code></pre></div>
<p>Oh dear. We followed the types to implement <code>effAp</code>, but the implementation is not correct! Instead of running the effect 3 times to generate 3 random vector components, it ran the effect once and used the result 3 times.</p>
<p><code>effAp</code> should first lift the <em>effect</em> into the applicative type using <code>pure</code>, giving a value of the type <code>(Applicative t) =&gt; t (f a)</code>. The shape of the hole is now <code>t (f a) -&gt; f (t a)</code>. That is exactly the shape of <code>sequenceA</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">sequenceA</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="ot">=&gt;</span> t (f a) <span class="ot">-&gt;</span> f (t a)</span></code></pre></div>
<p>Accepting the tighter constraints, the implementation of <code>effAp</code> becomes:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>effAp</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f, <span class="dt">Applicative</span> t)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> f (t a)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>effAp <span class="ot">=</span> <span class="fu">sequenceA</span> <span class="op">.</span> <span class="fu">pure</span></span></code></pre></div>
<p>Now <code>effAp</code> has the expected behaviour:</p>
<pre><code>λ&gt; effAp randomIO :: IO (V3 Word8)
V3 251 198 213</code></pre>
<div class="note">
<p><code>V3</code> is one of many types for which <code>fmap pure</code> and <code>sequenceA . pure</code> behave differently. Other examples include <a href="https://hackage.haskell.org/package/bifunctors-5.5.11/docs/Data-Bifunctor-Join.html#t:Join"><code>Join (,)</code></a> and <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Proxy.html#t:Proxy"><code>Proxy</code></a>.</p>
</div>
<h2 id="composing-effects-by-ignoring-them">Composing effects (by ignoring them) <a href="#composing-effects-by-ignoring-them">§</a></h2>
<p>In <a href="https://github.com/purebred-mua/purebred">Purebred</a> we have an input validation system that checks inputs as the user types. It dispatches the validation work to a background thread, so the UI stays responsive. Each time the user edits the input, the program kills the outstanding validation thread (if any) and spawns a new one. The program code (simplified for this article) is:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>dispatchValidation <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>  <span class="kw">let</span> spawn <span class="ot">=</span> forkIO doValidation</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>  oldId <span class="ot">&lt;-</span> getValidationThread</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>  newId <span class="ot">&lt;-</span> <span class="fu">maybe</span> spawn (killThread <span class="op">$&gt;</span> spawn) oldId</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>  _ <span class="ot">&lt;-</span> setValidationThread (<span class="dt">Just</span> newId)</span></code></pre></div>
<p>The outstanding validation thread is stored in a <code>Maybe ThreadId</code>. In the <code>Just</code> case the program kills the old thread, spawns a new thread and returns the new <code>ThreadId</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>(killThread <span class="op">$&gt;</span> spawn)<span class="ot"> ::</span> <span class="dt">ThreadId</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ThreadId</span></span></code></pre></div>
<p>Except, it does not. At a glance, we see the actions occurring in the correct order. But there was a bug. Input validation had unexpected and nondeterministic results. For example, a valid input might (or might not) result in an error being shown.</p>
<p>We can apprehend the error by equational reasoning:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>  killThread <span class="op">$&gt;</span> spawn</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="ot">=</span> <span class="fu">const</span> spawn <span class="op">&lt;$&gt;</span> killThread       <span class="co">-- definition of ($&gt;)</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a><span class="ot">=</span> <span class="fu">const</span> spawn <span class="op">.</span> killThread         <span class="co">-- fmap for ((-&gt;) r)</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> <span class="fu">const</span> spawn (killThread x) <span class="co">-- definition of (.)</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> spawn                      <span class="co">-- definition of const</span></span></code></pre></div>
<p>The expression discards the old <code>ThreadId</code> and never executes <code>killThread</code>. As a consequence, validation threads run wild, finishing their work in a nondeterminstic order.</p>
<p>When we finally understood the problem, <a href="https://github.com/purebred-mua/purebred/pull/413/commits/4eefd939d4bb201c37e5fe2956e8777e85a6b930">the fix</a> was straightforward. We replaced the expression:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a>killThread <span class="op">$&gt;</span> spawn  <span class="co">-- broken</span></span></code></pre></div>
<p>with:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>\t <span class="ot">-&gt;</span> killThread t <span class="op">*&gt;</span> spawn  <span class="co">-- fixed</span></span></code></pre></div>
<h2 id="lessons-learned">Lessons learned <a href="#lessons-learned">§</a></h2>
<p>I discussed two bugs where the type checker was happy and the code seemed <em>superficially</em> reasonable. Both had implementations guided by “type tetris” (<em>what fits here?</em>) that turned out to be fundamentally wrong. What strategies can help avoid such traps?</p>
<p>The first bug involved use of the wrong abstraction; <code>Functor</code> instead of <code>Applicative</code>. Making an effort to test generic functions with a greater diversity of instances might have helped discover this bug sooner. In the case of applicatives, don’t just test with <code>[]</code>, <code>Maybe</code> and other “common” types where <code>pure</code> constructs a “singleton” value. Test with <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Proxy.html#t:Proxy"><code>Proxy a</code></a> (which has zero <code>a</code> values), <a href="https://hackage.haskell.org/package/bifunctors-5.5.11/docs/Data-Bifunctor-Join.html#t:Join"><code>Join (,) a</code></a> (two <code>a</code> values), and so on.</p>
<p>As for the second bug, my advice is don’t try to be clever when writing effectful code. <code>do</code> notation and explicit binds are fine. Using underscore binds to ignore values may result in more readable code than <code>const</code> and related functions. If you have a hole with a function type, start by writing the lambda, and work step by step to complete the definition. Make sure it’s correct first, and only then tidy it up (if you want to).</p>
<p>In the case of the Purebred bug, we had a hole with the type <code>ThreadId -&gt; IO ThreadId</code>, and filled it with an expression that <strong>subtly</strong> ignored the <code>ThreadId</code> argument. Our next step, when faced with this hole, should have been to write the expression <code>(\threadId -&gt; _)</code>. Critically, this binds the <code>ThreadId</code> argument, making it hard to ignore.</p>
<p>The final takeaway is: don’t be smug about the power of the type system. Type-guided development is indeed wonderful and powerful, but let’s be honest that in many cases, reasoning from the types alone won’t get you all the way to a correct solution. On the contrary, you may find yourself at the end of a garden path!</p>]]></summary>
</entry>
<entry>
    <title>Purebred plugin system: implementation</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-03-30-purebred-plugins-implementation.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-03-30-purebred-plugins-implementation.html</id>
    <published>2021-03-30T00:00:00Z</published>
    <updated>2021-03-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="purebred-plugin-system-implementation">Purebred plugin system: implementation</h1>
<p>I previously wrote about a <a href="2021-02-02-plugin-system-prototype.html">prototype plugin system</a> for <a href="https://github.com/purebred-mua/purebred">Purebred</a>. In this post I discuss some improvements to the design, and report on the implementation progress.</p>
<h2 id="recap">Recap <a href="#recap">§</a></h2>
<p>The requirements for the plugin system were:</p>
<ul>
<li><p>Plugin types must express the <strong>capabilities</strong> they use, to help users understand what the plugin can and cannot do.</p></li>
<li><p>Diverse plugins must <strong>compose</strong> together, even when they use different capabilities.</p></li>
<li><p>Plugin function types must use <strong>abstract</strong> constraints, not concrete types, so the application can evolve without breaking plugins.</p></li>
<li><p>Types should be <strong>human friendly</strong>.</p></li>
<li><p>It must be possible to <strong>configure</strong> plugins, if required.</p></li>
</ul>
<p>The prototype design satisfied these requirements, with some caveats. The biggest deficiencies were that the plugin’s type does not reveal which hook(s) the plugin uses, and the plugin’s type expresses the <em>union</em> of capabilities needed by all its hook functions. There was no way for a plugin to say, for example, that it uses <code>CanIO</code> for one hook, and <code>CanRWState</code> for some other hook.</p>
<h2 id="plugin-record-type-improvements">Plugin record type improvements <a href="#plugin-record-type-improvements">§</a></h2>
<p>Recall the <code>Plugin</code> record type from the previous article:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="dt">Plugin</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  {<span class="ot"> pluginName ::</span> <span class="dt">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  ,<span class="ot"> pluginHook ::</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p><code>ctx</code> is the capability, for example <code>CanIO</code>. The many hooks in a real application would appear as additional fields in this record type. One consequence of this design is that the capability of the plugin as a whole must be the union of capabilities actually required by the plugin’s hook functions.</p>
<p>It also means that there is no way for the application to offer limited capabliities to some hooks. Put another way, all capabilities are available to all hooks. This does not reflect the needs of real applications; they may need to restrict which capabilities are available in different hooks.</p>
<p>The plugin system implemented in Purebred improves on the prototype design. We define the plugin record type, now called <code>PluginDict</code>, as follows:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PluginDict</span> <span class="ot">=</span> <span class="dt">PluginDict</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>  {<span class="ot"> _pluginName ::</span> <span class="dt">String</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  ,<span class="ot"> _pluginVersion ::</span> <span class="dt">Version</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  ,<span class="ot"> _pluginBuiltIn ::</span> <span class="dt">Bool</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  ,<span class="ot"> _configHook ::</span> <span class="dt">ConfigHook</span> <span class="dt">CanIO</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  ,<span class="ot"> _preSendHook ::</span> <span class="dt">PreSendHook</span> <span class="dt">Unconstrained</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  }</span></code></pre></div>
<p>The <code>ctx</code> type parameter is gone. Instead, each hook function field specifies the capabilities available to that hook.</p>
<p>Each hook function is no longer a bare function but is wrapped in a <code>newtype</code>. This (I feel) improves readability. It allows lenses to be defined, without resorting the GHC’s currently-flaky support for impredicative types. Use of optics is also why the field accessors, which are not exported, are prefixed with <code>_</code>.</p>
<p>As an example of a hook type, here is the definition of <code>PreSendHook</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">PreSendHook</span> cap <span class="ot">=</span> <span class="dt">PreSendHook</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  { getPreSendHook</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="ot">      ::</span> <span class="kw">forall</span> m<span class="op">.</span> (cap m) <span class="ot">=&gt;</span> <span class="dt">MIMEMessage</span> <span class="ot">-&gt;</span> m <span class="dt">MIMEMessage</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p>Finally, I added a field to store the plugin version, and a boolean to distinguish between built-in and external plugins. We (the Purebred authors) intend to use the plugin system to provide some baseline functionality. But we do not want to treat these behaviours as plugins from the user’s point of view. The <code>_pluginBuiltIn</code> field lets us discriminate.</p>
<h2 id="public-plugin-type-improvements">Public plugin type improvements <a href="#public-plugin-type-improvements">§</a></h2>
<p>Plugin modules no longer export a plugin record value (what we now call <code>PluginDict</code>). The <code>Plugin</code> type lives on, in a different form:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Plugin</span> hooks <span class="ot">=</span> <span class="dt">Plugin</span> <span class="dt">String</span> <span class="dt">Version</span> hooks</span></code></pre></div>
<p>A <code>Plugin</code> value has a name, version, and <code>hooks</code>. What is <code>hooks</code>? It is best understood in the context of the <code>usePlugin</code> function. Like the <code>relax</code> function from the prototype, <code>usePlugin</code> monomorphises plugins and prepares them for use in the main program.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">usePlugin ::</span> (<span class="dt">Hook</span> hooks) <span class="ot">=&gt;</span> <span class="dt">Plugin</span> hooks <span class="ot">-&gt;</span> <span class="dt">PluginDict</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>usePlugin (<span class="dt">Plugin</span> name ver hook) <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  setHook hook <span class="op">$</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    <span class="dt">PluginDict</span> name ver <span class="dt">False</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>      (<span class="dt">ConfigHook</span> <span class="fu">pure</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>      (<span class="dt">PreSendHook</span> <span class="fu">pure</span>)</span></code></pre></div>
<p><code>usePlugin</code> constructs a <code>PluginDict</code> full of <em>no-op</em> hooks, then sets the plugin’s hooks via the <code>setHook</code> function. <code>hooks</code> must have an instance of the <code>Hook</code> type class:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Hook</span> t <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">  setHook ::</span> t <span class="ot">-&gt;</span> <span class="dt">PluginDict</span> <span class="ot">-&gt;</span> <span class="dt">PluginDict</span></span></code></pre></div>
<p>Each hook function type has an instance of <code>Hook</code>. These instances set the hook function in the <code>PluginDict</code>. A quantified constraint ensures the capabilities demanded by the hook function do not exceed the capabilities offered. Here, as an example, is the instance for <code>PreSendHook</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">instance</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>   (<span class="kw">forall</span> m<span class="op">.</span> <span class="dt">Unconstrained</span> m <span class="ot">=&gt;</span> cap m)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="ot">=&gt;</span> <span class="dt">Hook</span> (<span class="dt">PreSendHook</span> cap) <span class="kw">where</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>  setHook (<span class="dt">PreSendHook</span> f) <span class="ot">=</span> set preSendHook (<span class="dt">PreSendHook</span> f)</span></code></pre></div>
<p>This is another reason why it was necessary to <code>newtype</code> all the hook functions.</p>
<p>To support plugins that use multiple hooks, we declare an instance of <code>Hook</code> for pairs (2-tuples). This allows plugins to define as many hooks as they need, using nested tuples:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">Hook</span> h1, <span class="dt">Hook</span> h2) <span class="ot">=&gt;</span> <span class="dt">Hook</span> (h1, h2) <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>  setHook (h1, h2) <span class="ot">=</span> setHook h1 <span class="op">.</span> setHook h2</span></code></pre></div>
<h2 id="implementing-plugins">Implementing plugins <a href="#implementing-plugins">§</a></h2>
<p>Plugins construct and export a <code>Plugin hook</code> value, where <code>hook</code> is a hook function type or a nested tuple of the same.</p>
<div class="note">
<p>If a plugin defines the same hook multiple times, <code>usePlugin</code> discards all but the “leftmost” occurrence.</p>
</div>
<p>Here is the implementation of our <code>User-Agent</code> plugin:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Purebred.Plugin.UserAgent</span> (plugin) <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Lens</span> (set, view)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.MIME</span> (headerText)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Plugin</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Version</span> (version, userAgent)</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Types</span> (confCharset)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> (<span class="dt">PreSendHook</span> <span class="dt">CanReadConfig</span>)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;UserAgent&quot;</span> version (<span class="dt">PreSendHook</span> hook) <span class="kw">where</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>  hook msg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    charsets <span class="ot">&lt;-</span> view confCharsets</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>    <span class="kw">let</span> l <span class="ot">=</span> headerText charsets <span class="st">&quot;User-Agent&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>    <span class="fu">pure</span> <span class="op">$</span> set l (<span class="dt">Just</span> userAgent) msg</span></code></pre></div>
<p>The concrete type of a plugin shows the hook(s) used by the plugin, and the capabilities required by each hook. If a plugin needs to use multiple hooks, use nested pairs. In the example above, <code>plugin</code> uses the <code>PreSendHook</code> with the <code>CanReadConfig</code> capability. The type proves that the the <code>User-Agent</code> plugin only uses the <code>PreSendHook</code>, cannot perform I/O, and so on.</p>
<div class="note">
<p>We could define <code>Hook</code> instances for 3-tuples, 4-tuples, and so on. But I decided not to, because where does it end? Besides, I don’t think there will be many plugins that use more than two hooks.</p>
</div>
<p>The name of the plugin value (<code>plugin</code> in the preceding example) is not important. Plugin authors can use whatever name makes sense. Plugins that require configuration should export a function instead of a plain <code>Plugin</code> value, as in the following examples:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Purebred.Plugin.TweakConfig</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Plugin</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Version</span> (version)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred.Types</span> (<span class="dt">UserConfiguration</span>)</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>tweakConfig</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> <span class="dt">UserConfiguration</span>)</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Plugin</span> (<span class="dt">ConfigHook</span> <span class="dt">Pure</span>)</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>tweakConfig hook <span class="ot">=</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>  <span class="dt">Plugin</span> <span class="st">&quot;Purebred.Plugin.TweakConfig&quot;</span> version</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a>    (<span class="dt">ConfigHook</span> (<span class="fu">pure</span> <span class="op">.</span> hook))</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a>tweakConfigWithIO</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a><span class="ot">  ::</span> ( <span class="kw">forall</span> m<span class="op">.</span> (<span class="dt">CanIO</span> m) <span class="ot">=&gt;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a>       <span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> m <span class="dt">UserConfiguration</span> )</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Plugin</span> (<span class="dt">ConfigHook</span> <span class="dt">CanIO</span>)</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a>tweakConfigWithIO hook <span class="ot">=</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a>  <span class="dt">Plugin</span> <span class="st">&quot;Purebred.Plugin.TweakConfig (IO)&quot;</span> version</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>    (<span class="dt">ConfigHook</span> hook)</span></code></pre></div>
<p>The <code>TweakConfig</code> module provides two variants of a plugin to adjust Purebred’s configuration at startup. <code>tweakConfig</code> takes a pure transformation and yields a <code>Plugin (ConfigHook Pure)</code>, whereas <code>tweakConfigWithIO</code> allows the use of <code>IO</code>.</p>
<h2 id="using-plugins">Using plugins <a href="#using-plugins">§</a></h2>
<p>Users apply <code>usePlugin</code> to each plugin and produce a <code>[PluginDict]</code>. That list is then given as argument to the main Purebred entry point:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="ot">purebred ::</span> [<span class="dt">PluginDict</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p>The user configuration file, in a basic sense, is a program that constructs a list of plugins and applies <code>purebred</code> to it. Here is a cut-down version of my <code>~/.config/purebred/purebred.hs</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Purebred</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Purebred.Plugin.TweakConfig</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Purebred.Plugin.ICU</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>listKeybindings <span class="ot">=</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a>  [ <span class="co">{- my preferred keybindings -}</span> ]</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a>tweak <span class="ot">=</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a>    over (confIndexView <span class="op">.</span> ivBrowseThreadsKeybindings)</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true"></a>         (listKeybindings <span class="op">&lt;&gt;</span>)</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true"></a>  <span class="op">.</span> set (confNotmuch <span class="op">.</span> nmNewTag) <span class="st">&quot;inbox&quot;</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true"></a>main <span class="ot">=</span> purebred</span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true"></a>  [ usePlugin <span class="op">$</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true"></a>      Purebred.Plugin.TweakConfig.tweakConfig tweak</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true"></a>  , usePlugin</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true"></a>      Purebred.Plugin.ICU.plugin</span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>Some plugins have no configuration and just do their thing. But other plugins may require the user to construct a substantial configuration. A PGP/MIME plugin that uses GnuPG, though not written yet, seems likely to have a lot of knobs. Plugins that require configuration should offer ergonomic ways to construct sensible, safe configurations.</p>
<h3 id="built-in-plugins">Built-in plugins <a href="#built-in-plugins">§</a></h3>
<p><code>defaultConfig</code> is the default <code>UserConfiguration</code> value. It is not exported, but it can be modified by <code>ConfigHook</code>s. Built-in plugins are already set in the <code>confPlugins</code> field of <code>defaultConfig</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">defaultConfig ::</span> <span class="dt">UserConfiguration</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>defaultConfig <span class="ot">=</span> <span class="dt">Configuration</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  { _confPlugins <span class="ot">=</span> set pluginBuiltIn <span class="dt">True</span> <span class="op">&lt;$&gt;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>      [ usePlugin Purebred.Plugin.UserAgent.plugin</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>      …</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>      ]</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>  …</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>  }</span></code></pre></div>
<p><code>usePlugin</code> sets the <code>pluginBuiltIn</code> field to <code>False</code>. But we reset it to <code>True</code> for all built-in plugins. The <code>pluginBuiltIn</code> optic is not exported. Therefore users cannot change the treatment of a plugin from built-in to external, or vice versa.</p>
<p>The <code>purebred</code> entry point merges user-supplied plugins with the built-in plugins:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">purebred ::</span> [<span class="dt">PluginDict</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>purebred plugins <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  …</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    cfg <span class="ot">=</span> over confPlugins (plugins <span class="op">&lt;&gt;</span>) defaultConfig</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>    dyreParams <span class="ot">=</span> …</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>  Dyre.wrapMain dyreParams cfg</span></code></pre></div>
<h2 id="executing-plugins">Executing plugins <a href="#executing-plugins">§</a></h2>
<p>Purebred executes <code>ConfigHook</code>s immediately after Dyre (the configuration system) invokes the “real main” action (called <code>launch</code>):</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">launch ::</span> <span class="dt">UserConfiguration</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>launch inCfg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>    plugins <span class="ot">=</span> view confPlugins inCfg</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    hooks <span class="ot">=</span> getConfigHook <span class="op">.</span> view configHook <span class="op">&lt;$&gt;</span> plugins</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>  cfg <span class="ot">&lt;-</span> <span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> hooks inCfg</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>  …</span></code></pre></div>
<p><code>PreSendHook</code>s are executed in the action that sends mail:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>  <span class="kw">let</span> msg <span class="ot">=</span> …</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>  hooks <span class="ot">&lt;-</span> uses (asConfig <span class="op">.</span> confPlugins)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>           (<span class="fu">fmap</span> (getPreSendHook <span class="op">.</span> view preSendHook))</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>  cfg <span class="ot">&lt;-</span> use asConfig</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>  msg&#39; <span class="ot">&lt;-</span> runReaderT (<span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> hooks msg) cfg</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>  k (buildMessage msg&#39;)</span></code></pre></div>
<p>These two examples reveal a pattern for hook execution:</p>
<ol type="1">
<li><p>Extract the relevant hook functions from the <code>[PluginDict]</code></p></li>
<li><p>Use Kleisli composition <code>(&gt;=&gt;)</code> to fold the list into a single action.</p></li>
<li><p>Execute the composed action, using transformers if necessary.</p></li>
</ol>
<p>This pattern applies when the hook function type has the shape <code>a -&gt; m a</code>. So far, all the hook functions have that shape.</p>
<h2 id="hooks-in-purebred">Hooks in Purebred <a href="#hooks-in-purebred">§</a></h2>
<p>The hooks we have already implemented are:</p>
<ul>
<li><p><strong><code>ConfigHook</code></strong>: modify configuration at program startup.</p></li>
<li><p><strong><code>PreSendHook</code></strong>: modify or process a message immediately prior to sending. We currently use this hook, in a built-in plugin, to add a <code>User-Agent</code> header to outgoing messages. Can perform I/O. This is the hook that will be used to sign and/or encrypt outgoing mail. We will probably also add a capability to enable a plugin to abort sending.</p></li>
</ul>
<p>Hooks we haven’t implemented, but must, include (names subject to change):</p>
<ul>
<li><p><strong><code>DisplayHook</code></strong>: modify or process a message before displaying it. One use case is to perform decryption or verify signatures.</p></li>
<li><p><strong><code>PreEditHook</code></strong>: process a part before editing it. Together with <code>PostEditHook</code> this could be used to enable editing of headers along with text bodies.</p></li>
<li><p><strong><code>PostEditHook</code></strong>: process a message part after editing it.</p></li>
</ul>
<p>We have thought of some other hooks that seem useful, but haven’t yet committed to implementing:</p>
<ul>
<li><p><strong><code>CreateHook</code></strong>: modify a message immediately after creation (i.e. before editing). A proposed use is appending “signature” content.</p></li>
<li><p><strong><code>ReadHook</code></strong>: process raw message data when reading from disk. A plugin could use this to detect compressed files and inflate them. Another use case could be to attempt to “repair” corrupt or nonconformant messages.</p></li>
</ul>
<p>Purebred also needs an “address book” interface. We want plugins to be able to provide address book behaviour. But we haven’t designed it yet. It remains to be seen whether we will do it by way of hooks (as described in this post), or by updating the main configuration (via <code>ConfigHook</code>), or by some other means.</p>
<h2 id="discussion">Discussion <a href="#discussion">§</a></h2>
<p>Although I felt that the prototype design did satisfy the <em>capabilities</em> requirement, there were some deficiencies. I identified and discussed these in <a href="2021-02-02-plugin-system-prototype.html">the original article</a>. In particular, the <code>Plugin</code> type did not express which hooks the plugin uses, nor could a plugin acquire different capabilities for different hooks. The updated design eliminates these deficiencies.</p>
<p>Plugins now have a version field, and the internal representation also distinguishes between built-in and external plugins. We use this to hide built-ins when listing plugins in the <code>--version</code> output.</p>
<p>The problems of UI interaction, and how plugins can store and use plugin-specific state, remain unsolved.</p>
<p>There is also the question of hook execution order or priority. Hook functions process and potentially modify a datum of interest, such as a <code>Message</code> or a <code>ByteString</code>. Consider <code>ReadHook</code>, for processing messages as they’re read from disk, and its hypothetical counterpart <code>WriteHook</code>. A plugin for on-disk mail compression would use these hooks. When reading mail, decompression must precede other operations. When writing, compression should be the final step. The current implementation runs plugins hooks in the order they’re stored—external plugins first, then built-ins. So plugins that involve dual operations (compression, encryption) present inherent challenges. And there is no way to tame unwanted interactions between external and built-in plugins.</p>
<p>For now, the ordering problem is theoretical. I haven’t encountered it in practice, because few plugins have been implemented. So I’m not going to try to solve the problem prematurely. I have an idea that does not add much complexity and should be simple for users to understand. But I will save that discussion for a future post.</p>]]></summary>
</entry>
<entry>
    <title>How Dyre works with Cabal Nix-style builds</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-03-18-dyre-cabal-store.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-03-18-dyre-cabal-store.html</id>
    <published>2021-03-18T00:00:00Z</published>
    <updated>2021-03-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="how-dyre-works-with-cabal-nix-style-builds">How Dyre works with Cabal Nix-style builds</h1>
<p><a href="https://hackage.haskell.org/package/dyre">Dyre</a> is a tool for Haskell program configuration by (re)compilation. In <a href="2021-02-21-dyre-0.9-rc.html">my previous post</a> I discussed the changes planned for the Dyre 0.9 release. That release happened a couple of days ago… but I soon discovered a critical bug in Dyre’s support for <em>cabal-install</em> Nix-style local builds.</p>
<p>I have now <a href="https://github.com/willdonnelly/dyre/commit/414d961222b5b864933f35f0a0d74b1a2f501a23">fixed the bug</a> and <a href="https://hackage.haskell.org/package/dyre-0.9.1">released v0.9.1</a>. As a result of the experience I decided to write this post about how Nix-style local builds work, and how Dyre works with programs built and installed that way.</p>
<h2 id="ghc-and-package-databases">GHC and package databases <a href="#ghc-and-package-databases">§</a></h2>
<p>Haskell packages are installed in <em>package databases</em>. The package database contains libraries’ object code and Haskell interface (<code>*.hi</code>) files, as well as package descriptions and references to the library’s dependencies. When compiling and linking a program or library, GHC looks for dependencies in the configured package database(s).</p>
<p>By default, GHC knows about two package databases. The <em>global package database</em> is where <em>base</em> and the other libraries bundled with GHC are installed. The database location is tied to the GHC release; for example: <code>/usr/lib64/ghc-8.8.4/package.conf.d</code>. On most operating systems, the system package manager will install Haskell libraries in the global package database.</p>
<p>GHC also knows about <em>user package databases</em>. On Unix systems these are located at <code>~/.ghc/ARCH-OS-GHCVER/package.conf.d</code>. As the name and location suggests, unprivileged users can install packages to their user package database. GHC will also search for dependencies in there, unless told otherwise.</p>
<p><em>cabal-install</em> (the <code>cabal</code> program) and the system package manager take care of these package databases. Users don’t normally need to look into or modify them. For the curious (or cursed), you can use the <code>ghc-pkg</code> program to inspect and modify package databases. For example, here’s how to list the contents of the global package database:</p>
<pre class="shell"><code>% ghc-pkg --global list
/usr/lib64/ghc-8.8.4/package.conf.d
    Cabal-3.0.1.0
    Glob-0.10.0
    HTTP-4000.3.14
    HsYAML-0.2.1.0
    HsYAML-aeson-0.2.0.0
    … (many more)</code></pre>
<p>Let’s have a look at one of the records in the global package database:</p>
<pre><code>% cat /usr/lib64/ghc-8.8.4/package.conf.d/mtl-2.2.2.conf
name:                 mtl
version:              2.2.2
visibility:           public
id:                   mtl-2.2.2
key:                  mtl-2.2.2
license:              BSD-3-Clause
maintainer:           Edward Kmett &lt;ekmett@gmail.com&gt;
author:               Andy Gill
homepage:             http://github.com/haskell/mtl
synopsis:             Monad classes, using functional dependencies
description:
    … (elided)
category:             Control
abi:                  7208c11cc6615ddff9d903a90a9878f8
exposed:              True
exposed-modules:
    … (elided)
import-dirs:          /usr/lib64/ghc-8.8.4/mtl-2.2.2
library-dirs:         /usr/lib64/ghc-8.8.4/mtl-2.2.2
dynamic-library-dirs: /usr/lib64
data-dir:             /usr/share/x86_64-linux-ghc-8.8.4/mtl-2.2.2
hs-libraries:         HSmtl-2.2.2
depends:              base-4.13.0.0 transformers-0.5.6.2
haddock-interfaces:   /usr/share/doc/ghc/html/libraries/mtl-2.2.2/mtl.haddock
haddock-html:         /usr/share/doc/ghc/html/libraries/mtl-2.2.2</code></pre>
<p>Most fields are self explanatory, but some need a little explanation:</p>
<ul>
<li><p><strong><code>id</code></strong> is the <em>unit ID</em> that uniquely identifies the package. In the example above it includes the package <code>name</code> and <code>version</code>; a unit ID can also include other identifying data.</p></li>
<li><p><strong><code>depends</code></strong> lists the direct dependencies of this package, as unit IDs.</p></li>
<li><p><strong><code>exposed</code></strong> controls whether the modules in the package are available to import during compilation. This is just the default. GHC command line options and <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/packages.html#package-environments"><em>package environment files</em></a> can alter package visibility.</p></li>
</ul>
<p>For more details see the <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/packages.html"><em>Packages</em> chapter</a> of the GHC User’s Guide.</p>
<h2 id="cabal-install-and-package-databases"><em>cabal-install</em> and package databases <a href="#cabal-install-and-package-databases">§</a></h2>
<p>In earlier times, the <em>cabal-install</em> build tool would install all dependencies of a package into the global or user package database. But when you have multiple packages with conflicting dependencies, this approach does not work. It also makes updating packages very risky. Updating one package (because some dependent program or library requires a newer version) would often break other installed dependent packages.</p>
<p><em>cabal-install</em>’s first solution to this problem was <a href="https://cabal.readthedocs.io/en/3.2/installing-packages.html#developing-with-sandboxes">per-project sandboxes</a>. When using a sandbox, <em>cabal-install</em> installs dependencies (those that are not in the global or user package database) under <code>.cabal-sandbox/</code> in the project directory. Sandboxes are isolated from each other. This solved the main problem but introduced another. Many projects meant many sandboxes, wasting a lot of time and space as common dependencies got built over and over again, in different sandboxes.</p>
<p>Furthermore, users had to deliberately create sandboxes. The problematic behaviour (install to the user package database) was the default behaviour. You had to <em>know</em> about, and use, sandboxes to avoid trouble.</p>
<div class="note">
<p>Sandbox support was removed in <em>cabal-install</em> 3.4.</p>
</div>
<h2 id="nix-style-local-builds">Nix-style local builds <a href="#nix-style-local-builds">§</a></h2>
<p><em>cabal-install</em> since version 1.24 supports <a href="https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html"><em>Nix-style local builds</em></a>. It is the default behaviour (i.e. what <code>cabal build</code> does) since version 2.0. The feature is also called <em><code>v2-build</code></em> or <em><code>new-build</code></em></p>
<p>This build system caches dependencies in a package database at <code>~/.cabal/store/GHCVER/package.db</code>. I call this package database the <strong><em>Cabal store</em></strong>. The unit IDs of packages in the Cabal store include the name, version, and a digest (hash) of the entire package contents, which prevents collisions. For example, <code>ghc-pkg</code> can print the unit IDs of all the variants of <em>purebred-email</em> in my Cabal store. Note that there are multiple variants even of particular versions (some were development builds):</p>
<pre class="shell"><code>% ghc-pkg \
    --package-db ~/.cabal/store/ghc-8.8.4/package.db \
    field purebred-email id \
    | sort
id: purebred-email-0.4.2-904f4dca7fc38b0732875f3118229289f0a854a1b29ceb6f61952455fc536475
id: purebred-email-0.4.2-937f77fe675ce899d5b8bf4e451f09d83f458db59751e28d393dafa5d0e46e80
id: purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7
id: purebred-email-0.4.3-132e0f4a654056feced84d90a98b5cc3f8635b2a56e2821e5193cace1a73946d
id: purebred-email-0.5.0-04c8aceff5a68a6eb0537475f958dcb2aa763675c36a57893119534e690ebfe7
id: purebred-email-0.5.0-0a5c9f98d485c79e5bbbb3eefbc8239c4e5a74dc26d03fc0a12ce8a45a304c8d
id: purebred-email-0.5.0-4c9fa1b81ac8638346df176519fee11541953f243502699a8693f69fafc2293f
id: purebred-email-0.5.0-cc781fa90dc462076d5be322d38e59b76a1604cb866e8b6a15a150653e9f6595
id: purebred-email-0.5.0-e8d411ef4593a88bbd40293b523c03079a01138f9bb1278781a4eb5a15cf461f</code></pre>
<p>If we inspect the <code>depends</code> fields of one of these packages, we see a mix of unit IDs with and without hashes. The ones without hashes will be located in the global package database, and the ones with hashes are other packges in the Cabal store:</p>
<pre class="shell"><code>% ghc-pkg \
    --package-db ~/.cabal/store/ghc-8.8.4/package.db \
    --unit-id \
    field purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7 \
    depends
depends: attoparsec-0.13.2.4-6pdJvsCYDtQ1ZikLcQPH6i base-4.13.0.0
         base64-bytestring-1.0.0.3-6nNbupf0oNc9ekFOSwyfJw
         bytestring-0.10.10.1 case-insensitive-1.2.1.0-GK3nA3zBZszGkFybfKiPH
         concise-0.1.0.1-9e9a3f5d1a0cb55cc27d6ed4559347484ed0182db25d17f54fecc4cb16c664f3
         deepseq-1.4.4.0 lens-4.18.1-1Ci7u4sFw8083dvBI6HqCw
         semigroupoids-5.3.4-3QeAlkxMhKa1rjJSsIVWj7
         semigroups-0.19.1-LKdktuRRdRZ1yx9gBXzSbK
         stringsearch-0.3.6.6-ea9567d6b6c3d6f0b0229eaa65b28da6602e2135e50018657a4d1545dc4a0d0c
         text-1.2.4.0 time-1.9.3</code></pre>
<p>Object code filenames of libraries installed in the Cabal store incorporate the full unit ID:</p>
<pre class="shell"><code>% cd ~/.cabal/store/ghc-8.8.4/purebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7/lib
% ls
Data
libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7.a
libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7-ghc8.8.4.so</code></pre>
<p>To assist the dynamic linker, the <code>RUNPATH</code> attribute in dynamically linked executables and shared objects includes the subdirectories of the Cabal store where the needed shared objects are located:</p>
<pre class="shell"><code>% objdump -x libHSpurebred-email-0.4.3-12899342c54e9be6f8bfabf40ea03e13ba08a15da3d519a6ba6c16b5e8a2fdf7-ghc8.8.4.so \
    | grep RUNPATH \
    | awk &#39;{ print $2 }&#39; \
    | tr : &#39;\n&#39; \
    | sort
/home/ftweedal/.cabal/store/ghc-8.8.4/concise-0.1.0.1-9e9a3f5d1a0cb55cc27d6ed4559347484ed0182db25d17f54fecc4cb16c664f3/lib
/home/ftweedal/.cabal/store/ghc-8.8.4/stringsearch-0.3.6.6-ea9567d6b6c3d6f0b0229eaa65b28da6602e2135e50018657a4d1545dc4a0d0c/lib
/usr/lib64
/usr/lib64/ghc-8.8.4/rts</code></pre>
<p>Executables are installed in the Cabal store and referenced by a symbolic link installed in <code>~/.cabal/bin/</code> or a similar location.</p>
<pre class="shell"><code>% which purebred
~/.cabal/bin/purebred
% readlink ~/.cabal/bin/purebred
../store/ghc-8.8.4/purebred-0.1.0.0-ffa8d363a9788cf11f71e6dbad787526a4fa1f9f750969f4d55036610f5cb027/bin/purebred</code></pre>
<h2 id="dyre-and-the-cabal-store">Dyre and the Cabal store <a href="#dyre-and-the-cabal-store">§</a></h2>
<p>When using <em>cabal-install</em>, the details about the Cabal store are hidden from the user. But a Dyre-enabled program does not have the luxury of using <em>cabal-install</em> when (re)compiling a custom executable. We cannot assume that the <code>cabal</code> program is available. Even if we did make that assumption, using <em>cabal-install</em> would introduce <strong>a lot</strong> of additional complexity. And maintenance overhead, because <em>cabal-install</em>’s behaviour is continually evolving, whereas GHC’s command line interface is stable.</p>
<p>So Dyre invokes GHC directly. When a Dyre application’s main library is in the global or user package database, GHC finds it and all is well. But when the library is in the Cabal store, GHC cannot find it:</p>
<pre class="shell"><code>% purebred
Configuration &#39;/home/fraser/.config/purebred/purebred.hs&#39; changed. Recompiling.
Error occurred while loading configuration file.
purebred: 
/home/fraser/.config/purebred/purebred.hs:5:1: error:
    Could not find module ‘Purebred’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
5 | import Purebred
  | ^^^^^^^^^^^^^^^

CallStack (from HasCallStack):
  error, called at src/Purebred.hs:347:69 in purebred-0.1.0.0-95b0b0050ea0df258f6dce7f45c7c58630549c4395e1e143f3e0915c057e8cbc:Purebred</code></pre>
<p>To overcome this, Dyre needs to detect when the application library is installed in the Cabal store, and pass some additional command line options to GHC:</p>
<ul>
<li><p>The <code>-package-db &lt;FILE&gt;</code> option adds the package database at <code>FILE</code> to the list of databases GHC searches. Dyre uses this option to add the Cabal store.</p></li>
<li><p>The <code>-package-id &lt;UNIT-ID&gt;</code> option <em>exposes</em> the package identified by <code>UNIT-ID</code>, making its public modules available for import. Dyre uses this option to expose the main application library.</p></li>
</ul>
<p>In Dyre’s implementation, the <code>getCabalStoreGhcArgs</code> function computes these options. It is applied to a Dyre project name and a library path. If the library path is in the Cabal store <em>and</em> matches the project name, Dyre derives the appropriate <code>-package-db</code> and <code>-package-id</code> options.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">System.FilePath</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>  (joinPath, splitPath, dropTrailingPathSeparator)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="ot">getCabalStoreGhcArgs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>getCabalStoreGhcArgs proj <span class="ot">=</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>    mkArgs <span class="op">.</span> go <span class="op">.</span> <span class="fu">fmap</span> dropTrailingPathSeparator <span class="op">.</span> splitPath</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>  go (<span class="st">&quot;.cabal&quot;</span> <span class="op">:</span> <span class="st">&quot;store&quot;</span> <span class="op">:</span> hc <span class="op">:</span> pid <span class="op">:</span> _) <span class="ot">=</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>    <span class="kw">case</span> splitOn <span class="ch">&#39;-&#39;</span> pid <span class="kw">of</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>      [name, _version, _hash] <span class="op">|</span> name <span class="op">==</span> proj</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">Just</span> (pid, [<span class="st">&quot;.cabal&quot;</span>, <span class="st">&quot;store&quot;</span>, hc, <span class="st">&quot;package.db&quot;</span>])</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>      _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>  go (h <span class="op">:</span> t<span class="op">@</span>(_ <span class="op">:</span> _ <span class="op">:</span> _ <span class="op">:</span> _ <span class="op">:</span> _)) <span class="ot">=</span> <span class="fu">fmap</span> (h<span class="op">:</span>) <span class="op">&lt;$&gt;</span> go t</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>  go _ <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true"></a>  mkArgs <span class="dt">Nothing</span> <span class="ot">=</span> []</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true"></a>  mkArgs (<span class="dt">Just</span> (unitId, pkgDb)) <span class="ot">=</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true"></a>    [<span class="st">&quot;-package-db&quot;</span>, joinPath pkgDb, <span class="st">&quot;-package-id&quot;</span>, unitId]</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true"></a></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true"></a>  splitOn a l <span class="ot">=</span> <span class="kw">case</span> <span class="fu">span</span> (<span class="op">/=</span> a) l <span class="kw">of</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true"></a>    (h, []) <span class="ot">-&gt;</span> [h]</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true"></a>    (h, _ <span class="op">:</span> t) <span class="ot">-&gt;</span> h <span class="op">:</span> splitOn a t</span></code></pre></div>
<div class="note">
<p><em>cabal-install</em> lets you <a href="https://cabal.readthedocs.io/en/3.4/cabal-project.html?highlight=store-dir#cmdoption-store-dir">override the Cabal store directory</a>. Dyre assumes the default <code>~/.cabal/store/</code>. If the Cabal store is not in the expected place, the detection logic fails.</p>
</div>
<p>The final piece of the puzzle is how Dyre learns the application’s library directory that will be the <code>FilePath</code> argument to <code>getCabalStoreGhcArgs</code>. Dyre itself is just a library. We rely on the main program to tell Dyre where its library is located. The only alternative I know of is brittle, operating system-specific hacks.</p>
<p>Cabal packages can make use of an auto-generated <a href="https://cabal.readthedocs.io/en/3.4/cabal-package.html#accessing-data-files-from-package-code"><code>Paths_&lt;pkgname&gt;</code> module</a>. It provides <code>IO</code> actions that return the installation paths of the package (object files, binaries, data and so on), including:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">getLibDir ::</span> <span class="dt">IO</span> <span class="dt">FilePath</span></span></code></pre></div>
<p>Dyre applications can read this value and pass it to Dyre via the <a href="https://hackage.haskell.org/package/dyre-0.9.1/docs/Config-Dyre.html#v:includeDirs"><code>includeDirs</code></a> field in the <code>Params</code> object. Here is a simplified example:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">MyApp</span> <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Config.Dyre</span> <span class="kw">as</span> <span class="dt">Dyre</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Paths_myapp</span> (getLibDir)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Configuration</span> <span class="ot">=</span> …</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="ot">defaultConfig ::</span> <span class="dt">Configuration</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>defaultConfig <span class="ot">=</span> …</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a><span class="ot">realMain ::</span> <span class="dt">Configuration</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a>realMain <span class="ot">=</span> …</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true"></a>  libdir <span class="ot">&lt;-</span> getLibDir</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true"></a>  <span class="kw">let</span> params <span class="ot">=</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true"></a>        ( Dyre.newParams <span class="st">&quot;myapp&quot;</span> realMain (<span class="fu">const</span> <span class="fu">error</span>) )</span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true"></a>        { Dyre.includeDirs <span class="ot">=</span> [libdir] }</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true"></a>  Dyre.wrapMain params defaultConfig</span></code></pre></div>
<div class="note">
<p>For Cabal store detection to work, the Dyre project name (<code>myapp</code> in the example above), <strong>must</strong> be the same as the library package name. Otherwise <code>getCabalStoreGhcArgs</code> will fail to detect the package ID to expose.</p>
</div>
<p>With this small additional behaviour in place, Dyre detects that the library is in a Cabal store and passes the extra CLI options to GHC. GHC finds the library and compiles the program successfully:</p>
<pre class="shell"><code>% purebred
Configuration &#39;/home/fraser/.config/purebred/purebred.hs&#39; changed.
Recompiling.
Program reconfiguration successful.
Launching custom binary /home/fraser/.cache/purebred/purebred-linux-x86_64
… (realMain executes)</code></pre>
<h2 id="discussion">Discussion <a href="#discussion">§</a></h2>
<p>It is unfortunate that the author of a Dyre application must do extra work to enable it to work with the Cabal store. Even though it is a small effort, it is something most programs will want to do. I have so far been unable to conceive a robust solution that avoids this work.</p>
<p>Dyre pre-0.9 did not have this feature. To enable <a href="https://github.com/purebred-mua/purebred">Purebred</a> to work with the Cabal store, we performed the detection and constructed the extra GHC options ourselves. Then we passed the extra options to Dyre via the <a href="https://hackage.haskell.org/package/dyre-0.9.1/docs/Config-Dyre.html#v:ghcOpts"><code>ghcOpts</code></a> fields of the <code>Params</code> type. This behaviour was ported to Dyre more or less <em>as-is</em> for the 0.9 release. Except for the bit that I forgot to port, which was restored in v0.9.1.</p>
<p>My Purebred co-author reported a regression with Nix support in Dyre 0.9.x. Under Nix, GHC fails to find the application library during custom binary compilation. I suspect the cause is an incidental behavioural change as a result of porting the detection logic from Purebred to Dyre. But I have not yet started a proper investigation.</p>]]></summary>
</entry>
<entry>
    <title>Announcing Dyre 0.9 release candidate</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-02-21-dyre-0.9-rc.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-02-21-dyre-0.9-rc.html</id>
    <published>2021-02-21T00:00:00Z</published>
    <updated>2021-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="announcing-dyre-0.9-release-candidate">Announcing Dyre 0.9 release candidate</h1>
<p><a href="https://hackage.haskell.org/package/dyre">Dyre</a> is a tool for Haskell program configuration by (re)compilation. The last release was 0.8.12, way back in 2014. Since then, the project has been dormant… until now. I am pleased to announce a <a href="https://hackage.haskell.org/package/dyre-0.9.0/candidate">Dyre 0.9 release candidate</a>. In this post I outline what’s changed and put out a call for testing ahead of the official release.</p>
<h2 id="dyre-overview">Dyre overview <a href="#dyre-overview">§</a></h2>
<p>Dyre implements program configuration in the style of <a href="https://xmonad.org/"><em>xmonad</em></a>. Configurations are Haskell programs using native types and functions. When a Dyre-enabled program starts up, it detects whether the configuration has changed. If so, it (re)compiles and caches a custom executable. Then it executes the custom executable and enters the “main program”.</p>
<p>Being able to configure a program using data types that are “native” to the program is both pleasant and powerful. Subtle user configuration errors that may go unnoticed, or lie dormant until they crash your program, instead become type errors. The program author has much less verification to perform compared to a configuration written in text formats such as YAML or JSON.</p>
<p>This post is not intended to be a Dyre tutorial. Refer to the <a href="https://hackage.haskell.org/package/dyre/docs/Config-Dyre.html"><code>Config.Dyre</code></a> module documentation to see what Dyre looks like in practice.</p>
<h2 id="becoming-dyres-maintainer">Becoming Dyre’s maintainer <a href="#becoming-dyres-maintainer">§</a></h2>
<p><a href="http://www.willdonnelly.net/">Will Donnelly</a> is Dyre’s original author and maintainer. Credit and thanks to him for writing a very useful tool and actively maintaining it over several years.</p>
<p>The most recent release of <a href="https://hackage.haskell.org/package/dyre">Dyre on Hackage</a> was 0.8.12 in 2014. There was activity on <a href="https://github.com/willdonnelly/dyre">GitHub</a> after that release, until early 2017. After that, Dyre was dormant.</p>
<p>Meanwhile my major project <a href="https://github.com/purebred-mua/purebred">Purebred</a> uses Dyre for configuration. We encountered some dependency issues and behaviour in Dyre that caused problems with newer versions of GHC. We also noticed some things that could be improved.</p>
<p>I decided to offer to take maintainership of Dyre. I emailed Will Donnelly but did not receive a response. Following the <a href="https://wiki.haskell.org/Taking_over_a_package"><em>Taking over a package</em></a> guide, I emailed the <em>Haskell-cafe</em> mailing list to <a href="https://mail.haskell.org/pipermail/haskell-cafe/2019-April/130923.html">announce my intent</a> to take over the package. This email <em>did</em> get noticed. Will graciously agreed that I should assume maintainership. He added me as a maintainer on Hackage and a collaborator on GitHub.</p>
<p>I put my shiny new commit bit to use and soon pushed several changes to GitHub, before… <em>not</em> cutting a release, then doing nothing for another two years. But now—at last—I am putting the finishing touches on a new release for Dyre. So…</p>
<h2 id="whats-changed-in-version-0.9">What’s changed in version 0.9? <a href="#whats-changed-in-version-0.9">§</a></h2>
<p>Major changes since 0.8.12 include:</p>
<ul>
<li><p><code>realMain</code> can now <strong>return arbitrary types</strong>. To support this change, <code>Params</code> got a new type variable.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- before</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Params</span> cfgType</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ot">wrapMain ::</span> <span class="dt">Params</span> cfgType <span class="ot">-&gt;</span> cfgType <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="co">-- after</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Params</span> cfgType a</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="ot">wrapMain ::</span> <span class="dt">Params</span> cfgType a <span class="ot">-&gt;</span> cfgType <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span></code></pre></div></li>
<li><p><code>defaultParams</code>, which contains <code>undefined</code> fields, has been <strong>deprecated</strong> in favour of the new function <code>newParams</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">-- here be bottoms</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="ot">defaultParams ::</span> <span class="dt">Params</span> cfg a</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">-- celestial music playing</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>newParams</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="ot">  ::</span> <span class="dt">String</span>                 <span class="co">-- ^ &#39;projectName&#39;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> (cfg <span class="ot">-&gt;</span> <span class="dt">IO</span> a)          <span class="co">-- ^ &#39;realMain&#39; function</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> (cfg <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> cfg) <span class="co">-- ^ &#39;showError&#39; function</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>  <span class="ot">-&gt;</span> <span class="dt">Params</span> cfg a</span></code></pre></div>
<p><code>newParams</code> takes values for the three required fields, so program authors can clearly see what they have to do and are less likely to make a mistake.</p></li>
<li><p><strong>Cabal store support</strong>: Users can add extra include dirs via the <code>includeDirs</code> field of <code>Params</code>. The program author just has to put the package’s library directory in the new <code>includeDirs</code> field:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Config.Dyre</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Paths_myapp</span> (getLibDir)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>realMain  <span class="ot">=</span> …</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>showError <span class="ot">=</span> …</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>myapp cfg <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>  libdir <span class="ot">&lt;-</span> getLibDir</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>  <span class="kw">let</span> params <span class="ot">=</span> (newParams <span class="st">&quot;myapp&quot;</span> realMain showError)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>        { includeDirs <span class="ot">=</span> [libdir] }</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>  wrapMain params cfg</span></code></pre></div>
<p>If an include dir appears to be in a Cabal store and matches the <code>projectName</code>, Dyre adds the corresponding <code>-package-id</code> option. As a result, recompilation works for programs installed via <code>cabal install</code>.</p></li>
<li><p><strong>Stack support</strong>: if Dyre detects a <code>stack.yaml</code> alongside the custom configuration, it will use Stack to compile the program. Credit to <em>Jaro Reinders</em> for this feature.</p></li>
<li><p>Dyre compiles the custom executable with <strong><code>-threaded</code></strong> when the main executable uses the threaded RTS. This means one less thing for program authors to remember (or forget) to do.</p></li>
<li><p>Dyre now <strong>requires GHC &gt;= 7.10</strong>.</p></li>
<li><p>Improved <strong>documentation</strong>.</p></li>
<li><p>The <strong>test suite</strong> was expanded, and can now be executed via <code>cabal test</code>.</p></li>
<li><p>Dyre <strong>cleans up</strong> better after compilation (successful or unsuccesful), and behaves better when the custom configuration is removed.</p></li>
<li><p>Some versions of GHC write to standard error, even during a successful compilation. Dyre no longer treats this as a compilation failure, instead relying solely on GHC’s exit status.</p></li>
<li><p>Dyre recognises the <strong><code>HC</code> environment variable</strong>. If set, it will compile the program using the specified compiler.</p></li>
<li><p>Fixes for <strong>Windows</strong>, including working with recent versions of the <em>process</em> package.</p></li>
</ul>
<p>Additionally, I set up <strong>continuous integration</strong> for the Dyre codebase. Initially it used Travis-CI but I recently migrated to GitHub Actions. It includes jobs for testing Dyre on MacOS and Windows.</p>
<h2 id="call-for-testing">Call for testing <a href="#call-for-testing">§</a></h2>
<p>I would like testing and feedback on the <a href="https://hackage.haskell.org/package/dyre-0.9.0/candidate">release candidate</a> before I cut the final release of Dyre 0.9. In particular, I would welcome more testing on <strong>Windows</strong>, as well as the <strong>Stack</strong> support. I also need to test with GHC 7.10, which for technical reasons is not covered by the CI matrix.</p>
<p><strong>You can help</strong> by testing Dyre in <em>any</em> environments, but especially those ones. Even if you only run <code>cabal test</code>, or implement the example from the <a href="https://hackage.haskell.org/package/dyre/docs/Config-Dyre.html"><code>Config.Dyre</code></a> module documentation, it will help. Please report testing outcomes in the <a href="https://github.com/willdonnelly/dyre/issues/39">testing checklist</a> issue. Failures <em>and successes</em> should be reported there.</p>
<p>For testing on Windows, you can install the <code>cabal</code> and <code>ghc</code> packages from <a href="https://chocolatey.org/">Chocolatey</a>. To run the <code>cabal test</code> suite you’ll also need a POSIX shell installed as <code>sh.exe</code>. The one provided by the <code>gitsh</code> package worked for me.</p>
<p>I hope to make the final release in a couple of weeks.</p>
<h2 id="future-work">Future work <a href="#future-work">§</a></h2>
<p>One area I have identified for future development is recording file hashes to detect changes. This is important to support the <strong>Nix</strong> packaging system, which sets all files’ creation and modification times to the epoch. It will also help with <strong>downgrades</strong>, where the main executable’s modification time decreases.</p>
<p>This known gap is the reason I didn’t release a new version in the almost two years since I became the maintainer. I kept thinking, <em>“I should really fix that first”</em>. But I still haven’t implemented file hashing, and don’t have immediate plans to. So I decided not to delay any longer the release of the improvements I <em>have</em> made.</p>
<p>If Nix support or other features are particularly important to you, please consider contributing to Dyre. You can create issues and pull requests <a href="https://github.com/willdonnelly/dyre">on GitHub</a>, or reach out to me directly.</p>]]></summary>
</entry>
<entry>
    <title>Haskell is vulnerable to dependency confusion</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-02-12-haskell-dependency-confusion.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-02-12-haskell-dependency-confusion.html</id>
    <published>2021-02-12T00:00:00Z</published>
    <updated>2021-02-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="haskell-is-vulnerable-to-dependency-confusion">Haskell is vulnerable to dependency confusion</h1>
<p>In this post, I demonstrate that critical parts of the Haskell package management system are vulnerable to the <em>dependency confusion</em> supply chain attack. I also discuss some potential approaches for Haskell tooling to mitigate this type of attack.</p>
<h2 id="introduction">Introduction <a href="#introduction">§</a></h2>
<p>A recent post, <a href="https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610"><em>Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies</em></a> by Alex Birsan, caused quite a stir. It describes an attack where the attacker uploads malicious packages with the same name as target organisations’ <em>internal</em> packages. If the version on the public repository is higher, most tools will prefer it. The malicious package compromises the developer’s machine, or the machines that run the program the developer builds, or the users who interact with that program over the network. Maybe all three.</p>
<p>The author successfully executed the dependency confusion attacks using <code>npm</code> (NodeJS), PyPI/<code>pip</code> (Python) and RubyGems/<code>gem</code> (Ruby). In the conclusion, he raises the spectre of other languages and package repositories being likewise vulnerable:</p>
<blockquote>
<p>Specifically, I believe that finding new and clever ways to leak internal package names will expose even more vulnerable systems, and looking into alternate programming languages and repositories to target will reveal some additional attack surface for dependency confusion bugs.</p>
</blockquote>
<p>So, is the Haskell ecosystem vulnerable to this attack? I assume you read the post title or abstract and therefore know that the answer to that question is <em>yes!</em> In the following sections I demonstrate the attack and discuss possible mitigations.</p>
<h2 id="terminology">Terminology <a href="#terminology">§</a></h2>
<ul>
<li><p><strong><em>hackage-server</em></strong>: the server program for running a Haskell package repository.</p></li>
<li><p><strong><em>Hackage</em></strong>: in isolation, refers to the Haskell community’s central package repository. It runs <em>hackage-server</em> and is located at <a href="https://hackage.haskell.org/"><strong><code>hackage.haskell.org</code></strong></a>.</p></li>
<li><p><strong><em>Cabal</em></strong>: the name of the Haskell package description format, and a library for working with such packages.</p></li>
<li><p><strong><em>cabal-install</em></strong>: the command line program for building and installing <em>Cabal</em> packages. The executable name is <strong><code>cabal</code></strong>. <em>cabal-install</em> uses the <em>Cabal</em> library and interacts with <em>hackage-server</em> servers (most commonly <code>hackage.haskell.org</code>).</p></li>
<li><p><strong><em>Private Hackage</em></strong>: a <em>hackage-server</em> instance operated for the purpose of hosting private or internal packages.</p></li>
</ul>
<h2 id="preparation">Preparation <a href="#preparation">§</a></h2>
<h3 id="private-hackage-repository">Private Hackage repository <a href="#private-hackage-repository">§</a></h3>
<p>For reasons unrelated to this investigation, I already had a local instance of <em>hackage-server</em>, running on <code>localhost:8080</code>. In this exercise, it plays the role of the private Hackage repository.</p>
<h3 id="subject-dependency">Subject dependency <a href="#subject-dependency">§</a></h3>
<p>I created a new “internal package” to be the subject of the attack. I chose a silly name suggested by GitHub: <em>redesigned-carnival</em>. Hopefully it will not conflict with anyone’s legitimate needs. While the <a href="https://github.com/frasertweedale/redesigned-carnival">source code</a> is available on GitHub, there’s no need to look at it. The package is trivial, containing a single module whose content is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">ACME.RedesignedCarnival</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>hello <span class="ot">=</span> <span class="st">&quot;Hello, world!&quot;</span></span></code></pre></div>
<p>I uploaded <code>redesigned-carnival-0.1.0.0</code> to the private Hackage repository.</p>
<h3 id="cabal-install-configuration"><em>cabal-install</em> configuration <a href="#cabal-install-configuration">§</a></h3>
<p>The <em>cabal-install</em> configuration lives at <code>~/.cabal/config</code>. By default it contains a single <code>repository</code> clause, pointing at Hackage:</p>
<pre><code>repository hackage.haskell.org
  url: http://hackage.haskell.org/</code></pre>
<p>I added a second <code>repository</code> clause, pointing at my local Hackage server:</p>
<pre><code>repository localhost
  url: http://localhost:8080/</code></pre>
<p>With the <code>repository</code> configured, I proceeded to update the local package index via <code>cabal update</code>.</p>
<div class="note">
<p>Due to a bug in the <a href="https://hackage.haskell.org/package/HTTP"><em>HTTP</em></a> package, updating the index fails when the repository URL specifies a port. The workaround is to tell <em>cabal-install</em> to use a different HTTP transport. Set the <code>http-transport</code> option in <code>~/.cabal/config</code>:</p>
<pre><code>-- valid values: curl, wget, powershell
http-transport: curl</code></pre>
<p>I submitted a <a href="https://github.com/haskell/HTTP/pull/133">pull request</a> to fix this issue.</p>
</div>
<pre class="shell"><code>% cabal update
Downloading the latest package lists from:
- localhost
- hackage.haskell.org
To revert to previous state run:
    cabal v2-update &#39;hackage.haskell.org,2021-02-08T02:13:51Z&#39;</code></pre>
<p>We can see that the <code>localhost</code> index was retrieved. <em>cabal-install</em> is now aware of packages in my private Hackage server:</p>
<pre class="shell"><code>% cabal list redesigned-carnival
* redesigned-carnival
    Synopsis: Package for dependency confusion
    Default available version: 0.1.0.0
    Installed versions: [ Not installed ]
    License:  PublicDomain</code></pre>
<h3 id="vulnerable-dependent-package">Vulnerable dependent package <a href="#vulnerable-dependent-package">§</a></h3>
<p>I wrote a tiny package called <em>super-fiesta</em> (cheerful suggestion thanks to GitHub, again). It depends on <em>redesigned-carnival</em>, and prints the value of <code>hello</code>. The <a href="https://github.com/frasertweedale/super-fiesta">source code</a> is on GitHub. Here is the whole program (<code>Main.hs</code>):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">ACME.RedesignedCarnival</span> (hello)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> hello</span></code></pre></div>
<p>With <em>cabal-install</em> now aware of <em>redesigned-carnival</em>, I can build and run this program:</p>
<pre class="shell"><code>% cd ~/dev/hs/super-fiesta
% cabal run
Resolving dependencies...
Downloading  redesigned-carnival-0.1.0.0
Downloaded   redesigned-carnival-0.1.0.0
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - redesigned-carnival-0.1.0.0 (lib) (requires build)
 - super-fiesta-0.1.0.0 (exe:super-fiesta) (first run)
Starting     redesigned-carnival-0.1.0.0 (lib)
Building     redesigned-carnival-0.1.0.0 (lib)
Installing   redesigned-carnival-0.1.0.0 (lib)
Completed    redesigned-carnival-0.1.0.0 (lib)
Configuring executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Preprocessing executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Building executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
[1 of 1] Compiling Main             ( Main.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta-tmp/Main.o )
Linking /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta ...
Hello, world!</code></pre>
<h3 id="determining-internal-package-names">Determining internal package names <a href="#determining-internal-package-names">§</a></h3>
<p>The attack requires knowing, or guessing, internal package names. Approaches that apply to Haskell code include:</p>
<ul>
<li><p>Search for mentions of internal libraries in public code, blog posts, presentations, and so on.</p></li>
<li><p>Scan non-stripped binaries delivered by the target organisation.</p></li>
<li><p>If there is an organisation-specific package naming convention, make some educated guesses.</p></li>
<li><p>Use any other kind of exploit (including social engineering) to discover internal package names.</p></li>
</ul>
<p>I will assume that the hypothetical attacker has learned, somehow, that I have an internal package named <em>redesigned-carnival</em>, and will attempt to use dependency confusion to attack me. This is an appropriate assumption.</p>
<h2 id="attack">Attack <a href="#attack">§</a></h2>
<p>I bumped the version of <em>redesigned-carnival</em> to <code>1.0.0.0</code>, and <a href="https://hackage.haskell.org/package/redesigned-carnival">uploaded it to Hackage</a>. A real-world attacker might upload <em>many</em> different versions, in the hope of matching a range of possible constraints.</p>
<p>The version uploaded to Hackage does not contain any malicious behaviour. But I changed the <code>hello</code> string to <code>"Mwahaha"</code>. If we see this sinister-looking string, we’ll know the attack succeeded.</p>
<p>After another <code>cabal update</code>, <em>cabal-install</em> is aware of the new version of <em>redesigned-carnival</em>:</p>
<pre class="shell"><code>% cabal list redesigned-carnival
* redesigned-carnival
    Synopsis: Package for dependency confusion
    Default available version: 1.0.0.0
    Installed versions: [ Not installed ]
    License:  PublicDomain</code></pre>
<p>The <em>Default available version</em> line shows that, by default, <em>cabal-install</em> will prefer the highest version of package. To confirm that it was not merely the <em>most recently uploaded</em> version of a package, I created version <code>0.2.0.0</code>, uploaded it to my <em>private</em> Hackage server, and ran <code>cabal update</code>. <code>cabal list</code> still showed version <code>1.0.0.0</code> as the default version.</p>
<p>This is what <em>cabal-install</em> did the next time I built (and ran) <em>super-fiesta</em>:</p>
<pre class="shell"><code>% cabal run
Resolving dependencies...
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - redesigned-carnival-1.0.0.0 (lib) (requires build)
 - super-fiesta-0.1.0.0 (exe:super-fiesta) (configuration changed)
Starting     redesigned-carnival-1.0.0.0 (lib)
Building     redesigned-carnival-1.0.0.0 (lib)
Installing   redesigned-carnival-1.0.0.0 (lib)
Completed    redesigned-carnival-1.0.0.0 (lib)
Configuring executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Preprocessing executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Building executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
[1 of 1] Compiling Main             ( Main.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta-tmp/Main.o ) [ACME.RedesignedCarnival changed]
Linking /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta ...
Mwahaha</code></pre>
<p>Owned. <em>cabal-install</em> saw that there was a new version of <em>redesigned-carnival</em> compatible with the constraints (because there are no constraints). So it downloaded, built, installed and linked to the “malicious” version from Hackage.</p>
<p>The order the repositories appear in <code>~/.cabal/config</code> does not affect the result. My testing shows that <em>cabal-install</em> prefers the highest version, regardless of which repository it comes from. I have seen comments that repositories listed later are preferred over earlier ones, but maybe that only applies when the same version is hosted on both repositories.</p>
<h2 id="mitigations">Mitigations <a href="#mitigations">§</a></h2>
<p>Alternative workflows and tools can mitigate the risk of dependency confusion attacks. I discuss some current approaches below, and also some ideas for future tooling enhancements.</p>
<h3 id="local-packages-effective">Local packages (effective) <a href="#local-packages-effective">§</a></h3>
<p>Instead of using a private Hackage server, you can specify local packages in <code>cabal.project</code> or <code>cabal.project.local</code>:</p>
<pre class="shell"><code>% echo &quot;packages: ., ../redesigned-carnival&quot; &gt; cabal.project.local
% cabal run exe:super-fiesta
Resolving dependencies...
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - redesigned-carnival-0.1.0.0 (lib) (first run)
 - super-fiesta-0.1.0.0 (exe:super-fiesta) (configuration changed)
Configuring library for redesigned-carnival-0.1.0.0..
Preprocessing library for redesigned-carnival-0.1.0.0..
Building library for redesigned-carnival-0.1.0.0..
[1 of 1] Compiling ACME.RedesignedCarnival ( src/ACME/RedesignedCarnival.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/redesigned-carnival-0.1.0.0/build/ACME/RedesignedCarnival.o )
Configuring executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Preprocessing executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
Building executable &#39;super-fiesta&#39; for super-fiesta-0.1.0.0..
[1 of 1] Compiling Main             ( Main.hs, /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta-tmp/Main.o ) [ACME.RedesignedCarnival changed]
Linking /home/ftweedal/dev/hs/super-fiesta/dist-newstyle/build/x86_64-linux/ghc-8.8.4/super-fiesta-0.1.0.0/x/super-fiesta/build/super-fiesta/super-fiesta ...
Hello, world!</code></pre>
<p>Local packages are always preferred over versions in repositories, even when a repository offers a higher version. You can use manual cloning, Git submodules or a monorepo to get the internal package sources in the right place.</p>
<p>A minor downside to this approach is that you have to be more explicit about which package you want to build, run or install. In the transcript above, I executed <code>cabal run exe:super-fiesta</code>. If I omit the final argument, <em>cabal-install</em> complains:</p>
<pre class="shell"><code>% cabal run
Resolving dependencies...
TODO: add support for multiple packages in a directory
CallStack (from HasCallStack):
  error, called at ./Distribution/Client/ProjectOrchestration.hs:542:9 in main:Distribution.Client.ProjectOrchestration
</code></pre>
<h3 id="cabal-freeze-effective-with-caveats"><code>cabal freeze</code> (effective, with caveats) <a href="#cabal-freeze-effective-with-caveats">§</a></h3>
<p>Dependency version pinning via <code>cabal freeze</code> is not an effective mitigation <em>in general</em>. To demonstrate, I uploaded <code>redesigned-carnival-0.3.0.0</code> to my private Hackage, and the same version (with “malicious” modification) to <code>hackage.haskell.org</code>. I executed <code>cabal freeze</code> and modified the <code>cabal.project.freeze</code> file to require <code>redesigned-carnival-0.3.0.0</code>:</p>
<pre class="shell"><code>% cat cabal.project.freeze
constraints: any.base ==4.13.0.0,
             any.ghc-prim ==0.5.3,
             any.integer-gmp ==1.0.2.0,
             any.redesigned-carnival ==0.3.0.0,
             any.rts ==1.0</code></pre>
<p>Then I executed <code>cabal run</code>. With both repositories offering the “same” version, <em>cabal-install</em> retrieves the package from the <em>last defined</em> repository. If that is <code>hackage.haskell.org</code>, then you will download and build the malicious variant.</p>
<p>So in the presence of public and private Hackage repositories, the security of dependency freezing depends on the repository order. Unfortunately the official <em>cabal-install</em> <a href="https://cabal.readthedocs.io/en/3.2/installing-packages.html#repository-specification">documentation</a> fails to mention the significance of repository order:</p>
<blockquote>
<p>If you want, you can configure multiple repositories, and cabal will combine them and be able to download packages from any of them.</p>
</blockquote>
<p>The vagueness of the documentation means insecure configurations are likely. If you work in a Haskell team inside a company, <em>everyone</em> needs to get this configuration right.</p>
<h3 id="use-nix-effective">Use Nix (effective) <a href="#use-nix-effective">§</a></h3>
<p><a href="https://nixos.org/">Nix</a> is a content-address package management system where all packages pin all dependencies by their cryptographic hashes. Many Haskell developers and teams use it, and enjoy certainty about their dependencies and reproducible builds.</p>
<p>Nix has a steep learning curve, and it is not a complete solution for library and program authors who want to publish to Hackage. <em>“Use Nix”</em> is a valid way to mitigate dependency confusion risk for Haskell teams and some individuals.</p>
<h3 id="use-stack-effective">Use Stack (effective?) <a href="#use-stack-effective">§</a></h3>
<p>According to the results of annual Haskell developer surveys (<a href="https://taylor.fausak.me/2020/11/22/haskell-survey-results/#s3q0">2020</a>, <a href="https://taylor.fausak.me/2019/11/16/haskell-survey-results/#s3q0">2019</a>, <a href="https://taylor.fausak.me/2018/11/18/2018-state-of-haskell-survey-results/#question-041">2018</a>, <a href="https://taylor.fausak.me/2017/11/15/2017-state-of-haskell-survey-results/#question-22">2017</a>), around 75% of Haskell developers use the <a href="https://haskellstack.org/">Stack</a> build tool. Stack, by default, uses curated package sets from <a href="https://www.stackage.org/">Stackage</a>. For internal packages it allows pinning to exact Git commit hashes, and local packages.</p>
<p>On the face of it, it would seem that Stack, in a standard configuration, protects against dependency confusion attacks. I don’t use Stack and I haven’t tested it as part of this investigation. I’ll give it the benefit of the doubt and hope that others might put it to the test and publish their findings.</p>
<p>Even if Stack mitigates dependency confusion perfectly, according to the same surveys above, around 50% of Haskell developers use <em>cabal-install</em> (either exclusively or alongside other build tools). As was the case with Nix, Stack may be a solution for particular teams or individuals, but it is not a solution for the whole community.</p>
<h3 id="exclusive-repositories-idea-effective-with-caveats">“Exclusive” repositories (<del>idea</del> effective, with caveats) <a href="#exclusive-repositories-idea-effective-with-caveats">§</a></h3>
<p>If you could mark a repository as “exclusive”, then for any package provided by that repository, <em>cabal-install</em> <strong>must</strong> only use a version provided by that repository. The idea is that private repositories would be marked as exclusive:</p>
<pre><code>repository localhost
  url: http://localhost:8080/
  exclusive: True

repository hackage.haskell.org
  url: http://hackage.haskell.org/</code></pre>
<p>Now, a dependency confusion attack against <em>redesigned-carnival</em> would not work. <em>cabal-install</em> will ignore versions of the package from <code>hackage.haskell.org</code>, because that package name is also provided by an exclusive repository.</p>
<p>This approach is easy for users to configure. But, as with the <code>cabal freeze</code> approach, security for organisations requires every developer to set the configuration properly.</p>
<p>and requires no changes to the <em>hackage-server</em> program or the <em>Cabal</em> package description format. The changes are limited to <em>cabal-install</em>.</p>
<p>One drawback is that if a person or organisation wants to publicly release a previously internal package, they will have to remove it from their private repository. As far as I can tell, <em>hackage-server</em> does not support package deletion. So this approach might entail changes to <em>hackage-server</em> after all.</p>
<h4 id="update-coming-in-cabal-install-3.4"><em>Update</em>: coming in <em>cabal-install</em> 3.4 <a href="#update-coming-in-cabal-install-3.4">§</a></h4>
<p>Oleg Grenrus <a href="https://www.reddit.com/r/haskell/comments/lhmbw3/haskell_is_vulnerable_to_dependency_confusion/gmz6qi0/">pointed out</a> a new feature arriving in <code>cabal-install-3.4</code>. The <code>active-repositories</code> field and <code>override</code> merge strategy can accomplish the goal of restricting packages to a particular repository:</p>
<pre><code>-- Order is significant.  For packages in localhost,
-- only versions in localhost are considered
active-repositories:
  , hackage.haskell.org
  , localhost:override</code></pre>
<p>See also the <a href="https://cabal.readthedocs.io/en/3.4/cabal-project.html?highlight=active-repositories#cfg-field-active-repositories">official documentation</a>. I have tested the feature, and it works. At time of writing the pre-release version is <code>3.4.0.0-rc7</code> so the final release should not be far away.</p>
<h3 id="repository-scoped-dependencies-idea">Repository-scoped dependencies (idea) <a href="#repository-scoped-dependencies-idea">§</a></h3>
<p>Dependencies in <code>.cabal</code> files have no scoping or namespacing. What if you could scope a dependency to a particular repository? For example:</p>
<pre class="cabal"><code>executable super-fiesta
  main-is: Main.hs
  build-depends:
    base &gt;=4 &amp;&amp; &lt;5
    , &lt;repository&gt;:redesigned-carnival
  default-language:    Haskell2010</code></pre>
<p>You could optionally constrain particular dependencies to come from a specified repository. This would be a more invasive change, involving a change to the package description format. <em>Cabal</em> (the library) and <em>cabal-install</em> would be impacted.</p>
<p>To thwart attacks where people get confused or tricked into using the wrong repository, everyone would need to agree on the names of repositories (which are currently configured in <code>~/.cabal/config</code>). In other words, every agent would need to agree on what <code>&lt;repository&gt;</code> means. This could be accomplished by identifying repositories by URI, but there could be other valid approaches.</p>
<h3 id="validated-namespaces-for-packages-idea">Validated namespaces for packages (idea) <a href="#validated-namespaces-for-packages-idea">§</a></h3>
<p>Another possible approach is that taken by the Java <a href="https://en.wikipedia.org/wiki/Apache_Maven"><em>Maven</em></a> system. Packages are addressed by <code>&lt;Group ID&gt;:&lt;Artifact ID&gt;:&lt;Version&gt;</code>, where <code>group-id</code> is based on a DNS name. In order to publish a new artifact to the <a href="https://search.maven.org/"><em>Maven Central</em></a> public repository, the prospective publisher has to prove “control” of the Group ID. Most often this is done by publishing a particular DNS TXT record in the domain from which the Group ID is derived. But some Group IDs follow other validation rules (e.g. commit access for <code>org.github.*</code>. Brian Fox’s blog post <a href="https://blog.sonatype.com/why-namespacing-matters-in-public-open-source-repositories"><em>Why Namespacing Matters in Public Open Source Repositories</em></a> explains it well, and in more detail.</p>
<p>Summary: if packages in public repositories are namespaced by <em>something</em>, and if that <em>something</em> can be validated by the repository before publishing, then the system is resistant to dependency confusion attacks (up to spoofing the validation mechanism). DNS-based namespaces strike a fair balance between verifiability and usability (for both publishers and users).</p>
<p>So, what would this look like in the Haskell world? Retrofitting our package ecosystem with namespaces would be a <em>very</em> disruptive change. All tooling would be affected. In particular, <em>hackage-server</em> would need to learn how to validate package namespaces.</p>
<p>No doubt many people will be annoyed that they must now write <code>haskell.org:base</code> (instead of just <code>base</code>), <code>frase.id.au:redesigned-carnival</code>, and so on. (By the way, those namespace values are just a suggestion of a possible scheme).</p>
<p>Migrating existing packages poses several challenges. Sure, put core libraries in the <code>haskell.org</code> (or whatever) namespace. But where should <em>lens</em> live? Who decides? What if there is disagreement? And what happens to packages that don’t have responsive maintainers?</p>
<p>I think that with careful planning a smooth transition is possible. To give people time to adjust, packages could for some period remain accessible via namespaced and non-namespaced names. Duplicate names in different namespaces would be forbidden during the transition period. We can build tools to update <code>.cabal</code> files with the namespaces, removing most of the pain for maintainers.</p>
<p>After the transition period ends, all the Haskell tooling will use namespaced packages. Importantly, users and developers do not need to configure anything to be safe from dependency confusion attacks. Only publishers will face some additional validation steps.</p>
<p>Apart from security I see another possible benefit to this approach. Organisation-namespaced packages could give more visibility into which organisations are using Haskell. This could promote the perception of Haskell as a language of industry. <em>“Look, we are like Java”</em> is a legitimate selling point for many people.</p>
<h2 id="other-attacks">Other attacks <a href="#other-attacks">§</a></h2>
<p>Dependency confusion is just one kind of software supply chain attack. The approaches I discussed mitigate this specific attack. But they do not protect against other attacks, such as an attacker acquiring Ed Kmett’s Hackage credentials and uploading a malicous new release of <em>lens</em>. Or the maintainer themselves turning evil. Different protections are needed for other kinds of attacks.</p>
<p>Also, dependency confusion on its own is just a vector for malware. Does the malware target the developer’s machine, or the machines that run the program the developer is building, or network clients? All of the above? The range of possible attacks depends on the language, development environment and deployment environment. The different ways in which a Haskell dependency confusion victim could actually be exploited is a topic for a whole other blog post.</p>
<p>These are all important topics to consider in the design of languages, build tooling and package management systems. In additional to known supply chain attacks, human factors (social engineering) should not be ignored either.</p>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>In this post I demonstrated that the standard Haskell development tooling—Hackage and Cabal/<em>cabal-install</em>—is vulnerable to dependency confusion attacks. I discussed some mitigations that are feasible today, and some ideas for tool improvements that vary in complexity and usability. Finally I emphasised that dependency confusion is one of several types of supply chain attack, and just one small panel in the tapestry of software security.</p>
<p>I think that Haskell has long, <em>long</em> way to go in terms of security. Sure, the language itself is mostly pretty good. But the compiler, build tools, and package repositories all fall far short when it comes to security. I will have more to say about this in future blog posts.</p>
<p>In the meantime, I hope this post kick-starts a discussion about how we should address the particular threat of dependency confusion.</p>]]></summary>
</entry>
<entry>
    <title>Prototyping a plugin system for Purebred</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-02-02-plugin-system-prototype.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-02-02-plugin-system-prototype.html</id>
    <published>2021-02-02T00:00:00Z</published>
    <updated>2021-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="prototyping-a-plugin-system-for-purebred">Prototyping a plugin system for Purebred</h1>
<p>In this post I present an experimental design for a plugin system, where plugins’ capabilities are expressed in their types. The types are user-visible and human-friendly. This is achieved without sacrificing composability—plugins with different capabilities can be composed together.</p>
<h2 id="introduction">Introduction <a href="#introduction">§</a></h2>
<p>I’m working on a plugin system for <a href="https://github.com/purebred-mua/purebred">Purebred</a>, a mail user agent program. The goal of every plugin system is to enable smooth integration (composition) of components from various packages into the main program, providing additional or alternative behaviour.</p>
<p>My secondary goal for <em>this</em> plugin system is to express as much information as possible about plugin behaviour <em>through types</em>. A plugin that purports to perform a pure computation (e.g. adding a <code>User-Agent</code> header to outgoing mail) should not be allowed to launch the missiles! Its type should express this constraint. Doing so communicates important information to the compiler (which enforces the constraints), and to humans (who will ask questions like, <em>“How safe is this plugin?”</em>)</p>
<p>Haskell provides for substantial and satisfying progress toward this objective, without compromising the primary goal of composition. After experimenting with several different approaches I arrived at the design that I am presenting here in this post. I will begin with a description of the <a href="#test-bed-program">test-bed program</a>, then outline my <a href="#plugin-system-requirements">requirements</a> for a plugin system. Then I describe the <a href="#solution">solution</a>, and conclude with a <a href="#discussion">discussion</a> of design tradeoffs and considerations for implementing this design in Purebred.</p>
<h2 id="test-bed-program">Test-bed program <a href="#test-bed-program">§</a></h2>
<p>I wrote a small, simple program to serve as the test-bed for plugin system experimentation. This program reads a <code>Bool</code> and an <code>Int</code> from user input, negates the number if the <code>Bool</code> is <code>True</code>, and prints the result.</p>
<p><code>Main.hs</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">System.IO</span> (hFlush, stdout)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="co">-- read start values</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  doNegate <span class="ot">&lt;-</span> prompt <span class="st">&quot;negate number? [True|False]&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  i <span class="ot">&lt;-</span> prompt <span class="st">&quot;number (Int)&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  (j, doNegate&#39;) <span class="ot">&lt;-</span> <span class="fu">flip</span> runStateT doNegate <span class="op">$</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>    <span class="fu">pure</span> i  <span class="co">-- TODO run plugins</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  <span class="co">-- print result</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  <span class="kw">let</span> r <span class="ot">=</span> <span class="kw">if</span> doNegate&#39; <span class="kw">then</span> <span class="fu">negate</span> j <span class="kw">else</span> j</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  <span class="fu">putStr</span> <span class="st">&quot;result: &quot;</span> <span class="op">*&gt;</span> <span class="fu">print</span> r</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>  prompt s <span class="ot">=</span> <span class="fu">putStr</span> (s <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span>) <span class="op">*&gt;</span> hFlush stdout <span class="op">*&gt;</span> <span class="fu">readLn</span></span></code></pre></div>
<p>Running the program, telling it to negate the input and giving it the value <code>10</code>, gives the following transcript:</p>
<pre><code>ftweedal% ./Main
negate number? [True|False]: True
number (Int): 10
result: -10</code></pre>
<p>I put a <code>TODO</code> where I want to execute plugin behaviour, in a <code>StateT Bool IO Int</code> computation. Plugins should be able to manipulate the <code>Int</code> <em>result</em> value, and/or read or modify the <code>Bool</code> <em>state</em> value, and/or perform I/O.</p>
<h2 id="plugin-system-requirements">Plugin system requirements <a href="#plugin-system-requirements">§</a></h2>
<p>The requirements for my plugin system are:</p>
<ul>
<li><p><strong>Composition</strong>: Plugins from different modules or packages must be able to be used together in the main program.</p></li>
<li><p><strong>Capabilities</strong>: Plugins modules must express required capabilities in their exported type(s). That is, the capabilities are visible to users, without reading source code.</p></li>
<li><p><strong>Human-friendly</strong>: The plugin system must be comprehensible to end-users, who are not necessarily programmers.</p></li>
<li><p><strong>Configuration</strong>: Some plugins will need user-specified configuration. Static configuration (i.e. no change after program initialisation) is acceptable.</p></li>
<li><p><strong>Abstract</strong>: Plugin behaviour types must not mention the type of the main program’s monad transformer stack. This allows the main program’s implementation to evolve without breaking the plugin API.</p></li>
</ul>
<h3 id="not-in-scope">Not in scope <a href="#not-in-scope">§</a></h3>
<p>There are some other points in the plugin system design space that I am not trying to solve:</p>
<ul>
<li><p><strong>Plugin loading</strong>: How does the program find and load plugins? In my experimental design, the plugins will be statically compiled into the program. This approach will also work for Purebred, because we use <a href="https://hackage.haskell.org/package/dyre"><em>Dyre</em></a> for configuration by recompilation (in the style of <a href="https://xmonad.org/"><em>xmonad</em></a>). Dynamic loading/unloading/reloading of plugins is an interesting topic, but I’m not trying to solve it here. The <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.128.6930&amp;rep=rep1&amp;type=pdf"><em>Plugging Haskell In</em></a> paper (Chakravarty <em>et al</em>) and <a href="https://hackage.haskell.org/package/plugins"><em>plugins</em> library</a> present one solution to the problem.</p></li>
<li><p><strong>Plugin state</strong>: What if a plugin needs to store/retrieve data <em>related to itself</em> in the program state? Plugins have no control over the state data type of the main program. I don’t see a need for this in Purebred (yet), so I’m not going to tackle this problem. But if I were, I would look at <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Dynamic.html"><code>Data.Dynamic</code></a> and <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-IORef.html"><code>Data.IORef</code></a> as possible starting points.</p></li>
<li><p><strong>Plugin “idempotency”</strong>: If you enable the PGP plugin twice, will it sign/encrypt the outgoing message twice? In the Purebred approach to configuration this sort of mistake is unlikely, so I’m going to ignore this problem.</p></li>
</ul>
<h2 id="solution">Solution <a href="#solution">§</a></h2>
<p>In this section I describe the implementation of the prototype plugin system. The code is also available in a <a href="https://github.com/frasertweedale/hs-plugin-system-prototype">Git repository</a>, under the <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a> license. You can clone, review, compile, test and experiment with the code yourself.</p>
<h3 id="language-extensions">Language extensions <a href="#language-extensions">§</a></h3>
<p>I define the plugin types and helpers in <code>Plugin.hs</code>. Some language extensions are required:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE RankNTypes #-}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ConstraintKinds #-}</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="ot">{-# LANGUAGE FlexibleContexts #-}</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="ot">{-# LANGUAGE UndecidableInstances #-}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="ot">{-# LANGUAGE QuantifiedConstraints #-}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin</span> <span class="kw">where</span></span></code></pre></div>
<p>These extensions are uncontroversial. Only <code>UndecidableInstances</code> is a bit iffy, but it’s safe to use here. I shall indicate the declarations that require these extensions as we encounter them.</p>
<p><code>Main.hs</code> and the modules defining the plugins themselves do not require any language extensions.</p>
<h3 id="the-plugin-type">The <code>Plugin</code> type <a href="#the-plugin-type">§</a></h3>
<p>The test-bed program will execute plugins in the <code>StateT Bool IO</code> monad transformer stack. Each plugin takes an <code>Int</code> input and returns a (possibly modified) <code>Int</code>. The concrete type is of such a function is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Plugin</span> <span class="ot">=</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">StateT</span> <span class="dt">Bool</span> <span class="dt">IO</span> <span class="dt">Int</span></span></code></pre></div>
<p>One of the requirements is that the plugin function type must be abstract, so that the main program’s monad transformer stack can evolve if needed. We also know that different plugins will have different constraints, and that we want to express the constraints in the type. So let’s parameterise the function type over the constraint:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span></code></pre></div>
<p>That declaration requires the <code>RankNTypes</code> and <code>ConstraintKinds</code> language extensions. To understand <code>ConstraintKinds</code>, let’s look at the <em>kind</em> of <code>Plugin</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>k <span class="dt">Plugin</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="dt">Plugin</span><span class="ot"> ::</span> ((<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span>) <span class="ot">-&gt;</span> <span class="dt">Type</span></span></code></pre></div>
<p><code>Constraint</code> is the kind of constraints (things that go before <code>=&gt;</code> in a type declaration). The <code>Plugin</code> type constructor has a single argument of kind <code>(Type -&gt; Type) -&gt; Constraint</code>. Here are some things that have that kind:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="dt">Applicative</span><span class="ot">     ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="dt">MonadIO</span><span class="ot">         ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="dt">MonadState</span> <span class="dt">Bool</span><span class="ot"> ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span></code></pre></div>
<p>So we can, for example, apply <code>Plugin</code> to <code>MonadState Bool</code>, to construct the <code>Type</code> of a plugin that can read and write the program state:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="dt">Plugin</span> (<span class="dt">MonadState</span> <span class="dt">Bool</span>)<span class="ot"> ::</span> <span class="dt">Type</span></span></code></pre></div>
<p>Defining plugins this way has satisfied the <strong>capabilities</strong> and <strong>abstract</strong> requirements. The capabilities (✓) are visible in the type as abstract type class (✓) constraints.</p>
<p>In a real world scenario, there might be multiple parts of the main program to hook into. It is also useful to give a plugin a name, so that the program can express which plugins are in use, report errors, and so on. So I turned <code>Plugin</code> into a data type with a name field:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Plugin</span> ctx <span class="ot">=</span> <span class="dt">Plugin</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>  {<span class="ot"> pluginName ::</span> <span class="dt">String</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>  ,<span class="ot"> pluginHook ::</span> <span class="kw">forall</span> m<span class="op">.</span> (ctx m) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p>For applications with many hooks, it would be nice to wrap the hook fields in <code>Maybe</code> (so the plugin doesn’t have to implement them all). Alternatively, I could provide a helper function that initialises the hooks to “no-op” functions. Plugins would override the hooks they use. For this experiment there is only one hook, so I’ve skipped this for now.</p>
<h3 id="capabilities">Capabilities <a href="#capabilities">§</a></h3>
<p>The plugin system could be used by non-programmers; the types have to make sense to them. What is a <code>Plugin Applicative</code>? What is a <code>Plugin (MonadState Bool)</code>?! I defined type synonyms for the various constraints, to (hopefully) make the plugin system more comprehensible to humans—programmer and non-programmer alike:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Pure</span> <span class="ot">=</span> <span class="dt">Applicative</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">CanIO</span> <span class="ot">=</span> <span class="dt">MonadIO</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">CanRWState</span> <span class="ot">=</span> <span class="dt">MonadState</span> <span class="dt">Bool</span></span></code></pre></div>
<p>Now we can say <code>Plugin Pure</code>, or <code>Plugin CanRWState</code>. This addresses the <strong>human-friendly</strong> requirement (in part, at least).</p>
<p>What if a plugin needs to use multiple capabilities? I first approached this by defining a type synonym:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Unconstrained</span> m <span class="ot">=</span> (<span class="dt">CanIO</span> m, <span class="dt">CanRWState</span> m)</span></code></pre></div>
<p>Observe that <code>Unconstrained</code> has the required kind:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>k <span class="dt">Unconstrained</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="dt">Unconstrained</span><span class="ot"> ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span></code></pre></div>
<p>Unfortunately, we cannot use <code>Unconstrained</code> as an argument to <code>Plugin</code>, because type synonyms cannot be partially applied:</p>
<pre><code>λ&gt; :k Plugin Unconstrained

&lt;interactive&gt;:1:1: error:
    The type synonym ‘Unconstrained’ should have 1 argument,
    but has been given none</code></pre>
<p>The <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0242-unsaturated-type-families.rst"><em>Unsaturated Type Families</em></a> proposal, when it lands, will hopefully lift this restriction. Until then, the same effect can be achieved with a type class and corresponding instance. The <code>FlexibleContexts</code>, <code>FlexibleInstances</code> and <code>UndecidableInstances</code> extensions are required for these declarations:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">class</span> (<span class="dt">CanRWState</span> m, <span class="dt">CanIO</span> m) <span class="ot">=&gt;</span> <span class="dt">Unconstrained</span> m <span class="kw">where</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>  <span class="co">-- empty</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">CanRWState</span> m, <span class="dt">CanIO</span> m) <span class="ot">=&gt;</span> <span class="dt">Unconstrained</span> m <span class="kw">where</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>  <span class="co">-- empty</span></span></code></pre></div>
<p>These definitions give an instance for <code>Unconstrained</code> to any type that already has instances for all the constituent capabilities. It was not necessary to mention <code>Pure</code>/<code>Applicative</code> because it is a superclass of the other constraints.</p>
<h3 id="implementing-plugins">Implementing plugins <a href="#implementing-plugins">§</a></h3>
<p>Now that I have defined the plugin type and capabilities, let’s implement some plugins.</p>
<h4 id="plugin.double"><code>Plugin.Double</code> <a href="#plugin.double">§</a></h4>
<p><code>Plugin/Double.hs</code> defines a “pure” plugin that doubles the <code>Int</code> value:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.Double</span> <span class="kw">where</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> <span class="dt">Pure</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;Double&quot;</span> <span class="op">$</span> <span class="fu">pure</span> <span class="op">.</span> (<span class="op">*</span><span class="dv">2</span>)</span></code></pre></div>
<h4 id="plugin.offset"><code>Plugin.Offset</code> <a href="#plugin.offset">§</a></h4>
<p><code>Plugin/Offset.hs</code> defines a “pure” plugin that adds a fixed offset to the <code>Int</code> value. The offset is configurable: applying <code>mkPlugin</code> to the configuration yields the plugin value. This satisfies our <strong>configuration</strong> requirement.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.Offset</span> <span class="kw">where</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a><span class="ot">mkPlugin ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Plugin</span> <span class="dt">Pure</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>mkPlugin offset <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;Offset&quot;</span> <span class="op">$</span> <span class="fu">pure</span> <span class="op">.</span> (<span class="op">+</span> offset)</span></code></pre></div>
<h4 id="plugin.flipnegate"><code>Plugin.FlipNegate</code> <a href="#plugin.flipnegate">§</a></h4>
<p><code>Plugin/FlipNegate.hs</code> defines a plugin that inverts the value of <code>doNegate</code> in the program state. Therefore it is a <code>Plugin CanRWState</code>.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.FlipNegate</span> <span class="kw">where</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span> (modify)</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> <span class="dt">CanRWState</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;FlipNegate&quot;</span> <span class="op">$</span> \i <span class="ot">-&gt;</span> i <span class="op">&lt;$</span> modify <span class="fu">not</span></span></code></pre></div>
<h4 id="plugin.shootlasers"><code>Plugin.ShootLasers</code> <a href="#plugin.shootlasers">§</a></h4>
<p><code>Plugin/ShootLasers.hs</code> uses <code>CanIO</code> to shoot the lasers. Watch out!</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Plugin.ShootLasers</span> <span class="kw">where</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.IO.Class</span> (liftIO)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Plugin</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a><span class="ot">plugin ::</span> <span class="dt">Plugin</span> <span class="dt">CanIO</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>plugin <span class="ot">=</span> <span class="dt">Plugin</span> <span class="st">&quot;ShootLasers&quot;</span> <span class="op">$</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>  \i <span class="ot">-&gt;</span> i <span class="op">&lt;$</span> liftIO (<span class="fu">putStrLn</span> <span class="st">&quot;pew! pew!&quot;</span>)</span></code></pre></div>
<h3 id="composition">Composition <a href="#composition">§</a></h3>
<p>The main program will have a list (or some other container) of zero or more plugins. And it will execute the plugin hooks at the relevant part of the program. OK, let’s build a list of plugins in <code>Main.hs</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>  [ Plugin.Double.plugin</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>  , Plugin.Offset.mkPlugin <span class="dv">100</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>  ]</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>main <span class="ot">=</span> …</span></code></pre></div>
<p>So far so good! Now let’s add <code>ShootLasers</code> to the mix:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>  [ Plugin.Double.plugin</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>  , Plugin.Offset.mkPlugin <span class="dv">100</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>  , Plugin.ShootLasers.plugin</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>  ]</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>main <span class="ot">=</span> …</span></code></pre></div>
<p>Uh oh:</p>
<pre><code>Main.hs:16:5: error:
    • Couldn&#39;t match type ‘MonadIO’ with ‘Applicative’
      Expected type: Plugin Pure
        Actual type: Plugin CanIO
    • In the expression: Plugin.ShootLasers.plugin
      In the expression:
        [Plugin.Noop.plugin, (Plugin.Double.plugin :: Plugin Pure),
         (Plugin.Offset.mkPlugin 100), Plugin.ShootLasers.plugin]
      In an equation for ‘plugins’:
          plugins
            = [Plugin.Noop.plugin, (Plugin.Double.plugin :: Plugin Pure),
               (Plugin.Offset.mkPlugin 100), ....]
   |
16 |   , Plugin.ShootLasers.plugin
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p><code>Applicative</code> is a superclass of <code>MonadIO</code>. Abstract types with these constraints can unify, but the concrete types <code>Plugin MonadIO</code> and <code>Plugin Applicative</code> do not unify. We cannot put them together in a list.</p>
<p>So when composing plugins, we need a way to <em>relax</em> the constraints of individual plugins to the “lowest common denominator”. That is, we have to construct a list of <code>Plugin Unconstrained</code>. Therefore we need a function to turn a <code>Plugin ctx</code> into a <code>Plugin Unconstrained</code>, provided that <code>Unconstrained</code> “encompasses” <code>ctx</code>. The <code>relax</code> function accomplishes this:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a>relax</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="ot">  ::</span> (<span class="kw">forall</span> m<span class="op">.</span> ctx&#39; m <span class="ot">=&gt;</span> ctx m)</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>  <span class="ot">=&gt;</span> <span class="dt">Plugin</span> ctx <span class="ot">-&gt;</span> <span class="dt">Plugin</span> ctx&#39;</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>relax (<span class="dt">Plugin</span> n fs) <span class="ot">=</span> <span class="dt">Plugin</span> n fs</span></code></pre></div>
<p>Note the constraint: <code>(forall m. ctx' m =&gt; ctx m)</code>. This requires the <code>QuantifiedConstraints</code> language extension. It means that the function is defined only if <code>ctx</code> (the <em>input</em> plugin capability) is implied by <code>ctx'</code> (the <em>output</em> capability).</p>
<p>Now we can use <code>relax</code> to construct a <code>[Plugin Unconstrained]</code>, because <code>Unconstrained</code> implies all of the individual capabilities available to plugins:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="ot">plugins ::</span> [<span class="dt">Plugin</span> <span class="dt">Unconstrained</span>]</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>  [ relax Plugin.Double.plugin</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>  , relax (Plugin.Offset.mkPlugin <span class="dv">100</span>)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>  , relax Plugin.FlipNegate.plugin</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>  , relax Plugin.ShootLasers.plugin</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>  ]</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a>main <span class="ot">=</span> …</span></code></pre></div>
<p>The prototype now satisfies the <strong>composition</strong> requirement.</p>
<h3 id="executing-plugins">Executing plugins <a href="#executing-plugins">§</a></h3>
<p>The final step is to update the main program to execute the plugins. Where previously we had <code>pure i</code> (and a <code>TODO</code> comment), we now have the Kleisli composition (monadic chaining via <code>(&gt;=&gt;)</code>) of the plugin hook functions, applied to <code>i</code>:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>  <span class="co">-- read start values</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a>  doNegate <span class="ot">&lt;-</span> prompt <span class="st">&quot;negate number? [True|False]&quot;</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a>  i <span class="ot">&lt;-</span> prompt <span class="st">&quot;number (Int)&quot;</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>  (j, doNegate&#39;) <span class="ot">&lt;-</span> <span class="fu">flip</span> runStateT doNegate <span class="op">$</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>    <span class="fu">foldr</span> (<span class="op">&gt;=&gt;</span>) <span class="fu">pure</span> (<span class="fu">fmap</span> pluginHook plugins) i</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a>  <span class="co">-- print result</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>  <span class="kw">let</span> r <span class="ot">=</span> <span class="kw">if</span> doNegate&#39; <span class="kw">then</span> <span class="fu">negate</span> j <span class="kw">else</span> j</span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>  <span class="fu">putStr</span> <span class="st">&quot;result: &quot;</span> <span class="op">*&gt;</span> <span class="fu">print</span> r</span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>  prompt s <span class="ot">=</span> <span class="fu">putStr</span> (s <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span>) <span class="op">*&gt;</span> hFlush stdout <span class="op">*&gt;</span> <span class="fu">readLn</span></span></code></pre></div>
<p>This time running the program, telling it to negate the input and giving it the value <code>10</code>, gives the following transcript:</p>
<pre><code>ftweedal% ./Main
negate number? [True|False]: True
number (Int): 10
pew! pew!
result: 120</code></pre>
<p>We can see that:</p>
<ul>
<li><code>Double</code> doubled the input to <code>20</code></li>
<li><code>Offset</code> added the configured offset of 100, giving <code>120</code></li>
<li><code>FlipNegate</code> turned negation off</li>
<li><code>ShootLasers</code> shot the lasers (hopefully they were not pointed at your foot)</li>
</ul>
<p>As a result, the final output of the program was <code>120</code>. Note that the order of plugins is significant. Plugins appearing earlier in the list are executed earlier.</p>
<h2 id="discussion">Discussion <a href="#discussion">§</a></h2>
<h3 id="paranoia">Paranoia <a href="#paranoia">§</a></h3>
<p>It’s all good and well that plugins express their types. But what’s to stop a <code>Plugin Pure</code> sneakily evolving into a <code>Plugin CanIO</code> upon a new release, and compromising your system?</p>
<p>The paranoid user can mitigate this risk by providing explicit type signatures for each plugin installed in the main program:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="ot">plugins ::</span> [<span class="dt">Plugin</span> <span class="dt">Unconstrained</span>]</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>plugins <span class="ot">=</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a>  [ relax (Plugin.Double.plugin<span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">Pure</span>)</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a>  , relax (Plugin.Offset.mkPlugin <span class="dv">100</span><span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">Pure</span>)</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>  , relax (Plugin.FlipNegate.plugin<span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">CanRWState</span>)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a>  , relax (Plugin.ShootLasers.plugin<span class="ot"> ::</span> <span class="dt">Plugin</span> <span class="dt">CanIO</span>)</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>If any plugin releases a new version that require additional (or fewer) capabilities its type will change, resulting in a type error. For example, if <code>Double</code> becomes a <code>Plugin CanIO</code>, GHC gives the following type error:</p>
<pre><code>Main.hs:14:12: error:
    • Couldn&#39;t match type ‘MonadIO’ with ‘Applicative’
      Expected type: Plugin Pure
        Actual type: Plugin CanIO
    • In the first argument of ‘relax’, namely
        ‘(Plugin.Double.plugin :: Plugin Pure)’
      In the expression: relax (Plugin.Double.plugin :: Plugin Pure)
      In the expression:
        [relax (Plugin.Noop.plugin :: Plugin Pure),
         relax (Plugin.Double.plugin :: Plugin Pure),
         relax (Plugin.Offset.mkPlugin 100 :: Plugin Pure),
         relax (Plugin.FlipNegate.plugin :: Plugin CanRWState), ....]
   |
14 |   , relax (Plugin.Double.plugin :: Plugin Pure)
   |            ^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>Thanks to the constraint type synonyms, the type error is (in my opinion) understandable. Perhaps even non-programmers could make sense of it. Unfortunately, it doesn’t hint at what a user should do to solve it. A better error message would suggest to use <code>relax</code> or to review the plugin’s type. GHC has some support for <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/GHC-TypeLits.html#g:4">user-defined type errors</a>, but at this time it is not possible to augment ordinary type mismatch errors.</p>
<h3 id="multiple-hook-functions">Multiple hook functions <a href="#multiple-hook-functions">§</a></h3>
<p>In real world applications, there can be multiple kinds of plugin functions relating to different behaviours in the main program. For example, Purebred will have a hook for processing a message prior to displaying it, and another hook for manipulating outgoing emails. Some plugins will only use a single hook, but others will use multiple hooks. For example, an OpenPGP plugin would perform decryption and signature verification when preparing a message for display, and perform signing and/or encryption when sending mail.</p>
<p>It is possible that a plugin might require different capabilities for different hooks. This poses a complex design question, with several possible solutions:</p>
<ul>
<li><p>Should all hooks have their design constraints expressed <em>separately</em> at the type level? For example, a plugin type with two hook functions could be written as <code>Plugin ctx1 ctx2</code>. The main problem with this is that adding new hooks to the plugin type is an API-breaking change. It also isn’t particularly human-friendly because the type doesn’t reveal which operation each constraint applies to.</p></li>
<li><p>Should different hooks have different types? Instead of a unified <code>Plugin</code> type, for Purebred we could have a <code>SendHook</code> and <code>DisplayHook</code>. The downside is that installing a plugin that uses multiple hooks means installing all those hooks separately. If the plugin evolves to use more (or fewer) hooks, the user has to do extra work to migrate.</p></li>
<li><p>Should plugins be a single data type, with a single constraint? The downside to this approach is the type does not express which hooks are used, or what the per-hook required capabilities are. The plugin’s single capability constraint is the union of all capabilities required by all hook functions.</p></li>
</ul>
<p>I chose the last approach, for a few reasons. First, when it comes to I/O in particular, if you are trusting <em>any</em> part of the plugin with <code>CanIO</code>, from a risk perspective it doesn’t matter much that <em>other</em> parts cannot perform I/O. Second, I suspect that plugins that use multiple hooks <em>and</em> use different capabilities for those hooks will be uncommon. For me, prioritising API stability and ease of use made the choice easy. But it is still worthwhile to discuss the tradeoffs and alternatives.</p>
<h3 id="implementation-considerations">Implementation considerations <a href="#implementation-considerations">§</a></h3>
<p>Some implementation considerations that arise when applying this plugin system design in Purebred (real-world programs in general) include:</p>
<ul>
<li><p>Plugins have to be be stored in the internal configuration object. Should the hook functions be decomposed early (storing multiple lists of hook functions in the config) or just-in-time (storing a single list of plugins, and extracting the relevant hook functions when they are needed)? I will initially store a single list of plugins.</p></li>
<li><p>It would be nice to provide information about which plugins are installed alongside version info (<code>--version</code>), “about” UI, etc.</p></li>
<li><p>Some standard functionality could be implemented using the plugin system. So, should it be? And should “wired-in” plugins be advertised or hidden?</p></li>
<li><p>What interface(s) should be given for plugin installation? To what extent should plugins be isolated from each other?</p></li>
<li><p>Some plugins will not use all hooks. Purebred might end up having many hooks, but most plugins will use only one or a few of them. To make it convenient to define plugins, I can define a helper function to construct a new plugin whose hooks are all no-ops. Plugin implementers can override the hooks they need.</p></li>
<li><p>Some plugins might need to modify the UI and/or propagate data around. For example, an OpenPGP plugin should let users choose whether to encrypt, sign, or do nothing with an outbound email. I haven’t solved this problem yet, but I’ll need to, somehow.</p></li>
</ul>
<h2 id="conclusion">Conclusion <a href="#conclusion">§</a></h2>
<p>My goal was to design a plugin system for Purebred offering <strong>composition</strong>; <strong>capabilities</strong> expressed through <strong>human-friendly</strong> types, enforced by the type system; and <strong>abstract</strong> plugin implementations so that the main program can evolve. Additionally, there had to be a way to provide <strong>configuration</strong> to plugins that require it. The prototype plugin system described in this post satisfies these requirements.</p>
<p>I left several regions of the plugin system design space unexplored, including dynamic (re)loading of plugins and plugin-specific data and state. These are interesting and challenging problems, but they are not problems that the Purebred project needs to solve right now.</p>
<p>The next step is to take what I’ve learned from this prototype and implement it in Purebred. There will be some new challenges there, and I expect the experience to provide ample material for a follow-up blog post—or several.</p>]]></summary>
</entry>
<entry>
    <title>Hakyll how-to: Fancy title formatting</title>
    <link href="https://frasertweedale.github.io/blog-fp/posts/2021-01-11-hakyll-title-formatting.html" />
    <id>https://frasertweedale.github.io/blog-fp/posts/2021-01-11-hakyll-title-formatting.html</id>
    <published>2021-01-11T00:00:00Z</published>
    <updated>2021-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="hakyll-how-to-fancy-title-formatting">Hakyll how-to: <em>Fancy</em> <code>title</code> <span class="smallcaps">formatting</span></h1>
<p>Sometimes you need special formatting in an article title. I often use monospace (e.g. for a function name), but subscript, superscript or italics might be useful too. The standard <a href="https://jaspervdj.be/hakyll/">Hakyll</a> metadata block doesn’t offer a good way of doing this. But Hakyll is very flexible. In this post I’ll walk through my solution.</p>
<h2 id="the-standard-approach">The standard approach <a href="#the-standard-approach">§</a></h2>
<p><a href="https://pandoc.org/">Pandoc</a> reads an optional YAML <em>metadata block</em> at the beginning of an input file. You specify the <code>title</code> there:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Fancy Hakyll title formatting</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>Hakyll propagates these metadata fields in the <a href="https://hackage.haskell.org/package/hakyll-4.13.4.1/docs/Hakyll-Web-Template-Context.html#v:defaultContext"><code>defaultContext</code></a>, so that you can refer to <code>$title$</code> in the article template(s):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">&lt;h1&gt;</span>$title$<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>$body$</span></code></pre></div>
<p>Typically you also include <code>$title$</code> in the HTML <code>&lt;title&gt;</code> element, in the “top-level” template:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">&lt;html</span><span class="ot"> xmlns=</span><span class="st">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="ot"> xml:lang=</span><span class="st">&quot;en&quot;</span><span class="ot"> lang=</span><span class="st">&quot;en&quot;</span><span class="kw">&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - $title$<span class="kw">&lt;/title&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;/css/default.css&quot;</span> <span class="kw">/&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>  <span class="kw">&lt;/head&gt;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>  …</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>
<h3 id="limitations">Limitations <a href="#limitations">§</a></h3>
<p>Say you want to use monospace for the “Hakyll” in the title. Trying with backticks…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Fancy `Hakyll` title formatting</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>The site builds, but you end up with:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>…</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - Fancy `Hakyll` title formatting<span class="kw">&lt;/title&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>…</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="kw">&lt;h1&gt;</span>Fancy `Hakyll` title formatting<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>…</span></code></pre></div>
<p>Not what we want. The backticks were propagated verbatim, instead of resulting in a <code>&lt;code&gt;</code> element. Worse, when you have formatting at the <em>beginning</em> of the value…</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> *Fancy* Hakyll title formatting</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>Then the build fails with a YAML parse error:</p>
<pre><code>ftweedal% cabal run site build
Up to date
Initialising...
  Creating store...
  Creating provider...
site: ./posts/2021-01-15-hakyll-title-formatting.md:
      YAML parse exception at line 2, column 13,
while scanning an alias:
did not find expected alphabetic or numeric character
  Running rules...</code></pre>
<p>OK, what about using HTML tags in the metadata?</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> &lt;em&gt;Fancy&lt;/em&gt; &lt;code&gt;Hakyll&lt;/code&gt; title formatting</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>The site builds successfully, and the resulting HTML is:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>…</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - <span class="kw">&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span> <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting<span class="kw">&lt;/title&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>…</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="kw">&lt;h1&gt;&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span> <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>…</span></code></pre></div>
<p>The <code>&lt;h1&gt;</code> header is formatted exactly how we want. But now there are literal HTML tags in the <code>&lt;title&gt;</code> (browsers do not recognise formatting here). So we need a “plain” variant of the title to put in the <code>&lt;title&gt;</code> element. We may also need to use the plain variant in Atom/RSS feeds, or other parts of the site.</p>
<p>Also, writing HTML is not nice. A big reason to use Hakyll and Pandoc is to write in a more fluent and human-friendly markup format. It is undesirable to have to revert to HTML.</p>
<h2 id="two-titles">Two titles? <a href="#two-titles">§</a></h2>
<p>As demonstrated, two variants of the title are needed—one with (optional) formatting, and one without. Therefore we could write:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Fancy Hakyll title formatting</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="an">fancyTitle:</span><span class="co"> &lt;em&gt;Fancy&lt;/em&gt; &lt;code&gt;Hakyll&lt;/code&gt; title formatting</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>And update relevant templates to use <code>$fancyTitle$</code>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">&lt;h1&gt;</span>$fancyTitle$<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>$body$</span></code></pre></div>
<p>This approach works. But it is unsatisfying because not only are we writing HTML; we are also writing the same title twice! This fails the DRY (<em>don’t repeat yourself</em>) principle. Even when <code>fancyTitle</code> has formatting, the content is substantially similar. In fact, you could derive the plain variant from the other.</p>
<p>So that’s what I do.</p>
<h2 id="solution">Solution <a href="#solution">§</a></h2>
<p>First, promote the title out of the metadata block and into the document itself, as a heading:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> hakyll, pandoc</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="fu"># *Fancy* `Hakyll` title formatting</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>Sometimes you need…</span></code></pre></div>
<p>You’ll need to update the the compilation rule to extract the first header from the document, compute values for <code>$title$</code> and <code>$fancyTitle$</code> and remember them. Define the extraction function:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">firstHeader ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Inline</span>]</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>firstHeader (<span class="dt">Pandoc</span> _ xs) <span class="ot">=</span> go xs</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  go [] <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>  go (<span class="dt">Header</span> _ _ ys <span class="op">:</span> _) <span class="ot">=</span> <span class="dt">Just</span> ys</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>  go (_ <span class="op">:</span> xs) <span class="ot">=</span> go xs</span></code></pre></div>
<p><span id="removeFormatting">And define the “strip formatting” function. <code>removeFormatting</code> uses <a href="https://hackage.haskell.org/package/pandoc-types-1.22/docs/Text-Pandoc-Walk.html#v:query"><code>Text.Pandoc.Walk.query</code></a> to yield, in order, only the “terminal” or “leaf” data from a <code>[Inline]</code>. <code>query</code> monoidally appends the values yielded by the inner function <code>f</code>.</span></p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">removeFormatting ::</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>removeFormatting <span class="ot">=</span> query f</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>  f inl <span class="ot">=</span> <span class="kw">case</span> inl <span class="kw">of</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    <span class="dt">Str</span> s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>    <span class="dt">Code</span> _ s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>    <span class="dt">Space</span> <span class="ot">-&gt;</span> [<span class="dt">Space</span>]</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a>    <span class="dt">SoftBreak</span> <span class="ot">-&gt;</span> [<span class="dt">SoftBreak</span>]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a>    <span class="dt">LineBreak</span> <span class="ot">-&gt;</span> [<span class="dt">LineBreak</span>]</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true"></a>    <span class="dt">Math</span> _ s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true"></a>    <span class="dt">RawInline</span> _ s <span class="ot">-&gt;</span> [<span class="dt">Str</span> s]</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true"></a>    _ <span class="ot">-&gt;</span> []</span></code></pre></div>
<p>Next, update the Hakyll compilation rule to extract the header, process and render its content, and save snapshots of the values.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>  <span class="co">-- BEGIN title processing</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  pandoc <span class="ot">&lt;-</span> readPandoc <span class="op">=&lt;&lt;</span> getResourceBody</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    h1 <span class="ot">=</span> <span class="fu">maybe</span> [<span class="dt">Str</span> <span class="st">&quot;no title&quot;</span>] <span class="fu">id</span> <span class="op">.</span> firstHeader <span class="op">&lt;$&gt;</span> pandoc</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>    render f <span class="ot">=</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>      writePandoc <span class="op">.</span> <span class="fu">fmap</span> (<span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span> <span class="op">.</span> f)</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a>    title <span class="ot">=</span> render removeFormatting h1</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a>    fancyTitle <span class="ot">=</span> render <span class="fu">id</span> h1</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true"></a>  saveSnapshot <span class="st">&quot;title&quot;</span> title</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true"></a>  saveSnapshot <span class="st">&quot;fancyTitle&quot;</span> fancyTitle</span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true"></a>  <span class="co">-- END title processing</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true"></a></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true"></a>  pandocCompiler</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> ctx</span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true"></a>    <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>The final code change is to update <code>ctx</code> to retrieve values for <code>$title$</code> and <code>$fancyTitle$</code> from the snapshots:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="ot">ctx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>ctx <span class="ot">=</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>  dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;title&quot;</span> <span class="st">&quot;title&quot;</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> snapshotField <span class="st">&quot;fancyTitle&quot;</span> <span class="st">&quot;fancyTitle&quot;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> defaultContext</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a>  loadSnapshotBody (itemIdentifier item) snap</span></code></pre></div>
<p>Finally, update relevant templates. The post template (<code>templates/post.html</code>) does not refer to <code>$title$</code> or <code>$fancyTitle$</code>; the title is now part of the document <code>$body$</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>$body$</span></code></pre></div>
<p>Other templates (e.g. the archive page, <code>templates/archive.html</code>) can use the <code>$fancyTitle$</code>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>Here you can find all my previous posts.</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>  $for(posts)$</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>    <span class="kw">&lt;li&gt;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>      $date$ - <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$fancyTitle$<span class="kw">&lt;/a&gt;</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>    <span class="kw">&lt;/li&gt;</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>  $endfor$</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a><span class="kw">&lt;/ul&gt;</span></span></code></pre></div>
<h3 id="results">Results <a href="#results">§</a></h3>
<p>The resulting HTML has the plain <code>$title$</code> value in the <code>&lt;title&gt;</code> element. The formatted title appears as an <code>&lt;h1&gt;</code> element in the article <code>$body$</code>.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>…</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>    <span class="kw">&lt;title&gt;</span>pureblog - Fancy Hakyll title formatting<span class="kw">&lt;/title&gt;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>…</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a><span class="kw">&lt;h1</span><span class="ot"> id=</span><span class="st">&quot;fancy-hakyll-title-formatting&quot;</span><span class="kw">&gt;&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>  <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting.<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>…</span></code></pre></div>
<p>The archive page uses <code>$fancyTitle$</code>, with the rich formatting, as the link (<code>&lt;a&gt;</code>) text for each post:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a>…</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="kw">&lt;ul&gt;</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>  <span class="kw">&lt;li&gt;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>    2021-01-15 -</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>    <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;./posts/2021-01-15-hakyll-title-formatting.html&quot;</span><span class="kw">&gt;&lt;em&gt;</span>Fancy<span class="kw">&lt;/em&gt;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>    <span class="kw">&lt;code&gt;</span>Hakyll<span class="kw">&lt;/code&gt;</span> title formatting<span class="kw">&lt;/a&gt;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a>  <span class="kw">&lt;/li&gt;</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>  …</span></code></pre></div>
<h2 id="performance-what-not-to-do">Performance (what not to do) <a href="#performance-what-not-to-do">§</a></h2>
<p>It is critical for performance to extract and process the header <em>during compilation</em>, saving snapshots of the computed values. I found this out the hard way. In a previous iteration of my solution, during compilation I only saved a snapshot of the input <em>source</em>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a>compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>  getResourceBody <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;source&quot;</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>  pandocCompiler <span class="op">&gt;&gt;=</span> …</span></code></pre></div>
<p>The behaviour to load the source from the snapshot, parse it and extract the title was part of the <code>Context</code>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ot">headerField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> ([<span class="dt">Inline</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]) <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>headerField key f <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>  doc <span class="ot">&lt;-</span> readPandoc <span class="op">=&lt;&lt;</span> loadSnapshot (itemIdentifier item) <span class="st">&quot;source&quot;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>  <span class="fu">pure</span> <span class="op">.</span> itemBody <span class="op">.</span> writePandoc</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>    <span class="op">$</span> <span class="dt">Pandoc</span> <span class="fu">mempty</span> <span class="op">.</span> <span class="fu">pure</span> <span class="op">.</span> <span class="dt">Plain</span> <span class="op">.</span> f</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>      <span class="op">.</span> <span class="fu">maybe</span> [<span class="dt">Str</span> <span class="st">&quot;no title&quot;</span>] <span class="fu">id</span> <span class="op">.</span> firstHeader</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>    <span class="op">&lt;$&gt;</span> doc</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a><span class="ot">ctx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>ctx <span class="ot">=</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a>  dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> headerField <span class="st">&quot;title&quot;</span> removeFormatting</span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> headerField <span class="st">&quot;fancyTitle&quot;</span> <span class="fu">id</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true"></a>  <span class="op">&lt;&gt;</span> defaultContext</span></code></pre></div>
<p>With this implementation the build duration for my work blog (68 posts at the time) was around 34 seconds. Certainly long enough to irritate me. When I investigated, I discovered that Hakyll executes the process in <code>headerField</code>—load snapshot, parse with Pandoc, extract title—every time it encountered <code>$title$</code> or <code>$fancyTitle$</code> in a template. That was 683 times, or over 10 times per post!</p>
<p>That seemed like an huge number to me, so I worked the numbers. Each post page has its <code>&lt;title&gt;</code>, and also a list of 5 recent articles. Each article appears in the main archive list, and also the list for each of its tags (I guess an average of 3 tags per article). And there are 5 recent articles on the home page.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Monoid</span> (<span class="dt">Sum</span>(..))</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> titles <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> recent <span class="ot">=</span> (<span class="op">*</span><span class="dv">5</span>)</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> archive <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> tags <span class="ot">=</span> (<span class="op">*</span><span class="dv">3</span>)</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">index</span> <span class="ot">=</span> <span class="fu">const</span> <span class="dv">5</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">mconcat</span> [titles, recent, archive, tags, <span class="fu">index</span>] <span class="op">$</span> <span class="dt">Sum</span> <span class="dv">68</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a><span class="dt">Sum</span> {getSum <span class="ot">=</span> <span class="dv">685</span>}</span></code></pre></div>
<p>The estimate (685) was very close to the actual value (683). Although this is the worst case scenario, even the best case scenario—when nothing has changed at all—still caused 192 parses and took significant time (about 9 seconds). This seems to be caused by tags pages always being recompiled. I’m not sure why that happens, but when the titles are cached it’s fast enough to not be an issue (&lt;0.5 seconds).</p>
<p>The big takeaway from all this is: do as little processing as possible in <code>Context</code> field definitions. In my case, doing the title processing in <code>compile</code> and caching the results in dedicated snapshots (<a href="https://hackage.haskell.org/package/hakyll-4.13.4.1/docs/Hakyll-Core-Compiler.html#v:saveSnapshot"><code>saveSnapshot</code></a>) reduced site build time from 34 seconds to 9 seconds!</p>
<h2 id="final-words">Final words <a href="#final-words">§</a></h2>
<p>Pandoc and Hakyll continue to be awesome and powerful tools. Any time I’ve wished to do something a little differently, or enhance my site, I’ve always found a way (up to HTML and CSS, anyway).</p>
<p>I did confirm that my solution results in 1 additional parse of each article source (2 parses in total). Using <a href="https://hackage.haskell.org/package/hakyll-4.13.4.1/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM"><code>pandocCompilerWithTransformM</code></a> I might be able to do the title processing in a callback, so that each article source gets parsed exactly once. This would further reduce the build time. I left this as a future improvement (and an exercise for the reader).</p>
<p>Earlier I did omit one important detail for the sake of clarity. The “recent posts” list accompanying each article requires an additional <code>Rules</code> set, creating a <code>"recent"</code> version of each article <code>Item</code> that can be referenced in the “main” article.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> version <span class="st">&quot;recent&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>  …</span></code></pre></div>
<p>It is in <em>this</em> <code>Rules</code> set that I extract and snapshot the titles. Accordingly, in <code>snapshotField</code> I have to explicitly (and unconditionally) request the snapshot from the <code>"recent"</code> version of the current <code>Item</code>.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="ot">snapshotField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a>snapshotField key snap <span class="ot">=</span> field key <span class="op">$</span> \item <span class="ot">-&gt;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>  <span class="kw">let</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a>    ident <span class="ot">=</span> itemIdentifier item</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a>    ident&#39; <span class="ot">=</span> setVersion (<span class="dt">Just</span> <span class="st">&quot;recent&quot;</span>) ident</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>  <span class="kw">in</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true"></a>    loadSnapshotBody ident&#39; snap</span></code></pre></div>]]></summary>
</entry>

</feed>
